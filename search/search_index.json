{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"My projects # Here are some project that I created. machine learning # project name explanation machine-learning NLP NRE Neural Relation Extraction (NRE) paper-and-code Read paper about AI and code it decompose-jieba math # project name explanation math redis # project name explanation decompose-redis Decompose Redis operating system # project name explanation Linux-OS My knowledge base of Linux operation system linux_in_action algorithm and data structure # project name explanation algorithm My knowledge base of algorithm data-structure My knowledge base of data structure programming language theory # Here are some projects related to programming language theory . project name explanation compiler-principle Note of book Compilers Principles, Techniques and Tools Second Edition automata-and-formal-language Automata theory and formal language theory compiler-principle-in-action The two main-stream compilers, GCC and LLVM python-in-action c-family-language-in-action programming-paradigms software engineering # project name explanation software-engineering software-design-pattern hardware # Hardware application # project name explanation timer-with-thread-pool concurrent-server","title":"Home"},{"location":"#my-projects","text":"Here are some project that I created.","title":"My projects"},{"location":"#machine-learning","text":"project name explanation machine-learning NLP NRE Neural Relation Extraction (NRE) paper-and-code Read paper about AI and code it decompose-jieba","title":"machine learning"},{"location":"#math","text":"project name explanation math","title":"math"},{"location":"#redis","text":"project name explanation decompose-redis Decompose Redis","title":"redis"},{"location":"#operating-system","text":"project name explanation Linux-OS My knowledge base of Linux operation system linux_in_action","title":"operating system"},{"location":"#algorithm-and-data-structure","text":"project name explanation algorithm My knowledge base of algorithm data-structure My knowledge base of data structure","title":"algorithm and data structure"},{"location":"#programming-language-theory","text":"Here are some projects related to programming language theory . project name explanation compiler-principle Note of book Compilers Principles, Techniques and Tools Second Edition automata-and-formal-language Automata theory and formal language theory compiler-principle-in-action The two main-stream compilers, GCC and LLVM python-in-action c-family-language-in-action programming-paradigms","title":"programming language theory"},{"location":"#software-engineering","text":"project name explanation software-engineering software-design-pattern","title":"software engineering"},{"location":"#hardware","text":"Hardware","title":"hardware"},{"location":"#application","text":"project name explanation timer-with-thread-pool concurrent-server","title":"application"},{"location":"about/","text":"About me # Hi, I'm a software engineer living in Hangzhou,China. If you want to get in touch,drop me an email(2238897886@qq.com). I write in Chinese and English, but it takes more time to write in English because of lacking practice. As an software engineer, I insist on studying theories in computer science and software engineering and try to get a clear and comprehensive picture of theories of specific field in computer science and software engineering , because I think the theory can guide engineer in practice. I like reading, below are some book that I think useful to an software engineer. Book Author Introduction to Automata and Language Theory(aka Cinderella Book ) Jeffrey D. Ullman , John E. Hopcroft Compilers: Principles, Techniques, and Tools (aka Dragon Book ) Jeffrey D. Ullman , Alfred V. Aho Foundations of Computer Science/C Edition Jeffrey D. Ullman Deep Learning Ian Goodfellow and Yoshua Bengio and Aaron Courville Advanced Programming in the UNIX\u00ae Environment Understanding the Linux Kernel, 3rd Edition Natural Language Processing with Python Interest # Unix/Linux AI application especially deep learning, such as time serial prediction\uff0cNLP Web application Education # 09.2012-07.2016 B.S. Software Engineering, Department of Information & Control, Xi\u2019an University of Architecture and Technology Career # Period 07.2016-05.2018 Unix/Linux back-end developing 05.2018- AI application developing","title":"About"},{"location":"about/#about-me","text":"Hi, I'm a software engineer living in Hangzhou,China. If you want to get in touch,drop me an email(2238897886@qq.com). I write in Chinese and English, but it takes more time to write in English because of lacking practice. As an software engineer, I insist on studying theories in computer science and software engineering and try to get a clear and comprehensive picture of theories of specific field in computer science and software engineering , because I think the theory can guide engineer in practice. I like reading, below are some book that I think useful to an software engineer. Book Author Introduction to Automata and Language Theory(aka Cinderella Book ) Jeffrey D. Ullman , John E. Hopcroft Compilers: Principles, Techniques, and Tools (aka Dragon Book ) Jeffrey D. Ullman , Alfred V. Aho Foundations of Computer Science/C Edition Jeffrey D. Ullman Deep Learning Ian Goodfellow and Yoshua Bengio and Aaron Courville Advanced Programming in the UNIX\u00ae Environment Understanding the Linux Kernel, 3rd Edition Natural Language Processing with Python","title":"About me"},{"location":"about/#interest","text":"Unix/Linux AI application especially deep learning, such as time serial prediction\uff0cNLP Web application","title":"Interest"},{"location":"about/#education","text":"09.2012-07.2016 B.S. Software Engineering, Department of Information & Control, Xi\u2019an University of Architecture and Technology","title":"Education"},{"location":"about/#career","text":"Period 07.2016-05.2018 Unix/Linux back-end developing 05.2018- AI application developing","title":"Career"},{"location":"Post/","text":"\u5173\u4e8e\u8fd9\u4e9b\u6587\u7ae0 # \u8fd9\u4e9b\u6587\u7ae0\u662f\u6211\u57fa\u4e8e\u6211\u7684\u9605\u8bfb\u6240\u603b\u7ed3\u7684\uff0c\u4e3b\u8981\u5305\u542b\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u601d\u60f3\u3001convention\u3001\u4e00\u4e9b\u60f3\u6cd5\u3001\u601d\u8003\u95ee\u9898\u7684\u89d2\u5ea6\u7b49\uff0c\u8fd9\u5176\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9\u6e90\u4e8e\u6211\u521b\u5efa\u7684\u5de5\u7a0b\uff0c\u8fd9\u5176\u4e2d\u6240\u63cf\u8ff0\u7684\u5185\u5bb9\u4e5f\u4f1a\u5728\u8fd9\u4e9b\u5de5\u7a0b\u4e2d\u51fa\u73b0\u3002","title":"Introduction"},{"location":"Post/#_1","text":"\u8fd9\u4e9b\u6587\u7ae0\u662f\u6211\u57fa\u4e8e\u6211\u7684\u9605\u8bfb\u6240\u603b\u7ed3\u7684\uff0c\u4e3b\u8981\u5305\u542b\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u601d\u60f3\u3001convention\u3001\u4e00\u4e9b\u60f3\u6cd5\u3001\u601d\u8003\u95ee\u9898\u7684\u89d2\u5ea6\u7b49\uff0c\u8fd9\u5176\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9\u6e90\u4e8e\u6211\u521b\u5efa\u7684\u5de5\u7a0b\uff0c\u8fd9\u5176\u4e2d\u6240\u63cf\u8ff0\u7684\u5185\u5bb9\u4e5f\u4f1a\u5728\u8fd9\u4e9b\u5de5\u7a0b\u4e2d\u51fa\u73b0\u3002","title":"\u5173\u4e8e\u8fd9\u4e9b\u6587\u7ae0"},{"location":"Post/0-to-1-and-1-to-many/","text":"\u4ece0\u52301\uff0c\u4ece1\u5230\u591a # \u8fdb\u5316\uff1a\u4ecelist\u5230tree\uff0c\u4ecetree\u5230graph\uff1b \u9000\u5316\uff1agraph\u9000\u5316\u4e3atree\uff0ctree\u9000\u5316\u4e3alist\uff1b \u4ece\u5355\u9012\u5f52\u5230\u591a\u9012\u5f52\u3002 \u4ece\u5355\u7ebf\u7a0b\u5230\u591a\u7ebf\u7a0b\u3002","title":"0-to-1-and-1-to-many"},{"location":"Post/0-to-1-and-1-to-many/#011","text":"\u8fdb\u5316\uff1a\u4ecelist\u5230tree\uff0c\u4ecetree\u5230graph\uff1b \u9000\u5316\uff1agraph\u9000\u5316\u4e3atree\uff0ctree\u9000\u5316\u4e3alist\uff1b \u4ece\u5355\u9012\u5f52\u5230\u591a\u9012\u5f52\u3002 \u4ece\u5355\u7ebf\u7a0b\u5230\u591a\u7ebf\u7a0b\u3002","title":"\u4ece0\u52301\uff0c\u4ece1\u5230\u591a"},{"location":"Post/Abstraction-and-architecture/","text":"Abstraction and architecture # \u672c\u8282\u5bf9\u4e0a\u4e00\u8282\u7684Abstraction in architecture\u4e2d\u6240\u63d0\u53ca\u5185\u5bb9\u8fdb\u884c\u8be6\u7ec6\u8bba\u8ff0\u3002 \u5728\u8fdb\u884c\u7cfb\u7edf\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c loose coupling \u662f\u67b6\u6784\u5e08\u7684\u8ffd\u6c42\u76ee\u6807\uff0c\u4e3a\u6b64\uff0c\u67b6\u6784\u5e08\u4eec\u5f80\u5f80\u8fdb\u884c\u5206\u89e3\uff0c\u6bd4\u5982\u5c06\u7cfb\u7edf\u5206\u89e3\u4e3a\u591a\u4e2a components \uff0c\u7136\u540e\u5404 components \u62bd\u8c61\u51fa \u63a5\u53e3 \uff0c\u5b83\u4eec\u4e4b\u95f4\u5c31\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\uff0c\u663e\u7136\uff0c\u63a5\u53e3\u5c31\u662f\u5bf9\u529f\u80fd\u7684\u62bd\u8c61\u63cf\u8ff0\u3002\u5404 components \u5f7c\u6b64\u76f8\u4e92\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ec6\u8282\uff09\uff0c\u901a\u8fc7 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u5206\u89e3\u65b9\u5f0f\u662f\uff1a\u5206\u5c42\uff0c\u5177\u4f53\u53c2\u89c1 abstraction layer \uff0c\u8fd9\u662fabstraction\u5728architecture\u9886\u57df\u7684\u4e00\u4e2a\u4f53\u73b0\u3002\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684 abstraction layer \u601d\u60f3\u7684\u53ef\u8c13\u7531\u6765\u5df2\u4e45\u4e14\u5f71\u54cd\u6df1\u8fdc\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u65b9\u65b9\u9762\u9762\u6211\u4eec\u90fd\u80fd\u591f\u770b\u5230\u5b83\u7684\u8eab\u5f71\u548c\u5f71\u54cd\uff0c\u540e\u9762\u4e3a\u4e86\u63cf\u8ff0\u4fbf\u5229\uff0c\u5c06 abstraction layer \u601d\u60f3\u7b80\u79f0\u4e3a \u5206\u5c42\u601d\u60f3 \u3002\u6700\u80fd\u591f\u4f53\u73b0 \u5206\u5c42\u601d\u60f3 \u7684\u4e00\u4e2a\u8bcd\u662f\uff1ahierarchy\uff08\u5c42\u7ea7\uff09\uff0c\u7ef4\u57fa\u767e\u79d1\u7684 hierarchy \u5bf9hierarchy\u7684\u603b\u7ed3\u662f\u975e\u5e38\u8be6\u7ec6\u7684\uff0c\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0chierarchy\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff1a Hierarchy is an important concept in a wide variety of fields, such as philosophy , mathematics , computer science , organizational theory , systems theory , and the social sciences (especially political philosophy ). \u5176\u5b9e\u4ece\u8fd9\u4e0a\u8ff0\u8bba\u65ad\u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u5012\u63a8\u51fa\uff1a\u5206\u5c42\u601d\u60f3\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u5176\u5b9e\u5982\u679c\u5f80\u66f4\u6df1\u5c42\u6b21\u53bb\u601d\u8003\u7684\u8bdd\uff0c\u5206\u5c42\u601d\u60f3\u5176\u5b9e\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u601d\u7ef4\uff0c\u5173\u4e8e\u8fd9\u4e2a\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u9605\u8bfb\u3002 \u4e0b\u9762\u662f\u6211\u6240\u603b\u7ed3\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\u4e2d\u5206\u5c42\u7684\u5e94\u7528\uff1a Architecture # \u4f5c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u5e38\u5e38\u542c\u5230architecture\uff08\u67b6\u6784\uff09\u8fd9\u4e2a\u8bcd\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u9ad8\u7aef\u804c\u4f4d\u53eb\u505aarchitect\uff08\u67b6\u6784\u5e08\uff09\u3002\u8f6f\u4ef6\u6216\u7cfb\u7edf\u7684\u67b6\u6784\u4e3a\u6211\u4eec\u63cf\u8ff0\u7684\u7cfb\u7edf\u7684\u7ed3\u6784\u3001\u7ec4\u6210\u90e8\u5206\u3001\u5404\u90e8\u5206\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5206\u5c42\u601d\u60f3\u5bf9architecture\u5f71\u54cd\u4f53\u73b0\u5728\u5404\u79cd\u5404\u6837\u7684 \u5c42\u6b21\u5316\u7ed3\u6784 \uff0c\u6bd4\u5982 Architecture of computing system # \u53c2\u89c1\uff1a Architecture-of-computing-system \u8ba1\u7b97\u673a\u7cfb\u7edf\u5982\u6b64\u590d\u6742\uff0c\u5404\u4e2a\u5c42\u6b21\u4e4b\u95f4\u53ea\u9700\u8981\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u5c31\u53ef\u4ee5\u8fdb\u884c\u4ea4\u4e92\uff0c\u5b8c\u5168\u65e0\u9700\u4e86\u89e3\u5bf9\u65b9\u5177\u4f53\u7684\u7ec6\u8282\u3002\u8bf7\u60f3\u60f3\uff0c\u5982\u679c\u4e0d\u8fd9\u6837\u7684\u8bdd\uff0c\u5219\u591a\u4e48\u590d\u6742\u3002\u62bd\u8c61\u7b80\u5316\u4e86\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u5e26\u6765\u4e86\u5206\u5de5\uff0c\u5e26\u6765\u4e86\u6548\u7387\u3002\u62bd\u8c61\uff0c\u63a9\u76d6\u7ec6\u8282\uff0c\u63d0\u9ad8\u4e86\u6613\u7528\u6027\u3002 Architecture of compiler # \u53c2\u89c1\uff1a The Structure of a Compiler \u4e2d\u95f4\u8868\u793a # \u7f16\u8bd1\u5668\u5206\u4e3a\u524d\u6bb5\u548c\u540e\u7aef\uff0c\u4e2d\u95f4\u8868\u793a\u7406\u89e3\u524d\u6bb5\u4e0e\u540e\u7aef\u3002\u4e5f\u53ef\u4ee5\u8bf4\u4e2d\u95f4\u8868\u793a\u662f\u4e24\u8005\u4e4b\u95f4\u7684\u63a5\u53e3\u3002 Communication protocol # \u5404\u79cd\u5404\u6837\u7684\u901a\u4fe1\u534f\u8bae\u53ef\u4ee5\u8bf4\u662f\u6700\u6700\u80fd\u591f\u4f53\u73b0\u5206\u5c42\u601d\u60f3\u7684\u4e86\uff0c\u5728 Communication protocol \u7684 Protocol design \u7ae0\u8282\u4e2d\u5c31\u603b\u7ed3\u4e86\u534f\u8bae\u6d89\u53ca\u7684\u601d\u60f3\uff1a Layering \u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53c2\u52a0\uff1a Hierarchical internetworking model \u3002 \u4e0b\u9762\u5217\u4e3e\u4e86\u51e0\u4e2a\u5e38\u89c1\u534f\u8bae\uff0c\u5b83\u4eec\u90fd\u80fd\u975e\u5e38\u597d\u5730\u4f53\u73b0\u4e86\u5206\u5c42\u601d\u60f3\uff1a OSI model # OSI model \u53ef\u4ee5\u8bf4\u662f\u5206\u5c42\u601d\u60f3\u7684\u6700\u4f73\u4f53\u73b0\uff0c\u4e0b\u9762\u662f\u6458\u81ea OSI model \uff1a The Open Systems Interconnection model ( OSI model ) is a conceptual model that characterizes and standardizes the communication functions of a telecommunication or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard communication protocols . The model partitions a communication system into abstraction layers . The original version of the model had seven layers. A layer serves the layer above it and is served by the layer below it. \u4e0a\u9762\u8fd9\u6bb5\u8bdd\u5176\u5b9e\u63cf\u8ff0\u4e86 \u5206\u5c42 \u6240\u5e26\u6765\u7684\u597d\u5904\uff1ainteroperability \uff0c\u5404\u5c42\u4e4b\u95f4\u4e92\u76f8\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ed3\u6784\u548c\u6280\u672f\uff09\uff0c\u901a\u8fc7\u7ea6\u5b9a\u597d\u7684 communication protocols \u8fdb\u884c\u4ea4\u4e92\u3002 OSI model by layer layer 7 Application layer 6 Presentation layer 5 Session layer 4 Transport layer 3 Network layer 2 Data link layer 1 Physical layer Internet protocol suite # Database abstraction layer # \u8fd9\u6bb5\u63cf\u8ff0\u975e\u5e38\u597d\uff1a A database abstraction layer ( DBAL or DAL ) is an application programming interface which unifies the communication between a computer application and databases such as SQL Server , DB2 , MySQL , PostgreSQL , Oracle or SQLite . \u63a5\u53e3 # \u4ece\u4e0a\u7bc7\u5f00\u59cb\uff0c\u6211\u4eec\u4e00\u76f4\u90fd\u5728\u63a5\u89e6\u201c\u63a5\u53e3\u201d\u8fd9\u4e2a\u8bcd\u8bed\uff0c\u5728\u4e0a\u7bc7\u4e2d\uff0c\u6211\u628a\u201c\u63a5\u53e3\u201d\u5b9a\u4e49\u4e3a\uff1a\u5bf9\u62bd\u8c61\u7684\u63cf\u8ff0\u3002\u6709\u5fc5\u8981\u770b\u770b\u7ef4\u57fa\u767e\u79d1\u7684 Interface (computing) \uff0c\u5b83\u603b\u7ed3\u5730\u6bd4\u8f83\u597d\u3002 \u4ee5\u4e0b\u4e24\u7c7b\u63a5\u53e3\u662fsoftware engineer\u7ecf\u5e38\u4f1a\u4f7f\u7528\u7684\u4e24\u4e2a\u6982\u5ff5\uff1a Application programming interface aka API Application binary interface aka ABI \u5728 \u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003 \u8282\u4f1a\u5bf9\u4e24\u8005\u8fdb\u884c\u533a\u5206\u3002 \u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003 # \u95ee\u9898\u51fa\u73b0\u5728\u54ea\u4e2a\u5c42\u6b21 # \u5728\u591a\u5c42\u6b21\u4e2d\uff0c\u5f53\u51fa\u73b0\u95ee\u9898\u662f\uff0c\u5c31\u9700\u8981\u8fdb\u884c\u8fd9\u6837\u7684\u8003\u8651\u3002 \u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u501f\u7528\u6982\u5ff5 # \u5f53\u6211\u4eec\u7ad9\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e0d\u540c\u5c42\u6b21\u6765\u601d\u8003\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e0d\u540c\u5c42\u6b21\u4e4b\u95f4\u4f1a\u5b58\u5728\u7740\u5927\u91cf\u7684\u76f8\u4e92\u6982\u5ff5\u501f\u7528\uff0c\u6216\u8005\u8bf4\uff0c\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u672f\u8bed\u6765\u8868\u793a\u7c7b\u4f3c\u7684\u6982\u5ff5\u3002\u6bd4\u5982\uff1a \u6848\u4f8b # \u4e0d\u540c\u5c42\u6b21\u63cf\u8ff0\u672c\u8d28\u4e0a\u975e\u5e38\u7c7b\u4f3c\u7684\u4e8b\u52a1\u6709\u7740\u4e0d\u540c\u7684\u8bf4\u6cd5\uff0c\u6bd4\u5982\u5728 Linux-OS-kernel-is-event-driven \u4e2d\u603b\u7ed3\u7684\uff1a Hardware Software Interrupt-driven Event-driven architecture / Event-driven programming Interrupt Event (computing) Interrupt handler / Interrupt service routine Event handler / Callback function \u5404\u79cdinterrupt\u5c31\u662f\u6240\u8c13\u7684event\u3002 \u6848\u4f8b # linux\u7684 epoll \u7684 triggering mode \u501f\u7528\u4e86 Interrupt \u7684 triggering methods \u6982\u5ff5\u3002 \u6848\u4f8b # \u5728 Understanding.The.Linux.kernel.3rd.Edition \u7684Chapter 4. Interrupt\u5b9a\u4e49\u4e86Synchronous interrupt\u7684\u6982\u5ff5\uff0c\u5b83\u662fHardware\u5c42\u7684\u6982\u5ff5\uff0c\u5728OS\u5c42\uff0c\u4e0e\u5b83\u5bf9\u5e94\u7684\u662f Signal \u3002 \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u8bed\u8a00 # \u5728\u4e0a\u4e00\u8282\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u5df2\u7ecf\u5bf9\u6b64\u8fdb\u884c\u4e86\u5206\u6790\u3002 \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\uff1a Very high-level programming language \u3001\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 High-level programming language \uff09\u3001\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 Low-level programming language \uff09\uff0c \u4e0d\u540c\u5c42\u6b21\u7684\u8bed\u8a00\u4e4b\u95f4\u7684\u8f6c\u6362 # \u6bd4\u5982compiler\u5c31\u662f\u6267\u884c\u8fd9\u4e2a\u76ee\u7684\u7684\u3002 API VS ABI # \u5f53\u6211\u4eec\u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003ABI\u548cAPI\u65f6\uff0c\u5c31\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u4e24\u8005\u7684\u533a\u5206\u662f\u975e\u5e38\u5bb9\u6613\u7684\uff1a\u5b83\u4eec\u662f\u4e0d\u540c\u7684language\u7684 interface \u3002API\u662fhight-level programming language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \uff0c\u800cABI\u5219\u662fmachine language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b63\u5982\u5728\u4e0a\u4e00\u8282\u5728\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u6240\u63d0\u53ca\u7684\uff1a \u4e0d\u7ba1\u591a\u4e48\u9ad8\u7ea7\u7684\u8bed\u8a00\u6700\u7ec8\u90fd\u9700\u8981\u88ab\u7ffb\u8bd1\uff08compiler\u6216interpreter\uff09\u4e3a machine language \u624d\u80fd\u591f\u88ab\u673a\u5668\u6267\u884c \u6240\u4ee5\u9700\u8981\u5b9a\u4e49hight-level programming language\u4e2d\u7684\u5404\u79cd\u6982\u5ff5\u5982\u4f55\u7ffb\u8bd1\u4e3amachine language\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u662fABI\u4e2d\u6240\u5305\u542b\u7684\uff0c\u6bd4\u5982calling convention\u7b49\u3002 Linux kernel and GNU C Library define the Linux API . After compilation, the binaries offer an ABI; keeping this ABI stable over a long time is important for ISVs . \u603b\u7ed3 # \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u5206\u5c42\uff0c\u62bd\u8c61\uff0c\u63a5\u53e3\uff0c\u8fd9\u8bcd\u53ef\u4ee5\u770b\u505a\u662f\u540c\u4e49\u8bcd\u3002 \u5206\u5c42\u5e26\u6765\u7684\u4ef7\u503c # \u5206\u5c42\u5e26\u6765\u89e3\u8026\uff0c\u5206\u5c42\u5e26\u6765\u7b80\u5316 Separation of concerns # Portability # \u5982 Diversity of operating systems and portability \u62bd\u8c61\u5c42\u5e26\u6765\u79fb\u690d\u6027 \u5206\u5c42\u5e26\u6765\u5b89\u5168 # \u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\uff1a kernel space . user space . This separation prevents user data and kernel data from interfering with each other and causing instability and slowness, as well as preventing malfunctioning application programs from crashing the entire operating system. \u5206\u5c42\u5e26\u6765\u9694\u79bb\uff0c\u8fdb\u800c\u5e26\u6765\u5b89\u5168 \u5206\u5c42\u5e26\u6765 modularity # \u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\u3002 \u5206\u5c42\u4e0e\u6808\u3001pipeline # \u4e00\u822c\uff0c\u4f1a\u5c06\u6309\u7167\u5206\u5c42\u8bbe\u8ba1\u7684\u7cfb\u7edf\u79f0\u4e3a\u6808\uff0c\u6bd4\u5982\u534f\u8bae\u6808\uff0c\u53e6\u5916\u4e00\u4e2a\u4e0e\u6b64\u76f8\u5173\u7684\u8bcd\u662fpipeline\u3002\u663e\u7136\uff0c\u65e0\u8bbapipeline\u8fd8\u662f\u6808\uff0c\u5b83\u4eec\u90fd\u662f\u7ebf\u6027\u7ed3\u6784\uff0c\u8fd9\u4e0e\u5206\u5c42\u7ed3\u6784\u662f\u7ebf\u6027\u7ed3\u6784\u662f\u76f8\u5951\u5408\u7684\u3002 See also: Solution stack See also: # Abstraction (computer science) Abstraction layer Layer (object-oriented design)","title":"Abstraction and architecture"},{"location":"Post/Abstraction-and-architecture/#abstraction-and-architecture","text":"\u672c\u8282\u5bf9\u4e0a\u4e00\u8282\u7684Abstraction in architecture\u4e2d\u6240\u63d0\u53ca\u5185\u5bb9\u8fdb\u884c\u8be6\u7ec6\u8bba\u8ff0\u3002 \u5728\u8fdb\u884c\u7cfb\u7edf\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c loose coupling \u662f\u67b6\u6784\u5e08\u7684\u8ffd\u6c42\u76ee\u6807\uff0c\u4e3a\u6b64\uff0c\u67b6\u6784\u5e08\u4eec\u5f80\u5f80\u8fdb\u884c\u5206\u89e3\uff0c\u6bd4\u5982\u5c06\u7cfb\u7edf\u5206\u89e3\u4e3a\u591a\u4e2a components \uff0c\u7136\u540e\u5404 components \u62bd\u8c61\u51fa \u63a5\u53e3 \uff0c\u5b83\u4eec\u4e4b\u95f4\u5c31\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\uff0c\u663e\u7136\uff0c\u63a5\u53e3\u5c31\u662f\u5bf9\u529f\u80fd\u7684\u62bd\u8c61\u63cf\u8ff0\u3002\u5404 components \u5f7c\u6b64\u76f8\u4e92\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ec6\u8282\uff09\uff0c\u901a\u8fc7 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u5206\u89e3\u65b9\u5f0f\u662f\uff1a\u5206\u5c42\uff0c\u5177\u4f53\u53c2\u89c1 abstraction layer \uff0c\u8fd9\u662fabstraction\u5728architecture\u9886\u57df\u7684\u4e00\u4e2a\u4f53\u73b0\u3002\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684 abstraction layer \u601d\u60f3\u7684\u53ef\u8c13\u7531\u6765\u5df2\u4e45\u4e14\u5f71\u54cd\u6df1\u8fdc\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u65b9\u65b9\u9762\u9762\u6211\u4eec\u90fd\u80fd\u591f\u770b\u5230\u5b83\u7684\u8eab\u5f71\u548c\u5f71\u54cd\uff0c\u540e\u9762\u4e3a\u4e86\u63cf\u8ff0\u4fbf\u5229\uff0c\u5c06 abstraction layer \u601d\u60f3\u7b80\u79f0\u4e3a \u5206\u5c42\u601d\u60f3 \u3002\u6700\u80fd\u591f\u4f53\u73b0 \u5206\u5c42\u601d\u60f3 \u7684\u4e00\u4e2a\u8bcd\u662f\uff1ahierarchy\uff08\u5c42\u7ea7\uff09\uff0c\u7ef4\u57fa\u767e\u79d1\u7684 hierarchy \u5bf9hierarchy\u7684\u603b\u7ed3\u662f\u975e\u5e38\u8be6\u7ec6\u7684\uff0c\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0chierarchy\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff1a Hierarchy is an important concept in a wide variety of fields, such as philosophy , mathematics , computer science , organizational theory , systems theory , and the social sciences (especially political philosophy ). \u5176\u5b9e\u4ece\u8fd9\u4e0a\u8ff0\u8bba\u65ad\u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u5012\u63a8\u51fa\uff1a\u5206\u5c42\u601d\u60f3\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u5176\u5b9e\u5982\u679c\u5f80\u66f4\u6df1\u5c42\u6b21\u53bb\u601d\u8003\u7684\u8bdd\uff0c\u5206\u5c42\u601d\u60f3\u5176\u5b9e\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u601d\u7ef4\uff0c\u5173\u4e8e\u8fd9\u4e2a\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u9605\u8bfb\u3002 \u4e0b\u9762\u662f\u6211\u6240\u603b\u7ed3\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\u4e2d\u5206\u5c42\u7684\u5e94\u7528\uff1a","title":"Abstraction and architecture"},{"location":"Post/Abstraction-and-architecture/#architecture","text":"\u4f5c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u5e38\u5e38\u542c\u5230architecture\uff08\u67b6\u6784\uff09\u8fd9\u4e2a\u8bcd\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u9ad8\u7aef\u804c\u4f4d\u53eb\u505aarchitect\uff08\u67b6\u6784\u5e08\uff09\u3002\u8f6f\u4ef6\u6216\u7cfb\u7edf\u7684\u67b6\u6784\u4e3a\u6211\u4eec\u63cf\u8ff0\u7684\u7cfb\u7edf\u7684\u7ed3\u6784\u3001\u7ec4\u6210\u90e8\u5206\u3001\u5404\u90e8\u5206\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5206\u5c42\u601d\u60f3\u5bf9architecture\u5f71\u54cd\u4f53\u73b0\u5728\u5404\u79cd\u5404\u6837\u7684 \u5c42\u6b21\u5316\u7ed3\u6784 \uff0c\u6bd4\u5982","title":"Architecture"},{"location":"Post/Abstraction-and-architecture/#architecture-of-computing-system","text":"\u53c2\u89c1\uff1a Architecture-of-computing-system \u8ba1\u7b97\u673a\u7cfb\u7edf\u5982\u6b64\u590d\u6742\uff0c\u5404\u4e2a\u5c42\u6b21\u4e4b\u95f4\u53ea\u9700\u8981\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u5c31\u53ef\u4ee5\u8fdb\u884c\u4ea4\u4e92\uff0c\u5b8c\u5168\u65e0\u9700\u4e86\u89e3\u5bf9\u65b9\u5177\u4f53\u7684\u7ec6\u8282\u3002\u8bf7\u60f3\u60f3\uff0c\u5982\u679c\u4e0d\u8fd9\u6837\u7684\u8bdd\uff0c\u5219\u591a\u4e48\u590d\u6742\u3002\u62bd\u8c61\u7b80\u5316\u4e86\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u5e26\u6765\u4e86\u5206\u5de5\uff0c\u5e26\u6765\u4e86\u6548\u7387\u3002\u62bd\u8c61\uff0c\u63a9\u76d6\u7ec6\u8282\uff0c\u63d0\u9ad8\u4e86\u6613\u7528\u6027\u3002","title":"Architecture of computing system"},{"location":"Post/Abstraction-and-architecture/#architecture-of-compiler","text":"\u53c2\u89c1\uff1a The Structure of a Compiler","title":"Architecture of compiler"},{"location":"Post/Abstraction-and-architecture/#_1","text":"\u7f16\u8bd1\u5668\u5206\u4e3a\u524d\u6bb5\u548c\u540e\u7aef\uff0c\u4e2d\u95f4\u8868\u793a\u7406\u89e3\u524d\u6bb5\u4e0e\u540e\u7aef\u3002\u4e5f\u53ef\u4ee5\u8bf4\u4e2d\u95f4\u8868\u793a\u662f\u4e24\u8005\u4e4b\u95f4\u7684\u63a5\u53e3\u3002","title":"\u4e2d\u95f4\u8868\u793a"},{"location":"Post/Abstraction-and-architecture/#communication-protocol","text":"\u5404\u79cd\u5404\u6837\u7684\u901a\u4fe1\u534f\u8bae\u53ef\u4ee5\u8bf4\u662f\u6700\u6700\u80fd\u591f\u4f53\u73b0\u5206\u5c42\u601d\u60f3\u7684\u4e86\uff0c\u5728 Communication protocol \u7684 Protocol design \u7ae0\u8282\u4e2d\u5c31\u603b\u7ed3\u4e86\u534f\u8bae\u6d89\u53ca\u7684\u601d\u60f3\uff1a Layering \u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53c2\u52a0\uff1a Hierarchical internetworking model \u3002 \u4e0b\u9762\u5217\u4e3e\u4e86\u51e0\u4e2a\u5e38\u89c1\u534f\u8bae\uff0c\u5b83\u4eec\u90fd\u80fd\u975e\u5e38\u597d\u5730\u4f53\u73b0\u4e86\u5206\u5c42\u601d\u60f3\uff1a","title":"Communication protocol"},{"location":"Post/Abstraction-and-architecture/#osi-model","text":"OSI model \u53ef\u4ee5\u8bf4\u662f\u5206\u5c42\u601d\u60f3\u7684\u6700\u4f73\u4f53\u73b0\uff0c\u4e0b\u9762\u662f\u6458\u81ea OSI model \uff1a The Open Systems Interconnection model ( OSI model ) is a conceptual model that characterizes and standardizes the communication functions of a telecommunication or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard communication protocols . The model partitions a communication system into abstraction layers . The original version of the model had seven layers. A layer serves the layer above it and is served by the layer below it. \u4e0a\u9762\u8fd9\u6bb5\u8bdd\u5176\u5b9e\u63cf\u8ff0\u4e86 \u5206\u5c42 \u6240\u5e26\u6765\u7684\u597d\u5904\uff1ainteroperability \uff0c\u5404\u5c42\u4e4b\u95f4\u4e92\u76f8\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ed3\u6784\u548c\u6280\u672f\uff09\uff0c\u901a\u8fc7\u7ea6\u5b9a\u597d\u7684 communication protocols \u8fdb\u884c\u4ea4\u4e92\u3002 OSI model by layer layer 7 Application layer 6 Presentation layer 5 Session layer 4 Transport layer 3 Network layer 2 Data link layer 1 Physical layer","title":"OSI model"},{"location":"Post/Abstraction-and-architecture/#internet-protocol-suite","text":"","title":"Internet protocol suite"},{"location":"Post/Abstraction-and-architecture/#database-abstraction-layer","text":"\u8fd9\u6bb5\u63cf\u8ff0\u975e\u5e38\u597d\uff1a A database abstraction layer ( DBAL or DAL ) is an application programming interface which unifies the communication between a computer application and databases such as SQL Server , DB2 , MySQL , PostgreSQL , Oracle or SQLite .","title":"Database abstraction layer"},{"location":"Post/Abstraction-and-architecture/#_2","text":"\u4ece\u4e0a\u7bc7\u5f00\u59cb\uff0c\u6211\u4eec\u4e00\u76f4\u90fd\u5728\u63a5\u89e6\u201c\u63a5\u53e3\u201d\u8fd9\u4e2a\u8bcd\u8bed\uff0c\u5728\u4e0a\u7bc7\u4e2d\uff0c\u6211\u628a\u201c\u63a5\u53e3\u201d\u5b9a\u4e49\u4e3a\uff1a\u5bf9\u62bd\u8c61\u7684\u63cf\u8ff0\u3002\u6709\u5fc5\u8981\u770b\u770b\u7ef4\u57fa\u767e\u79d1\u7684 Interface (computing) \uff0c\u5b83\u603b\u7ed3\u5730\u6bd4\u8f83\u597d\u3002 \u4ee5\u4e0b\u4e24\u7c7b\u63a5\u53e3\u662fsoftware engineer\u7ecf\u5e38\u4f1a\u4f7f\u7528\u7684\u4e24\u4e2a\u6982\u5ff5\uff1a Application programming interface aka API Application binary interface aka ABI \u5728 \u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003 \u8282\u4f1a\u5bf9\u4e24\u8005\u8fdb\u884c\u533a\u5206\u3002","title":"\u63a5\u53e3"},{"location":"Post/Abstraction-and-architecture/#_3","text":"","title":"\u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003"},{"location":"Post/Abstraction-and-architecture/#_4","text":"\u5728\u591a\u5c42\u6b21\u4e2d\uff0c\u5f53\u51fa\u73b0\u95ee\u9898\u662f\uff0c\u5c31\u9700\u8981\u8fdb\u884c\u8fd9\u6837\u7684\u8003\u8651\u3002","title":"\u95ee\u9898\u51fa\u73b0\u5728\u54ea\u4e2a\u5c42\u6b21"},{"location":"Post/Abstraction-and-architecture/#_5","text":"\u5f53\u6211\u4eec\u7ad9\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e0d\u540c\u5c42\u6b21\u6765\u601d\u8003\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e0d\u540c\u5c42\u6b21\u4e4b\u95f4\u4f1a\u5b58\u5728\u7740\u5927\u91cf\u7684\u76f8\u4e92\u6982\u5ff5\u501f\u7528\uff0c\u6216\u8005\u8bf4\uff0c\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u672f\u8bed\u6765\u8868\u793a\u7c7b\u4f3c\u7684\u6982\u5ff5\u3002\u6bd4\u5982\uff1a","title":"\u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u501f\u7528\u6982\u5ff5"},{"location":"Post/Abstraction-and-architecture/#_6","text":"\u4e0d\u540c\u5c42\u6b21\u63cf\u8ff0\u672c\u8d28\u4e0a\u975e\u5e38\u7c7b\u4f3c\u7684\u4e8b\u52a1\u6709\u7740\u4e0d\u540c\u7684\u8bf4\u6cd5\uff0c\u6bd4\u5982\u5728 Linux-OS-kernel-is-event-driven \u4e2d\u603b\u7ed3\u7684\uff1a Hardware Software Interrupt-driven Event-driven architecture / Event-driven programming Interrupt Event (computing) Interrupt handler / Interrupt service routine Event handler / Callback function \u5404\u79cdinterrupt\u5c31\u662f\u6240\u8c13\u7684event\u3002","title":"\u6848\u4f8b"},{"location":"Post/Abstraction-and-architecture/#_7","text":"linux\u7684 epoll \u7684 triggering mode \u501f\u7528\u4e86 Interrupt \u7684 triggering methods \u6982\u5ff5\u3002","title":"\u6848\u4f8b"},{"location":"Post/Abstraction-and-architecture/#_8","text":"\u5728 Understanding.The.Linux.kernel.3rd.Edition \u7684Chapter 4. Interrupt\u5b9a\u4e49\u4e86Synchronous interrupt\u7684\u6982\u5ff5\uff0c\u5b83\u662fHardware\u5c42\u7684\u6982\u5ff5\uff0c\u5728OS\u5c42\uff0c\u4e0e\u5b83\u5bf9\u5e94\u7684\u662f Signal \u3002","title":"\u6848\u4f8b"},{"location":"Post/Abstraction-and-architecture/#_9","text":"\u5728\u4e0a\u4e00\u8282\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u5df2\u7ecf\u5bf9\u6b64\u8fdb\u884c\u4e86\u5206\u6790\u3002 \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\uff1a Very high-level programming language \u3001\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 High-level programming language \uff09\u3001\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 Low-level programming language \uff09\uff0c","title":"\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u8bed\u8a00"},{"location":"Post/Abstraction-and-architecture/#_10","text":"\u6bd4\u5982compiler\u5c31\u662f\u6267\u884c\u8fd9\u4e2a\u76ee\u7684\u7684\u3002","title":"\u4e0d\u540c\u5c42\u6b21\u7684\u8bed\u8a00\u4e4b\u95f4\u7684\u8f6c\u6362"},{"location":"Post/Abstraction-and-architecture/#api-vs-abi","text":"\u5f53\u6211\u4eec\u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003ABI\u548cAPI\u65f6\uff0c\u5c31\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u4e24\u8005\u7684\u533a\u5206\u662f\u975e\u5e38\u5bb9\u6613\u7684\uff1a\u5b83\u4eec\u662f\u4e0d\u540c\u7684language\u7684 interface \u3002API\u662fhight-level programming language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \uff0c\u800cABI\u5219\u662fmachine language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b63\u5982\u5728\u4e0a\u4e00\u8282\u5728\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u6240\u63d0\u53ca\u7684\uff1a \u4e0d\u7ba1\u591a\u4e48\u9ad8\u7ea7\u7684\u8bed\u8a00\u6700\u7ec8\u90fd\u9700\u8981\u88ab\u7ffb\u8bd1\uff08compiler\u6216interpreter\uff09\u4e3a machine language \u624d\u80fd\u591f\u88ab\u673a\u5668\u6267\u884c \u6240\u4ee5\u9700\u8981\u5b9a\u4e49hight-level programming language\u4e2d\u7684\u5404\u79cd\u6982\u5ff5\u5982\u4f55\u7ffb\u8bd1\u4e3amachine language\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u662fABI\u4e2d\u6240\u5305\u542b\u7684\uff0c\u6bd4\u5982calling convention\u7b49\u3002 Linux kernel and GNU C Library define the Linux API . After compilation, the binaries offer an ABI; keeping this ABI stable over a long time is important for ISVs .","title":"API VS ABI"},{"location":"Post/Abstraction-and-architecture/#_11","text":"\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u5206\u5c42\uff0c\u62bd\u8c61\uff0c\u63a5\u53e3\uff0c\u8fd9\u8bcd\u53ef\u4ee5\u770b\u505a\u662f\u540c\u4e49\u8bcd\u3002","title":"\u603b\u7ed3"},{"location":"Post/Abstraction-and-architecture/#_12","text":"\u5206\u5c42\u5e26\u6765\u89e3\u8026\uff0c\u5206\u5c42\u5e26\u6765\u7b80\u5316","title":"\u5206\u5c42\u5e26\u6765\u7684\u4ef7\u503c"},{"location":"Post/Abstraction-and-architecture/#separation-of-concerns","text":"","title":"Separation of concerns"},{"location":"Post/Abstraction-and-architecture/#portability","text":"\u5982 Diversity of operating systems and portability \u62bd\u8c61\u5c42\u5e26\u6765\u79fb\u690d\u6027","title":"Portability"},{"location":"Post/Abstraction-and-architecture/#_13","text":"\u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\uff1a kernel space . user space . This separation prevents user data and kernel data from interfering with each other and causing instability and slowness, as well as preventing malfunctioning application programs from crashing the entire operating system. \u5206\u5c42\u5e26\u6765\u9694\u79bb\uff0c\u8fdb\u800c\u5e26\u6765\u5b89\u5168","title":"\u5206\u5c42\u5e26\u6765\u5b89\u5168"},{"location":"Post/Abstraction-and-architecture/#modularity","text":"\u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\u3002","title":"\u5206\u5c42\u5e26\u6765modularity"},{"location":"Post/Abstraction-and-architecture/#pipeline","text":"\u4e00\u822c\uff0c\u4f1a\u5c06\u6309\u7167\u5206\u5c42\u8bbe\u8ba1\u7684\u7cfb\u7edf\u79f0\u4e3a\u6808\uff0c\u6bd4\u5982\u534f\u8bae\u6808\uff0c\u53e6\u5916\u4e00\u4e2a\u4e0e\u6b64\u76f8\u5173\u7684\u8bcd\u662fpipeline\u3002\u663e\u7136\uff0c\u65e0\u8bbapipeline\u8fd8\u662f\u6808\uff0c\u5b83\u4eec\u90fd\u662f\u7ebf\u6027\u7ed3\u6784\uff0c\u8fd9\u4e0e\u5206\u5c42\u7ed3\u6784\u662f\u7ebf\u6027\u7ed3\u6784\u662f\u76f8\u5951\u5408\u7684\u3002 See also: Solution stack","title":"\u5206\u5c42\u4e0e\u6808\u3001pipeline"},{"location":"Post/Abstraction-and-architecture/#see-also","text":"Abstraction (computer science) Abstraction layer Layer (object-oriented design)","title":"See also:"},{"location":"Post/Abstraction-and-model/","text":"Abstraction and model # Conceptual model \uff1a A conceptual model is a representation of a system, made of the composition of concepts which are used to help people know , understand , or simulate a subject the model represents. Conceptual model \u662f\u5bf9concept\uff08\u901a\u8fc7abstraction\u521b\u5efa\u7684\uff09\u548c\u5176relation\u7684\u63cf\u8ff0\uff08\u5176\u5b9e\u5b83\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u8fc7\u7a0b\uff09\uff0c\u5b83\u662f\u5bf9\u539f\u7406\u7684\u63cf\u8ff0\uff0c\u5b83\u6ca1\u6709\u8fbe\u5230\u5b9e\u73b0\u5c42\u9762\uff0c\u5b83\u6307\u5bfc\u7740\u5b9e\u73b0\u3002\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\uff0c\u6709\u7740\u975e\u5e38\u591a\u8457\u540d\u7684 conceptual model \u3002\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u56de\u987e\u5b66\u4e60\u751f\u6daf\uff0c\u6559\u6750\u5f80\u5f80\u662f\u5148\u4ece\u7406\u8bba\u6a21\u578b\uff08\u5176\u5b9e\u5c31\u662f\u6982\u5ff5\u6a21\u578b\uff09\u5f00\u59cb\u8bb2\u8d77\uff0c\u540e\u9762\u518d\u6765\u8bb2\u8ff0\u5b9e\u73b0\uff0c\u56e0\u4e3a\u7406\u8bba\u6a21\u578b\u5254\u9664\u4e86\u5f88\u591a\u7ec6\u8282\uff0c\u800c\u62bd\u8c61\u51fa\u6765\u6700\u6700\u672c\u8d28\u7684\u5185\u5bb9\uff0c\u6613\u4e8e\u7406\u89e3\uff0c\u4e5f\u5c31\u662f Conceptual model \u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u52a0\u8f7b\u677e\u5730 understand \u3002 \u672c\u8282\u603b\u7ed3\u4e00\u4e9b\u5e38\u89c1\u7684model\u3002 Task model # \u4e00\u4e9b\u5173\u4e8etask model\u7684\u5185\u5bb9\uff1a Computer multitasking Task parallelism Task (computing) \u5728task model\u4e2d\uff0c\u5f80\u5f80\u6709 \u7ba1\u7406\u8005 \uff08manager\uff09\u7684\u89d2\u8272\uff0c\u5b83\u8d1f\u8d23 \u63a7\u5236 \u6574\u4e2a\u7cfb\u7edf\uff1a \u8c03\u5ea6task\uff0c\u5177\u5907 \u8c03\u5ea6\u8005 \u7684\u89d2\u8272 \u76d1\u63a7task\uff0c\u5982\u5bf9task\u7684resource usage\u8fdb\u884c\u76d1\u63a7\uff0c\u5177\u5907 \u76d1\u63a7\u8005 \u7684\u89d2\u8272 \u7528\u6237\u53ef\u4ee5\u5411manager\u8bf7\u6c42\u521b\u5efatask\u3001\u64cd\u4f5ctask\u7b49\u3002 \u4f7f\u7528task model\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u7684\u4e00\u4e9b\u95ee\u9898\uff1a task\u662f\u4ec0\u4e48 \u7ba1\u7406\u8005 \u662f\u4ec0\u4e48 task\u7684 \u6267\u884c\u8005 \u662f\u4ec0\u4e48 \u4e0b\u9762\u4f7f\u7528task model\u6765\u63cf\u8ff0\u4e00\u4e9b\u7cfb\u7edf\uff1a Computer multitasking \u4e2d\uff0c \u7ba1\u7406\u8005 \u662foperating system kernel\uff0c\u662ftask\u662fprocess\u6216thread\u7684\u6267\u884c\uff0c\u5b83\u7684\u6267\u884c\u8005\u662fCPU\u3002 celery \u4e2d\uff0ctask\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7531\u7528\u6237\u5b9a\u4e49\u7684task function\uff0c\u6267\u884c\u8005\u5176\u5b9e\u5c31\u662fprocess\u4e86\uff0c \u8c03\u5ea6\u8005 \u5176\u5b9e\u5c31\u662f\u5b83\u7684 task queue \u4e86\uff0c\u663e\u7136\u548cOS kernel\u7684\u8c03\u5ea6\u8005\u76f8\u6bd4\uff0c\u5b83\u7684\u8c03\u5ea6\u7b56\u7565\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002 \u5173\u4e8e\u8c03\u5ea6\u8005\uff0c\u53c2\u89c1\uff1a Scheduling (computing) Context switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c # \u672c\u8282\u6240\u63cf\u8ff0\u7684context switch\u662f\u5e7f\u4e49\u7684context switch\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u5c40\u9650\u4e8eprocess\u7684context switch\u3002\u56e0\u4e3atask model\u4e2d\u5b58\u5728\u7740\u7684\u5e76\u53d1\u6267\u884c\u7684task\uff0c\u5e76\u4e14\u7ba1\u7406\u8005\u4f1a\u8fdb\u884c\u8c03\u5ea6\uff0c\u6240\u4ee5\u5c31\u4f1a\u53d1\u751fcontext switch\uff0c\u6bd4\u5982\uff1a git branch\uff0c Frictionless Context Switching \u6240\u4ee5\uff0ccontext switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c\u3002 \u4e0etask model\u76f8\u5173\u7684\u53e6\u5916\u4e00\u4e2a\u6982\u5ff5\u5c31\u662f\uff1atask manager\uff0c\u6bd4\u5982 Task Manager (Windows) \u3002 Event-driven model # \u4e00\u4e9b\u5173\u4e4eevent-driven model\u7684\u5185\u5bb9\uff1a Event (computing) Event-driven programming Event-driven architecture Event handler Interrupt Interrupt-driven Interrupt handler \u4f7f\u7528event-driven model\u548c\u4e0a\u8ff0\u7684task model\u53ef\u4ee5\u63cf\u8ff0\u592a\u591a\u592a\u591a\u7684software # \u6bd4\u5982\uff1aOS kernel\u5bf9hardware\u7684\u7ba1\u7406\u53ef\u4ee5\u4f7f\u7528event-driven model\u6765\u8fdb\u884c\u63cf\u8ff0\uff1bOS kernel\u5b9e\u73b0multitasking\u53ef\u4ee5\u4f7f\u7528task model\u6765\u8fdb\u884c\u63cf\u8ff0\u3002 \u6a21\u578b\u4e0e\u5b9e\u73b0 # \u5728\u9f99\u4e66\u7684 \u7b2c\u4e03\u7ae0 \u4e2d\u6240\u8bb2\u8ff0\u7684logical address space\u662f\u4e00\u4e2a\u6982\u5ff5\u6a21\u578b\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u6982\u5ff5\u6a21\u578b\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u65f6\u5019\uff0c\u76ee\u524d\u4e3b\u6d41\u7684\u5b9e\u73b0\u65b9\u5f0f\u662fpaged virtual address space\u3002 See also # Database model Data model","title":"Abstraction and model"},{"location":"Post/Abstraction-and-model/#abstraction-and-model","text":"Conceptual model \uff1a A conceptual model is a representation of a system, made of the composition of concepts which are used to help people know , understand , or simulate a subject the model represents. Conceptual model \u662f\u5bf9concept\uff08\u901a\u8fc7abstraction\u521b\u5efa\u7684\uff09\u548c\u5176relation\u7684\u63cf\u8ff0\uff08\u5176\u5b9e\u5b83\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u8fc7\u7a0b\uff09\uff0c\u5b83\u662f\u5bf9\u539f\u7406\u7684\u63cf\u8ff0\uff0c\u5b83\u6ca1\u6709\u8fbe\u5230\u5b9e\u73b0\u5c42\u9762\uff0c\u5b83\u6307\u5bfc\u7740\u5b9e\u73b0\u3002\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\uff0c\u6709\u7740\u975e\u5e38\u591a\u8457\u540d\u7684 conceptual model \u3002\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u56de\u987e\u5b66\u4e60\u751f\u6daf\uff0c\u6559\u6750\u5f80\u5f80\u662f\u5148\u4ece\u7406\u8bba\u6a21\u578b\uff08\u5176\u5b9e\u5c31\u662f\u6982\u5ff5\u6a21\u578b\uff09\u5f00\u59cb\u8bb2\u8d77\uff0c\u540e\u9762\u518d\u6765\u8bb2\u8ff0\u5b9e\u73b0\uff0c\u56e0\u4e3a\u7406\u8bba\u6a21\u578b\u5254\u9664\u4e86\u5f88\u591a\u7ec6\u8282\uff0c\u800c\u62bd\u8c61\u51fa\u6765\u6700\u6700\u672c\u8d28\u7684\u5185\u5bb9\uff0c\u6613\u4e8e\u7406\u89e3\uff0c\u4e5f\u5c31\u662f Conceptual model \u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u52a0\u8f7b\u677e\u5730 understand \u3002 \u672c\u8282\u603b\u7ed3\u4e00\u4e9b\u5e38\u89c1\u7684model\u3002","title":"Abstraction and model"},{"location":"Post/Abstraction-and-model/#task-model","text":"\u4e00\u4e9b\u5173\u4e8etask model\u7684\u5185\u5bb9\uff1a Computer multitasking Task parallelism Task (computing) \u5728task model\u4e2d\uff0c\u5f80\u5f80\u6709 \u7ba1\u7406\u8005 \uff08manager\uff09\u7684\u89d2\u8272\uff0c\u5b83\u8d1f\u8d23 \u63a7\u5236 \u6574\u4e2a\u7cfb\u7edf\uff1a \u8c03\u5ea6task\uff0c\u5177\u5907 \u8c03\u5ea6\u8005 \u7684\u89d2\u8272 \u76d1\u63a7task\uff0c\u5982\u5bf9task\u7684resource usage\u8fdb\u884c\u76d1\u63a7\uff0c\u5177\u5907 \u76d1\u63a7\u8005 \u7684\u89d2\u8272 \u7528\u6237\u53ef\u4ee5\u5411manager\u8bf7\u6c42\u521b\u5efatask\u3001\u64cd\u4f5ctask\u7b49\u3002 \u4f7f\u7528task model\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u7684\u4e00\u4e9b\u95ee\u9898\uff1a task\u662f\u4ec0\u4e48 \u7ba1\u7406\u8005 \u662f\u4ec0\u4e48 task\u7684 \u6267\u884c\u8005 \u662f\u4ec0\u4e48 \u4e0b\u9762\u4f7f\u7528task model\u6765\u63cf\u8ff0\u4e00\u4e9b\u7cfb\u7edf\uff1a Computer multitasking \u4e2d\uff0c \u7ba1\u7406\u8005 \u662foperating system kernel\uff0c\u662ftask\u662fprocess\u6216thread\u7684\u6267\u884c\uff0c\u5b83\u7684\u6267\u884c\u8005\u662fCPU\u3002 celery \u4e2d\uff0ctask\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7531\u7528\u6237\u5b9a\u4e49\u7684task function\uff0c\u6267\u884c\u8005\u5176\u5b9e\u5c31\u662fprocess\u4e86\uff0c \u8c03\u5ea6\u8005 \u5176\u5b9e\u5c31\u662f\u5b83\u7684 task queue \u4e86\uff0c\u663e\u7136\u548cOS kernel\u7684\u8c03\u5ea6\u8005\u76f8\u6bd4\uff0c\u5b83\u7684\u8c03\u5ea6\u7b56\u7565\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002 \u5173\u4e8e\u8c03\u5ea6\u8005\uff0c\u53c2\u89c1\uff1a Scheduling (computing)","title":"Task model"},{"location":"Post/Abstraction-and-model/#context-switchtask","text":"\u672c\u8282\u6240\u63cf\u8ff0\u7684context switch\u662f\u5e7f\u4e49\u7684context switch\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u5c40\u9650\u4e8eprocess\u7684context switch\u3002\u56e0\u4e3atask model\u4e2d\u5b58\u5728\u7740\u7684\u5e76\u53d1\u6267\u884c\u7684task\uff0c\u5e76\u4e14\u7ba1\u7406\u8005\u4f1a\u8fdb\u884c\u8c03\u5ea6\uff0c\u6240\u4ee5\u5c31\u4f1a\u53d1\u751fcontext switch\uff0c\u6bd4\u5982\uff1a git branch\uff0c Frictionless Context Switching \u6240\u4ee5\uff0ccontext switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c\u3002 \u4e0etask model\u76f8\u5173\u7684\u53e6\u5916\u4e00\u4e2a\u6982\u5ff5\u5c31\u662f\uff1atask manager\uff0c\u6bd4\u5982 Task Manager (Windows) \u3002","title":"Context switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c"},{"location":"Post/Abstraction-and-model/#event-driven-model","text":"\u4e00\u4e9b\u5173\u4e4eevent-driven model\u7684\u5185\u5bb9\uff1a Event (computing) Event-driven programming Event-driven architecture Event handler Interrupt Interrupt-driven Interrupt handler","title":"Event-driven model"},{"location":"Post/Abstraction-and-model/#event-driven-modeltask-modelsoftware","text":"\u6bd4\u5982\uff1aOS kernel\u5bf9hardware\u7684\u7ba1\u7406\u53ef\u4ee5\u4f7f\u7528event-driven model\u6765\u8fdb\u884c\u63cf\u8ff0\uff1bOS kernel\u5b9e\u73b0multitasking\u53ef\u4ee5\u4f7f\u7528task model\u6765\u8fdb\u884c\u63cf\u8ff0\u3002","title":"\u4f7f\u7528event-driven model\u548c\u4e0a\u8ff0\u7684task model\u53ef\u4ee5\u63cf\u8ff0\u592a\u591a\u592a\u591a\u7684software"},{"location":"Post/Abstraction-and-model/#_1","text":"\u5728\u9f99\u4e66\u7684 \u7b2c\u4e03\u7ae0 \u4e2d\u6240\u8bb2\u8ff0\u7684logical address space\u662f\u4e00\u4e2a\u6982\u5ff5\u6a21\u578b\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u6982\u5ff5\u6a21\u578b\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u65f6\u5019\uff0c\u76ee\u524d\u4e3b\u6d41\u7684\u5b9e\u73b0\u65b9\u5f0f\u662fpaged virtual address space\u3002","title":"\u6a21\u578b\u4e0e\u5b9e\u73b0"},{"location":"Post/Abstraction-and-model/#see-also","text":"Database model Data model","title":"See also"},{"location":"Post/Abstraction-and-relation/","text":"Abstraction and relation # \u901a\u8fc7abstraction\u6765\u521b\u9020concept\uff0c\u672c\u6587\u5c06\u63a2\u7d22concept\u4e4b\u95f4\u7684relation\u3002\u53c2\u8003\u5185\u5bb9\uff1a Is-a Has-a","title":"Abstraction and relation"},{"location":"Post/Abstraction-and-relation/#abstraction-and-relation","text":"\u901a\u8fc7abstraction\u6765\u521b\u9020concept\uff0c\u672c\u6587\u5c06\u63a2\u7d22concept\u4e4b\u95f4\u7684relation\u3002\u53c2\u8003\u5185\u5bb9\uff1a Is-a Has-a","title":"Abstraction and relation"},{"location":"Post/Abstraction-and-virtual/","text":"Abstraction and virtual # virtual\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5e38\u5e38\u4f1a\u51fa\u73b0\u7684\u4e00\u4e2a\u8bcd\uff0c\u6bd4\u5982\uff1a Virtual memory Virtual method \u7ecf\u8fc7\u672c\u6587\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5feb\u5730\u77e5\u9053\uff1avirtual\u4e5f\u662f\u4e00\u79cd\u62bd\u8c61\uff0c\u4e00\u79cd\u5206\u5c42\uff0c\u8fd9\u79cd\u5206\u5c42\u6240\u5e26\u6765\u7684\u4ef7\u503c\u5c31\u662f\u89e3\u8026\u3002\u4e0b\u9762\u4ee5virtual address\u6765\u8fdb\u884c\u8bf4\u660e\uff1a process\u5728\u8fd0\u884c\u7684\u65f6\u5019\u4f7f\u7528virtual memory address\uff0c\u7531OS\u6839\u636epage table\u5c06virtual address\u7ffb\u8bd1\u4e3aphysical address\uff1b\u4e0eprocess\u76f4\u63a5\u4f7f\u7528physical address\u76f8\u6bd4\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u591a\u6dfb\u52a0\u4e86\u4e00\u5c42\uff1a\u8f6c\u6362\u5c42\u3002\u8fd9\u79cd\u8bbe\u8ba1\u5e26\u6765\u7684\u4ef7\u503c\u662f\uff1a\u5b83\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u5177\u4f53\u6765\u8bb2\u5c31\u662f\u6309\u7167\u8fd9\u79cd\u8bbe\u8ba1\uff0cpage\u65e2\u53ef\u4ee5\u4f4d\u4e8eRAM\uff0c\u4e5f\u53ef\u4ee5\u4f4d\u4e8edisk\uff0c\u800c\u5982\u679c\u76f4\u63a5\u4f7f\u7528physical address\u7684\u8bdd\uff0c\u5219process\u7684page\u53ea\u80fd\u591f\u4f4d\u4e8eRAM\u4e2d\u3002\u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\uff0cvirtual address\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5728 Paged virtual memory \u4e2d\uff0c\u7531 Page tables \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\uff1athe data structures maps linear to physical addresses. \u5728 Virtual function \u4e2d\uff0c\u7531 Dispatch table \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u3002 \u8fd9\u79cd\u4e00\u5bf9\u591a\u662f\u9700\u8981\u4e00\u4e2atable\u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u7684\u3002 See also: Layer (object-oriented design)","title":"Abstraction and virtual"},{"location":"Post/Abstraction-and-virtual/#abstraction-and-virtual","text":"virtual\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5e38\u5e38\u4f1a\u51fa\u73b0\u7684\u4e00\u4e2a\u8bcd\uff0c\u6bd4\u5982\uff1a Virtual memory Virtual method \u7ecf\u8fc7\u672c\u6587\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5feb\u5730\u77e5\u9053\uff1avirtual\u4e5f\u662f\u4e00\u79cd\u62bd\u8c61\uff0c\u4e00\u79cd\u5206\u5c42\uff0c\u8fd9\u79cd\u5206\u5c42\u6240\u5e26\u6765\u7684\u4ef7\u503c\u5c31\u662f\u89e3\u8026\u3002\u4e0b\u9762\u4ee5virtual address\u6765\u8fdb\u884c\u8bf4\u660e\uff1a process\u5728\u8fd0\u884c\u7684\u65f6\u5019\u4f7f\u7528virtual memory address\uff0c\u7531OS\u6839\u636epage table\u5c06virtual address\u7ffb\u8bd1\u4e3aphysical address\uff1b\u4e0eprocess\u76f4\u63a5\u4f7f\u7528physical address\u76f8\u6bd4\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u591a\u6dfb\u52a0\u4e86\u4e00\u5c42\uff1a\u8f6c\u6362\u5c42\u3002\u8fd9\u79cd\u8bbe\u8ba1\u5e26\u6765\u7684\u4ef7\u503c\u662f\uff1a\u5b83\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u5177\u4f53\u6765\u8bb2\u5c31\u662f\u6309\u7167\u8fd9\u79cd\u8bbe\u8ba1\uff0cpage\u65e2\u53ef\u4ee5\u4f4d\u4e8eRAM\uff0c\u4e5f\u53ef\u4ee5\u4f4d\u4e8edisk\uff0c\u800c\u5982\u679c\u76f4\u63a5\u4f7f\u7528physical address\u7684\u8bdd\uff0c\u5219process\u7684page\u53ea\u80fd\u591f\u4f4d\u4e8eRAM\u4e2d\u3002\u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\uff0cvirtual address\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5728 Paged virtual memory \u4e2d\uff0c\u7531 Page tables \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\uff1athe data structures maps linear to physical addresses. \u5728 Virtual function \u4e2d\uff0c\u7531 Dispatch table \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u3002 \u8fd9\u79cd\u4e00\u5bf9\u591a\u662f\u9700\u8981\u4e00\u4e2atable\u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u7684\u3002 See also: Layer (object-oriented design)","title":"Abstraction and virtual"},{"location":"Post/Abstraction/","text":"Abstraction # \u6ce8\u610f\uff1a\u672c\u6587\u6240\u8ba8\u8bba\u7684 Abstraction \u662f\u5e7f\u4e49\u7684\uff0c\u800c\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e Abstraction (computer science) \u3002 \u7ef4\u57fa\u767e\u79d1 Abstraction \u7ed9\u51fa\u4e86Abstraction\u7684\u5927\u91cf\u63cf\u8ff0\uff0c\u6709\u4e9b\u662f\u6bd4\u8f83\u96be\u4ee5\u7406\u89e3\uff0c\u4e0b\u9762\u662f\u6211\u8ba4\u4e3a\u5176\u4e2d\u6bd4\u8f83\u597d\u7684\u63cf\u8ff0\uff1a Abstraction in its main sense is a conceptual process where general rules and concepts are derived from the usage and classification of specific examples, literal (\"real\" or \" concrete \") signifiers, first principles , or other methods. \u8fd9\u6bb5\u8bdd\u7684\u7b80\u5355\u6765\u8bf4\u662f\uff1a\u62bd\u8c61\u662f\u521b\u5efa concepts \u548c rules \u7684\u8fc7\u7a0b\uff0c\u90a3\u4f55\u4e3aconcept\u5462\uff1f\u8fd9\u4e2a\u95ee\u9898\u662f\u6bd4\u8f83\u201c\u62bd\u8c61\u201d\u7684\uff0c\u96be\u4ee5\u8fdb\u884c\u51c6\u786e\u63cf\u8ff0\u7684\uff0c\u540e\u9762\u7684 \u521b\u9020\u62bd\u8c61\u6982\u5ff5 \u7ae0\u8282\u4f1a\u7ed3\u5408\u5177\u4f53\u6848\u4f8b\u6765\u8fdb\u884c\u8bf4\u660e\u3002 \"An abstraction\" is the outcome of this process\u2014a concept that acts as a common noun for all subordinate\uff08\u4ece\u5c5e\uff09 concepts, and connects any related concepts as a group , field , or category . \u8fd9\u6bb5\u8bdd\u7684\u610f\u601d\u548c\u4e0a\u9762\u7684\u610f\u601d\u7c7b\u4f3c\uff0c\u5728 \u521b\u9020\u62bd\u8c61\u6982\u5ff5 \u7ae0\u8282\uff0c\u4f1a\u7ed3\u5408\u5177\u4f53\u5b9e\u4f8b\u5bf9\u8fd9\u6bb5\u8bdd\u6240\u8868\u8ff0\u7684\u610f\u601d\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002 Conceptual abstractions may be formed by filtering the information content of a concept or an observable phenomenon , selecting only the aspects which are relevant for a particular subjectively valued purpose. The essence of abstractions is preserving information that is relevant in a given context, and forgetting information that is irrelevant in that context. \u2013 John V. Guttag \u62bd\u8c61\u662f\u6982\u62ec\u7684\u8fc7\u7a0b\uff0c\u62bd\u8c61\u662f\u63d0\u53d6\u516c\u5171\u7279\u5f81\u7684\u8fc7\u7a0b\uff0c\u5b83\u6240\u6982\u62ec\u7684\u3001\u6240\u63d0\u53d6\u7684\u516c\u5171\u7279\u5f81\uff0c\u53ef\u4ee5\u4f7f\u7528 concepts \u6765\u8fdb\u884c\u8868\u793a\uff0c\u5f53\u7136\u4e5f\u6709\u5176\u5b83\u7684\u8868\u793a\u65b9\u5f0f\u3002 \u4e0eabstract\u76f8\u5bf9\u7684\u662fconcrete\uff0c\u53c2\u89c1 Abstract and concrete \u3002 \u521b\u9020\u62bd\u8c61\u6982\u5ff5 # \u901a\u8fc7\u521b\u9020\u62bd\u8c61\u7684 concept \uff08\u6982\u5ff5\uff09\u6765\u4f7f\u8868\u8ff0\u66f4\u52a0\u4fbf\u5229\u7684\u505a\u6cd5\u662f\u5728\u5404\u79cd\u5b66\u79d1\u975e\u5e38\u666e\u904d\u7684\uff0c\u5173\u4e8e\u6b64\u7684\u4f8b\u5b50\u6709\uff1a Kernel control path # \u5728\u300a Understanding the Linux Kernel, 3rd Edition \u300b\u7684chapter 1.6.3. Reentrant Kernels\u4e2d\uff0c\u4f5c\u8005\u521b\u9020\u4e86kernel control path\u6982\u5ff5\u6765\u6982\u62eckernel\u4e2d\u7531system call\u7531\u89e6\u53d1\u7684kernel control path\uff08\u540e\u9762\u7b80\u79f0\u4e3asystem call kernel control path\uff09\u3001\u7531interrupt handler\u89e6\u53d1\u7684kernel control path\uff08\u540e\u9762\u7b80\u79f0interrupt handler kernel control path\uff09\u4ee5\u53ca\u540e\u7eed\u968f\u7740kernel\u53d1\u5c55\u53ef\u80fd\u4f1a\u65b0\u589e\u7684\u89e6\u53d1kernel control path\u3002\u663e\u7136kernel control path\u6982\u5ff5\u6982\u62ec\u4e86system call kernel control path\u3001interrupt handler kernel control path\u7684 common feature \uff08\u516c\u5171\u7279\u5f81\uff09\uff0c\u5982\u5b83\u4eec\u90fd\u80fd\u591f\u88absuspend\u3001resume\u3002 \u663e\u7136\u5f53\u4e00\u4e2a\u8868\u8ff0\u4e2d\u4f7f\u7528kernel control path\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b83\u53ef\u4ee5\u662fsystem call kernel control path\u3001\u4e5f\u53ef\u4ee5\u662finterrupt handler kernel control path\uff0c\u8fd9\u5c31\u4f7f\u6211\u4eec\u7684\u8868\u8ff0\u975e\u5e38\u5730\u4fbf\u5229\u3002\u663e\u7136\uff0csystem call kernel control path\u3001interrupt handler kernel control path\u548ckernel control path\u4e4b\u95f4\u662f Is-a \u5173\u7cfb\u3002 Computer multitasking # \u5728 Computer multitasking \u4e2d\u521b\u9020\u4e86task\u6982\u5ff5\uff0c\u5b83\u8868\u793a\u7684\u662fcomputer\u80fd\u591f\u5e76\u53d1\u6267\u884c\u7684\uff0c\u5b83\u53ef\u4ee5\u662fprocess\u4e5f\u53ef\u4ee5\u662fthread\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u5219\u7531\u5177\u4f53\u7684\u5b9e\u73b0\u800c\u5b9a\u3002 \u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2 # \u7eb5\u89c2 programming language\u7684\u53d1\u5c55\u53f2 \uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u8bed\u8a00\u8d8a\u6765\u8d8a\u9ad8\u7ea7\uff0c\u8d8a\u6765\u8d8a\u62bd\u8c61\uff0c\u8d8a\u6765\u8d8a\u6613\u7528\u3002\u6700\u5e95\u5c42\u7684\u8bed\u8a00\uff1a machine language \u6666\u6da9\u96be\u61c2\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5148\u9a71\u5728 machine language \u7684\u57fa\u7840\u4e0a\u62bd\u8c61\u51fa\u4e86 function \u6982\u5ff5\uff0c\u53c8\u62bd\u8c61\u51fa\u4e86 class \u7684\u6982\u5ff5\uff0c\u521b\u5efa\u4e86\u975e\u5e38\u591a \u9ad8\u7ea7\u7684\u8bed\u8a00 \uff0c\u6bd4\u5982C\u3002\u4e0d\u7ba1\u591a\u4e48\u9ad8\u7ea7\u7684\u8bed\u8a00\u6700\u7ec8\u90fd\u9700\u8981\u88ab\u7ffb\u8bd1\uff08compiler\u6216interpreter\uff09\u4e3a machine language \u624d\u80fd\u591f\u88ab\u673a\u5668\u6267\u884c\uff0c\u663e\u7136\u8fd9\u4e2a\u7ffb\u8bd1\u7684\u8fc7\u7a0b\u662f\u4e0e\u524d\u9762\u7684\u62bd\u8c61\u7684\u8fc7\u7a0b\u76f8\u9006\u7684\u3002 \u4e0emachine language\u76f8\u6bd4\uff0c\u6211\u4eec\u53d1\u73b0\u9ad8\u7ea7\u8bed\u8a00\u5f80\u5f80\u4f34\u968f\u7740\u975e\u5e38\u591a\u7684\u6982\u5ff5\uff0c\u800c\u4e14\u8d8a\u9ad8\u7ea7\u7684\u8bed\u8a00\u8c8c\u4f3c\u6982\u5ff5\u8d8a\u591a\uff08\u8fd9\u662f\u6211\u7684\u76f4\u89c9\uff0c\u53ef\u80fd\u5e76\u975e\u5982\u6b64\uff09\uff0c\u5f53\u7136\u4e5f\u8d8a\u5bb9\u6613\u4f7f\u7528\u3002\u4e0e\u6b64\u7c7b\u4f3c\u7684\u662f\uff0c\u5404\u79cdlibrary\u4e3a\u4e86\u7b80\u5316\u67d0\u4e2a\u9886\u57df\u7684\u95ee\u9898\uff0c \u4e5f\u521b\u9020\u4e86\u5404\u79cd\u76f4\u89c2\u6613\u61c2\u7684\u6982\u5ff5\uff0c\u4f7f\u5f97software engineer\u5728\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u65f6\uff0c\u975e\u5e38\u8f7b\u677e\u5bb9\u6613\uff0c\u56e0\u6b64\u83b7\u5f97\u4e86software engineer\u7684\u559c\u7231\u3002 \u4ece\u8fd9\u4e2a\u53d1\u5c55\u53f2\u6211\u4eec\u80fd\u591f\u770b\u5230\u62bd\u8c61\u6240\u5e26\u6765\u7684\u5de8\u5927\u4f18\u52bf\uff1a \u9690\u85cf\u4e86\u5e95\u5c42\u7684\u7ec6\u8282 \u8d8a\u62bd\u8c61\uff0c\u8d8a\u6613\u7528\uff0c\u6982\u5ff5\u4e5f\u5c31\u8d8a\u591a machine-independent\uff0c\u901a\u7528\u6027\u66f4\u52a0\uff0c\u5f00\u53d1\u6548\u7387\u66f4\u9ad8 \u53c2\u89c1: Rationale A central form of abstraction in computing is language abstraction: new artificial languages are developed to express specific aspects of a system. Modeling languages help in planning. Computer languages can be processed with a computer. An example of this abstraction process is the generational development of programming languages from the machine language to the assembly language and the high-level language . Each stage can be used as a stepping stone for the next stage. The language abstraction continues for example in scripting languages and domain-specific programming languages . Abstraction\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u7684\u5e94\u7528 # Abstraction\u662f\u79d1\u5b66\u7684\u57fa\u7840\uff0c\u5b83\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u90fd\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002 Abstraction in computer science # Abstraction\u5728computer science\u4e2d\u6709\u7740\u6df1\u8fdc\u7684\u5f71\u54cd\uff0c\u672c\u6587\u5c06\u5f00\u59cb\u5bf9\u6b64\u4ece\u591a\u4e2a\u65b9\u9762\u8fdb\u884c\u5256\u6790\u3002 \u7ef4\u57fa\u767e\u79d1\u7684 Abstraction (computer science) \u603b\u7ed3\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684abstraction\u3002\u867d\u7136\u7ef4\u57fa\u767e\u79d1\u7684 Abstraction (computer science) \u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684Abstraction\u6709\u4e86\u4e0d\u540c\u7684\u63cf\u8ff0\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684abstraction\u672c\u8d28\u4e0a\u548c\u524d\u9762\u6240\u8ff0\u7684\u5e7f\u4e49\u7684abstraction\u662f\u76f8\u540c\u7684\uff0c\u5373\u521b\u5efaconcept\u7684\u8fc7\u7a0b\uff0c\u5728computer science\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u662f\u5982\u4f55\u6765\u63cf\u8ff0concept\u3002 Concept\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4e0d\u540c\u9886\u57df\u6709\u7740\u4e0d\u540c\u7684\u63cf\u8ff0\u65b9\u5f0f\uff0c\u6bd4\u5982\uff1a \u5728 object-oriented programming \u4e2d\uff0c\u4f7f\u7528 class \u6765\u63cf\u8ff0concept\uff0cconcept\u4e4b\u95f4\u7684relation\u5c31\u8f6c\u6362\u4e3a class \u4e4b\u95f4\u7684\u5173\u7cfb\u4e86\u3002 \u5728 Entity\u2013relationship model \uff0c\u4f7f\u7528 entity \u6765\u63cf\u8ff0concept\u3002\u4e0e\u6b64\u76f8\u5173\u7684\u6982\u5ff5\u6709\uff1a Relational model \u3001 Relational database \u3001 Relational algebra \u3002 \u8fde\u63a5\u4e0a\u8ff0\u4e24\u8005\u7684\u5c31\u662f Object-relational mapping \u3002 Instruction set architecture \u662f\u5bf9 computer \u7684\u62bd\u8c61\uff0c\u5b83\u63cf\u8ff0\u4e86\u4e00\u4e2acomputer\u7684\u529f\u80fd\uff0c\u7279\u6027\u7b49\uff0c\u5b83\u4f7f\u7528instruction\u6765\u63cf\u8ff0\u3002 \u53e6\u5916\u4e00\u4e2a\u66f4\u52a0\u5e38\u7528\u7684\u6765\u63cf\u8ff0\u62bd\u8c61\u6982\u5ff5\u7684\u662f interface (computing) \uff0c\u5373\u63a5\u53e3\u3002 Abstraction in programming language # \u53c2\u89c1 Rationale \uff0c\u5176\u4e2d\u5bf9\u6b64\u603b\u7ed3\u5730\u975e\u5e38\u597d\u3002 Abstraction in object-oriented programming # \u601d\u8003\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u65b9\u5f0f\u6765\u63cf\u8ff0\u4e0a\u8ff0kernel control path\u6982\u5ff5\u548ctask\u6982\u5ff5\uff1f \u4f7f\u7528 class \u6765\u63cf\u8ff0 concept \uff0c\u8fd9\u51e0\u4e2a concept \u4e4b\u95f4\u662f Is-a \u5173\u7cfb\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528inheritance\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a c++ \u5b9e\u73b0\u7684demo\uff1a class KernelControlPath { } class SystemCallKernelControlPath public: KernelControlPath { } class InterruptKernelControlPath public: KernelControlPath { } kernel control path\u7684\u4e00\u4e2a \u7279\u5f81 \u5c31\u662f\u5b83\u80fd\u591f\u88absuspend\u3001resume\uff0c\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u63cf\u8ff0\u5c31\u662f\uff1a void suspend(KernelControlPath& kernel_control_path) { } void resume(KernelControlPath& kernel_control_path) { } \u9762\u5411\u5bf9\u8c61\u7684 Polymorphism \uff08\u591a\u6001\u6027\uff09\u8868\u660e suspend \u548c resume \u7684\u5165\u53c2\u53ef\u4ee5\u4e3a SystemCallKernelControlPath \u3001 InterruptKernelControlPath \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd9\u5176\u5b9e\u5c31\u4f53\u73b0\u4e86\uff1a \u5f53\u4e00\u4e2a\u8868\u8ff0\u4e2d\u4f7f\u7528kernel control path\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b83\u53ef\u4ee5\u662fsystem call kernel control path\u3001\u4e5f\u53ef\u4ee5\u662finterrupt handler kernel control path class Task: pass class ProcessTask: pass class ThreadTask: pass \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5b58\u5728\u4e0e\u4e0a\u8ff0\u62bd\u8c61\u6982\u5ff5\u7c7b\u4f3c\u7684\u505a\u6cd5\uff1a \u7236\u7c7b\u662f\u5b50\u7c7b\u7684\u62bd\u8c61 Virtual function See also # Abstract type \u62bd\u8c61\u4e0e\u5b9e\u73b0 # \u4e00\u79cd\u62bd\u8c61\uff0c\u53ef\u80fd\u6709\u591a\u79cd\u5b9e\u73b0\u3002 TODO: Instruction set architecture \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6b64\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 Abstract data type \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6b64\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u53c2\u89c1 Data abstraction \u3002 Abstraction in architecture # \u53c2\u89c1 Abstraction-and-architecture Conceptual model # \u53c2\u89c1 Abstraction-and-model \u3002","title":"Abstraction"},{"location":"Post/Abstraction/#abstraction","text":"\u6ce8\u610f\uff1a\u672c\u6587\u6240\u8ba8\u8bba\u7684 Abstraction \u662f\u5e7f\u4e49\u7684\uff0c\u800c\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e Abstraction (computer science) \u3002 \u7ef4\u57fa\u767e\u79d1 Abstraction \u7ed9\u51fa\u4e86Abstraction\u7684\u5927\u91cf\u63cf\u8ff0\uff0c\u6709\u4e9b\u662f\u6bd4\u8f83\u96be\u4ee5\u7406\u89e3\uff0c\u4e0b\u9762\u662f\u6211\u8ba4\u4e3a\u5176\u4e2d\u6bd4\u8f83\u597d\u7684\u63cf\u8ff0\uff1a Abstraction in its main sense is a conceptual process where general rules and concepts are derived from the usage and classification of specific examples, literal (\"real\" or \" concrete \") signifiers, first principles , or other methods. \u8fd9\u6bb5\u8bdd\u7684\u7b80\u5355\u6765\u8bf4\u662f\uff1a\u62bd\u8c61\u662f\u521b\u5efa concepts \u548c rules \u7684\u8fc7\u7a0b\uff0c\u90a3\u4f55\u4e3aconcept\u5462\uff1f\u8fd9\u4e2a\u95ee\u9898\u662f\u6bd4\u8f83\u201c\u62bd\u8c61\u201d\u7684\uff0c\u96be\u4ee5\u8fdb\u884c\u51c6\u786e\u63cf\u8ff0\u7684\uff0c\u540e\u9762\u7684 \u521b\u9020\u62bd\u8c61\u6982\u5ff5 \u7ae0\u8282\u4f1a\u7ed3\u5408\u5177\u4f53\u6848\u4f8b\u6765\u8fdb\u884c\u8bf4\u660e\u3002 \"An abstraction\" is the outcome of this process\u2014a concept that acts as a common noun for all subordinate\uff08\u4ece\u5c5e\uff09 concepts, and connects any related concepts as a group , field , or category . \u8fd9\u6bb5\u8bdd\u7684\u610f\u601d\u548c\u4e0a\u9762\u7684\u610f\u601d\u7c7b\u4f3c\uff0c\u5728 \u521b\u9020\u62bd\u8c61\u6982\u5ff5 \u7ae0\u8282\uff0c\u4f1a\u7ed3\u5408\u5177\u4f53\u5b9e\u4f8b\u5bf9\u8fd9\u6bb5\u8bdd\u6240\u8868\u8ff0\u7684\u610f\u601d\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002 Conceptual abstractions may be formed by filtering the information content of a concept or an observable phenomenon , selecting only the aspects which are relevant for a particular subjectively valued purpose. The essence of abstractions is preserving information that is relevant in a given context, and forgetting information that is irrelevant in that context. \u2013 John V. Guttag \u62bd\u8c61\u662f\u6982\u62ec\u7684\u8fc7\u7a0b\uff0c\u62bd\u8c61\u662f\u63d0\u53d6\u516c\u5171\u7279\u5f81\u7684\u8fc7\u7a0b\uff0c\u5b83\u6240\u6982\u62ec\u7684\u3001\u6240\u63d0\u53d6\u7684\u516c\u5171\u7279\u5f81\uff0c\u53ef\u4ee5\u4f7f\u7528 concepts \u6765\u8fdb\u884c\u8868\u793a\uff0c\u5f53\u7136\u4e5f\u6709\u5176\u5b83\u7684\u8868\u793a\u65b9\u5f0f\u3002 \u4e0eabstract\u76f8\u5bf9\u7684\u662fconcrete\uff0c\u53c2\u89c1 Abstract and concrete \u3002","title":"Abstraction"},{"location":"Post/Abstraction/#_1","text":"\u901a\u8fc7\u521b\u9020\u62bd\u8c61\u7684 concept \uff08\u6982\u5ff5\uff09\u6765\u4f7f\u8868\u8ff0\u66f4\u52a0\u4fbf\u5229\u7684\u505a\u6cd5\u662f\u5728\u5404\u79cd\u5b66\u79d1\u975e\u5e38\u666e\u904d\u7684\uff0c\u5173\u4e8e\u6b64\u7684\u4f8b\u5b50\u6709\uff1a","title":"\u521b\u9020\u62bd\u8c61\u6982\u5ff5"},{"location":"Post/Abstraction/#kernel-control-path","text":"\u5728\u300a Understanding the Linux Kernel, 3rd Edition \u300b\u7684chapter 1.6.3. Reentrant Kernels\u4e2d\uff0c\u4f5c\u8005\u521b\u9020\u4e86kernel control path\u6982\u5ff5\u6765\u6982\u62eckernel\u4e2d\u7531system call\u7531\u89e6\u53d1\u7684kernel control path\uff08\u540e\u9762\u7b80\u79f0\u4e3asystem call kernel control path\uff09\u3001\u7531interrupt handler\u89e6\u53d1\u7684kernel control path\uff08\u540e\u9762\u7b80\u79f0interrupt handler kernel control path\uff09\u4ee5\u53ca\u540e\u7eed\u968f\u7740kernel\u53d1\u5c55\u53ef\u80fd\u4f1a\u65b0\u589e\u7684\u89e6\u53d1kernel control path\u3002\u663e\u7136kernel control path\u6982\u5ff5\u6982\u62ec\u4e86system call kernel control path\u3001interrupt handler kernel control path\u7684 common feature \uff08\u516c\u5171\u7279\u5f81\uff09\uff0c\u5982\u5b83\u4eec\u90fd\u80fd\u591f\u88absuspend\u3001resume\u3002 \u663e\u7136\u5f53\u4e00\u4e2a\u8868\u8ff0\u4e2d\u4f7f\u7528kernel control path\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b83\u53ef\u4ee5\u662fsystem call kernel control path\u3001\u4e5f\u53ef\u4ee5\u662finterrupt handler kernel control path\uff0c\u8fd9\u5c31\u4f7f\u6211\u4eec\u7684\u8868\u8ff0\u975e\u5e38\u5730\u4fbf\u5229\u3002\u663e\u7136\uff0csystem call kernel control path\u3001interrupt handler kernel control path\u548ckernel control path\u4e4b\u95f4\u662f Is-a \u5173\u7cfb\u3002","title":"Kernel control path"},{"location":"Post/Abstraction/#computer-multitasking","text":"\u5728 Computer multitasking \u4e2d\u521b\u9020\u4e86task\u6982\u5ff5\uff0c\u5b83\u8868\u793a\u7684\u662fcomputer\u80fd\u591f\u5e76\u53d1\u6267\u884c\u7684\uff0c\u5b83\u53ef\u4ee5\u662fprocess\u4e5f\u53ef\u4ee5\u662fthread\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u5219\u7531\u5177\u4f53\u7684\u5b9e\u73b0\u800c\u5b9a\u3002","title":"Computer multitasking"},{"location":"Post/Abstraction/#_2","text":"\u7eb5\u89c2 programming language\u7684\u53d1\u5c55\u53f2 \uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u8bed\u8a00\u8d8a\u6765\u8d8a\u9ad8\u7ea7\uff0c\u8d8a\u6765\u8d8a\u62bd\u8c61\uff0c\u8d8a\u6765\u8d8a\u6613\u7528\u3002\u6700\u5e95\u5c42\u7684\u8bed\u8a00\uff1a machine language \u6666\u6da9\u96be\u61c2\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5148\u9a71\u5728 machine language \u7684\u57fa\u7840\u4e0a\u62bd\u8c61\u51fa\u4e86 function \u6982\u5ff5\uff0c\u53c8\u62bd\u8c61\u51fa\u4e86 class \u7684\u6982\u5ff5\uff0c\u521b\u5efa\u4e86\u975e\u5e38\u591a \u9ad8\u7ea7\u7684\u8bed\u8a00 \uff0c\u6bd4\u5982C\u3002\u4e0d\u7ba1\u591a\u4e48\u9ad8\u7ea7\u7684\u8bed\u8a00\u6700\u7ec8\u90fd\u9700\u8981\u88ab\u7ffb\u8bd1\uff08compiler\u6216interpreter\uff09\u4e3a machine language \u624d\u80fd\u591f\u88ab\u673a\u5668\u6267\u884c\uff0c\u663e\u7136\u8fd9\u4e2a\u7ffb\u8bd1\u7684\u8fc7\u7a0b\u662f\u4e0e\u524d\u9762\u7684\u62bd\u8c61\u7684\u8fc7\u7a0b\u76f8\u9006\u7684\u3002 \u4e0emachine language\u76f8\u6bd4\uff0c\u6211\u4eec\u53d1\u73b0\u9ad8\u7ea7\u8bed\u8a00\u5f80\u5f80\u4f34\u968f\u7740\u975e\u5e38\u591a\u7684\u6982\u5ff5\uff0c\u800c\u4e14\u8d8a\u9ad8\u7ea7\u7684\u8bed\u8a00\u8c8c\u4f3c\u6982\u5ff5\u8d8a\u591a\uff08\u8fd9\u662f\u6211\u7684\u76f4\u89c9\uff0c\u53ef\u80fd\u5e76\u975e\u5982\u6b64\uff09\uff0c\u5f53\u7136\u4e5f\u8d8a\u5bb9\u6613\u4f7f\u7528\u3002\u4e0e\u6b64\u7c7b\u4f3c\u7684\u662f\uff0c\u5404\u79cdlibrary\u4e3a\u4e86\u7b80\u5316\u67d0\u4e2a\u9886\u57df\u7684\u95ee\u9898\uff0c \u4e5f\u521b\u9020\u4e86\u5404\u79cd\u76f4\u89c2\u6613\u61c2\u7684\u6982\u5ff5\uff0c\u4f7f\u5f97software engineer\u5728\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u65f6\uff0c\u975e\u5e38\u8f7b\u677e\u5bb9\u6613\uff0c\u56e0\u6b64\u83b7\u5f97\u4e86software engineer\u7684\u559c\u7231\u3002 \u4ece\u8fd9\u4e2a\u53d1\u5c55\u53f2\u6211\u4eec\u80fd\u591f\u770b\u5230\u62bd\u8c61\u6240\u5e26\u6765\u7684\u5de8\u5927\u4f18\u52bf\uff1a \u9690\u85cf\u4e86\u5e95\u5c42\u7684\u7ec6\u8282 \u8d8a\u62bd\u8c61\uff0c\u8d8a\u6613\u7528\uff0c\u6982\u5ff5\u4e5f\u5c31\u8d8a\u591a machine-independent\uff0c\u901a\u7528\u6027\u66f4\u52a0\uff0c\u5f00\u53d1\u6548\u7387\u66f4\u9ad8 \u53c2\u89c1: Rationale A central form of abstraction in computing is language abstraction: new artificial languages are developed to express specific aspects of a system. Modeling languages help in planning. Computer languages can be processed with a computer. An example of this abstraction process is the generational development of programming languages from the machine language to the assembly language and the high-level language . Each stage can be used as a stepping stone for the next stage. The language abstraction continues for example in scripting languages and domain-specific programming languages .","title":"\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2"},{"location":"Post/Abstraction/#abstraction_1","text":"Abstraction\u662f\u79d1\u5b66\u7684\u57fa\u7840\uff0c\u5b83\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u90fd\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002","title":"Abstraction\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u7684\u5e94\u7528"},{"location":"Post/Abstraction/#abstraction-in-computer-science","text":"Abstraction\u5728computer science\u4e2d\u6709\u7740\u6df1\u8fdc\u7684\u5f71\u54cd\uff0c\u672c\u6587\u5c06\u5f00\u59cb\u5bf9\u6b64\u4ece\u591a\u4e2a\u65b9\u9762\u8fdb\u884c\u5256\u6790\u3002 \u7ef4\u57fa\u767e\u79d1\u7684 Abstraction (computer science) \u603b\u7ed3\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684abstraction\u3002\u867d\u7136\u7ef4\u57fa\u767e\u79d1\u7684 Abstraction (computer science) \u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684Abstraction\u6709\u4e86\u4e0d\u540c\u7684\u63cf\u8ff0\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684abstraction\u672c\u8d28\u4e0a\u548c\u524d\u9762\u6240\u8ff0\u7684\u5e7f\u4e49\u7684abstraction\u662f\u76f8\u540c\u7684\uff0c\u5373\u521b\u5efaconcept\u7684\u8fc7\u7a0b\uff0c\u5728computer science\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u662f\u5982\u4f55\u6765\u63cf\u8ff0concept\u3002 Concept\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4e0d\u540c\u9886\u57df\u6709\u7740\u4e0d\u540c\u7684\u63cf\u8ff0\u65b9\u5f0f\uff0c\u6bd4\u5982\uff1a \u5728 object-oriented programming \u4e2d\uff0c\u4f7f\u7528 class \u6765\u63cf\u8ff0concept\uff0cconcept\u4e4b\u95f4\u7684relation\u5c31\u8f6c\u6362\u4e3a class \u4e4b\u95f4\u7684\u5173\u7cfb\u4e86\u3002 \u5728 Entity\u2013relationship model \uff0c\u4f7f\u7528 entity \u6765\u63cf\u8ff0concept\u3002\u4e0e\u6b64\u76f8\u5173\u7684\u6982\u5ff5\u6709\uff1a Relational model \u3001 Relational database \u3001 Relational algebra \u3002 \u8fde\u63a5\u4e0a\u8ff0\u4e24\u8005\u7684\u5c31\u662f Object-relational mapping \u3002 Instruction set architecture \u662f\u5bf9 computer \u7684\u62bd\u8c61\uff0c\u5b83\u63cf\u8ff0\u4e86\u4e00\u4e2acomputer\u7684\u529f\u80fd\uff0c\u7279\u6027\u7b49\uff0c\u5b83\u4f7f\u7528instruction\u6765\u63cf\u8ff0\u3002 \u53e6\u5916\u4e00\u4e2a\u66f4\u52a0\u5e38\u7528\u7684\u6765\u63cf\u8ff0\u62bd\u8c61\u6982\u5ff5\u7684\u662f interface (computing) \uff0c\u5373\u63a5\u53e3\u3002","title":"Abstraction in computer science"},{"location":"Post/Abstraction/#abstraction-in-programming-language","text":"\u53c2\u89c1 Rationale \uff0c\u5176\u4e2d\u5bf9\u6b64\u603b\u7ed3\u5730\u975e\u5e38\u597d\u3002","title":"Abstraction in programming language"},{"location":"Post/Abstraction/#abstraction-in-object-oriented-programming","text":"\u601d\u8003\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u65b9\u5f0f\u6765\u63cf\u8ff0\u4e0a\u8ff0kernel control path\u6982\u5ff5\u548ctask\u6982\u5ff5\uff1f \u4f7f\u7528 class \u6765\u63cf\u8ff0 concept \uff0c\u8fd9\u51e0\u4e2a concept \u4e4b\u95f4\u662f Is-a \u5173\u7cfb\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528inheritance\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a c++ \u5b9e\u73b0\u7684demo\uff1a class KernelControlPath { } class SystemCallKernelControlPath public: KernelControlPath { } class InterruptKernelControlPath public: KernelControlPath { } kernel control path\u7684\u4e00\u4e2a \u7279\u5f81 \u5c31\u662f\u5b83\u80fd\u591f\u88absuspend\u3001resume\uff0c\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u63cf\u8ff0\u5c31\u662f\uff1a void suspend(KernelControlPath& kernel_control_path) { } void resume(KernelControlPath& kernel_control_path) { } \u9762\u5411\u5bf9\u8c61\u7684 Polymorphism \uff08\u591a\u6001\u6027\uff09\u8868\u660e suspend \u548c resume \u7684\u5165\u53c2\u53ef\u4ee5\u4e3a SystemCallKernelControlPath \u3001 InterruptKernelControlPath \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd9\u5176\u5b9e\u5c31\u4f53\u73b0\u4e86\uff1a \u5f53\u4e00\u4e2a\u8868\u8ff0\u4e2d\u4f7f\u7528kernel control path\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b83\u53ef\u4ee5\u662fsystem call kernel control path\u3001\u4e5f\u53ef\u4ee5\u662finterrupt handler kernel control path class Task: pass class ProcessTask: pass class ThreadTask: pass \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5b58\u5728\u4e0e\u4e0a\u8ff0\u62bd\u8c61\u6982\u5ff5\u7c7b\u4f3c\u7684\u505a\u6cd5\uff1a \u7236\u7c7b\u662f\u5b50\u7c7b\u7684\u62bd\u8c61 Virtual function","title":"Abstraction in object-oriented programming"},{"location":"Post/Abstraction/#see-also","text":"Abstract type","title":"See also"},{"location":"Post/Abstraction/#_3","text":"\u4e00\u79cd\u62bd\u8c61\uff0c\u53ef\u80fd\u6709\u591a\u79cd\u5b9e\u73b0\u3002 TODO: Instruction set architecture \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6b64\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 Abstract data type \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6b64\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u53c2\u89c1 Data abstraction \u3002","title":"\u62bd\u8c61\u4e0e\u5b9e\u73b0"},{"location":"Post/Abstraction/#abstraction-in-architecture","text":"\u53c2\u89c1 Abstraction-and-architecture","title":"Abstraction in architecture"},{"location":"Post/Abstraction/#conceptual-model","text":"\u53c2\u89c1 Abstraction-and-model \u3002","title":"Conceptual model"},{"location":"Post/Architecture/","text":"Architecture # Library-base architecture # \u5728\u9605\u8bfb Clang - Features and Goals \u65f6\uff0c\u5176Library Based Architecture\u4ee4\u6211\u5370\u8c61\u6df1\u523b\uff0c\u636e\u6211\u6240\u77e5\u7684\uff0c\u8fd8\u6709\u91c7\u7528\u8fd9\u79cd\u67b6\u6784\u7684\u6709 nginx nginx \u63d0\u4f9b\u4e86\u975e\u5e38\u591a\u7684Modules\uff0c\u8fd9\u4e9bModules\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684library\u3002 redis Redis Modules \uff0c\u8fd9\u4e9bModules\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684library\u3002 Tuxedo (software) cpython \u4e5f\u53ef\u4ee5\u770b\u505a\u662flibrary-base architecture\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8Extending and Embedding the Python Interpreter \u00b6 \u53c2\u89c1\uff1a python bindings, how does it work? dlopen operating system kernel \u5927\u591a\u6570\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u652f\u6301 loadable kernel module \u7279\u6027 Middleware # https://en.wikipedia.org/wiki/Middleware Message-oriented middleware # https://en.wikipedia.org/wiki/Message-oriented_middleware Multitier architecture VS Monolithic application # TODO: \u5c06\u5728 The Structure of a Compiler \u4e2d\u6240\u603b\u7ed3\u7684\u5173\u4e8ecompiler\u7684\u67b6\u6784\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u8fd9\u91cc\u3002 Monolithic VS micro # Monolithic Architecture and Microservices Concepts- Cloud Computing Microservices Monolithic kernel vs Microkernel","title":"Architecture"},{"location":"Post/Architecture/#architecture","text":"","title":"Architecture"},{"location":"Post/Architecture/#library-base-architecture","text":"\u5728\u9605\u8bfb Clang - Features and Goals \u65f6\uff0c\u5176Library Based Architecture\u4ee4\u6211\u5370\u8c61\u6df1\u523b\uff0c\u636e\u6211\u6240\u77e5\u7684\uff0c\u8fd8\u6709\u91c7\u7528\u8fd9\u79cd\u67b6\u6784\u7684\u6709 nginx nginx \u63d0\u4f9b\u4e86\u975e\u5e38\u591a\u7684Modules\uff0c\u8fd9\u4e9bModules\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684library\u3002 redis Redis Modules \uff0c\u8fd9\u4e9bModules\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684library\u3002 Tuxedo (software) cpython \u4e5f\u53ef\u4ee5\u770b\u505a\u662flibrary-base architecture\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8Extending and Embedding the Python Interpreter \u00b6 \u53c2\u89c1\uff1a python bindings, how does it work? dlopen operating system kernel \u5927\u591a\u6570\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u652f\u6301 loadable kernel module \u7279\u6027","title":"Library-base architecture"},{"location":"Post/Architecture/#middleware","text":"https://en.wikipedia.org/wiki/Middleware","title":"Middleware"},{"location":"Post/Architecture/#message-oriented-middleware","text":"https://en.wikipedia.org/wiki/Message-oriented_middleware","title":"Message-oriented middleware"},{"location":"Post/Architecture/#multitier-architecture-vs-monolithic-application","text":"TODO: \u5c06\u5728 The Structure of a Compiler \u4e2d\u6240\u603b\u7ed3\u7684\u5173\u4e8ecompiler\u7684\u67b6\u6784\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u8fd9\u91cc\u3002","title":"Multitier architecture VS Monolithic application"},{"location":"Post/Architecture/#monolithic-vs-micro","text":"Monolithic Architecture and Microservices Concepts- Cloud Computing Microservices Monolithic kernel vs Microkernel","title":"Monolithic VS micro"},{"location":"Post/Closure/","text":"Closure # \u8fd9\u4e2a\u8bcd\u5728\u9605\u8bfb\u8fc7\u7a0b\u4e2d\u7ecf\u5e38\u78b0\u5230\uff0c\u672c\u6587\u5bf9\u5b83\u8fdb\u884c\u603b\u7ed3\u3002 \u201cclosure\"\u662f\u201dclose\u201c\u7684\u540d\u8bcd\u5f62\u5f0f\u3002 Closure (mathematics) # A set is closed under an operation if performance of that operation on members of the set always produces a member of that set. Examples # Recursive definition Closure (computer programming) # Kleene star #","title":"Closure"},{"location":"Post/Closure/#closure","text":"\u8fd9\u4e2a\u8bcd\u5728\u9605\u8bfb\u8fc7\u7a0b\u4e2d\u7ecf\u5e38\u78b0\u5230\uff0c\u672c\u6587\u5bf9\u5b83\u8fdb\u884c\u603b\u7ed3\u3002 \u201cclosure\"\u662f\u201dclose\u201c\u7684\u540d\u8bcd\u5f62\u5f0f\u3002","title":"Closure"},{"location":"Post/Closure/#closure-mathematics","text":"A set is closed under an operation if performance of that operation on members of the set always produces a member of that set.","title":"Closure (mathematics)"},{"location":"Post/Closure/#examples","text":"Recursive definition","title":"Examples"},{"location":"Post/Closure/#closure-computer-programming","text":"","title":"Closure (computer programming)"},{"location":"Post/Closure/#kleene-star","text":"","title":"Kleene star"},{"location":"Post/Glossary/","text":"Glossary # \u672c\u6587\u5bf9\u5728\u5404\u4e2a\u5de5\u7a0b\u4e2d\u51fa\u73b0\u7684\u4e00\u4e9b\u672f\u8bed\u8fdb\u884c\u8bf4\u660e\u3002 \u9f99\u4e66 # \u6307\u7684\u662f Compilers Principles, Techniques and Tools Second Edition(aka dragon book ) \uff0c\u53c2\u89c1\u5de5\u7a0b compiler principle \u3002 \u5206\u5c42\u601d\u60f3 # \u53c2\u89c1\u6587\u7ae0 \u5206\u5c42 \u3002","title":"Glossary"},{"location":"Post/Glossary/#glossary","text":"\u672c\u6587\u5bf9\u5728\u5404\u4e2a\u5de5\u7a0b\u4e2d\u51fa\u73b0\u7684\u4e00\u4e9b\u672f\u8bed\u8fdb\u884c\u8bf4\u660e\u3002","title":"Glossary"},{"location":"Post/Glossary/#_1","text":"\u6307\u7684\u662f Compilers Principles, Techniques and Tools Second Edition(aka dragon book ) \uff0c\u53c2\u89c1\u5de5\u7a0b compiler principle \u3002","title":"\u9f99\u4e66"},{"location":"Post/Glossary/#_2","text":"\u53c2\u89c1\u6587\u7ae0 \u5206\u5c42 \u3002","title":"\u5206\u5c42\u601d\u60f3"},{"location":"Post/Induction-and-deduction/","text":"Formal proof # \u5f62\u5f0f\u8bc1\u660e derivation Rule of inference # \u63a8\u7406\u89c4\u5219 deductive \u6f14\u7ece induction \u5f52\u7eb3\uff0c\u4e0e\u9012\u5f52\u76f8\u5173\u3002\u53c2\u89c1 Recursive definition \u3002","title":"[Formal proof](https://en.wikipedia.org/wiki/Formal_proof)"},{"location":"Post/Induction-and-deduction/#formal-proof","text":"\u5f62\u5f0f\u8bc1\u660e derivation","title":"Formal proof"},{"location":"Post/Induction-and-deduction/#rule-of-inference","text":"\u63a8\u7406\u89c4\u5219 deductive \u6f14\u7ece induction \u5f52\u7eb3\uff0c\u4e0e\u9012\u5f52\u76f8\u5173\u3002\u53c2\u89c1 Recursive definition \u3002","title":"Rule of inference"},{"location":"Post/Lazy-and-eager/","text":"","title":"Lazy and eager"},{"location":"Post/Meta/","text":"Meta # metamathematics","title":"Meta"},{"location":"Post/Meta/#meta","text":"metamathematics","title":"Meta"},{"location":"Post/Model/","text":"Model # \u603b\u7ed3\u4e00\u4e9b\u5e38\u89c1\u7684model\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5c06model\u770b\u505a\u662farchitecture\u3002 task model # \u4e00\u4e9b\u5173\u4e8etask model\u7684\u5185\u5bb9\uff1a Computer multitasking Task parallelism Task (computing) \u4f7f\u7528task model\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651task\u662f\u4ec0\u4e48\u3001task\u7684 \u6267\u884c\u8005 \u662f\u4ec0\u4e48\u3001task\u7684 \u8c03\u5ea6\u8005 \u662f\u4ec0\u4e48\uff1a \u6bd4\u5982 Computer multitasking \u4e2d\uff0ctask\u662fprocess\u6216thread\u7684\u6267\u884c\uff0c\u5b83\u7684\u6267\u884c\u8005\u662fCPU\uff0c\u5b83\u7684\u8c03\u5ea6\u8005\u662foperating system kernel\u4e2d\u7684scheduler\u3002 \u6bd4\u5982 celery \u4e2d\uff0ctask\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7531\u7528\u6237\u5b9a\u4e49\u7684task function\uff0c\u6267\u884c\u8005\u5176\u5b9e\u5c31\u662fprocess\u4e86\uff0c\u8c03\u5ea6\u8005\u5176\u5b9e\u5c31\u662f\u5b83\u7684 task queue \u4e86\u3002 \u5173\u4e8e\u8c03\u5ea6\u8005\uff0c\u53c2\u89c1\uff1a Scheduling (computing) \u4e0etask model\u76f8\u5173\u7684\u53e6\u5916\u4e00\u4e2a\u6982\u5ff5\u5c31\u662f\uff1atask manager\uff0c\u6bd4\u5982 Task Manager (Windows) \u3002 event-driven model # \u4e00\u4e9b\u5173\u4e4eevent-driven model\u7684\u5185\u5bb9\uff1a Event (computing) Event-driven programming Event-driven architecture Event handler Interrupt Interrupt-driven Interrupt handler \u4f7f\u7528event-driven model\u548c\u4e0a\u8ff0\u7684task model\u53ef\u4ee5\u63cf\u8ff0\u592a\u591a\u592a\u591a\u7684software # \u6bd4\u5982\uff1aOS kernel\u5bf9hardware\u7684\u7ba1\u7406\u53ef\u4ee5\u4f7f\u7528event-driven model\u6765\u8fdb\u884c\u63cf\u8ff0\uff1bOS kernl\u5b9e\u73b0multitasking\u53ef\u4ee5\u4f7f\u7528task model\u6765\u8fdb\u884c\u63cf\u8ff0\u3002 \u603b\u7ed3 # \u4e0a\u8ff0task model\u548cevent-driven model\u90fd\u662f Conceptual model \u3002 A conceptual model is a representation of a system, made of the composition of concepts which are used to help people know , understand , or simulate a subject the model represents. Conceptual model \u662f\u6211\u4eec\u80fd\u591f\u66f4\u52a0\u8f7b\u677e\u5730 understand \u3002","title":"Model"},{"location":"Post/Model/#model","text":"\u603b\u7ed3\u4e00\u4e9b\u5e38\u89c1\u7684model\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5c06model\u770b\u505a\u662farchitecture\u3002","title":"Model"},{"location":"Post/Model/#task-model","text":"\u4e00\u4e9b\u5173\u4e8etask model\u7684\u5185\u5bb9\uff1a Computer multitasking Task parallelism Task (computing) \u4f7f\u7528task model\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651task\u662f\u4ec0\u4e48\u3001task\u7684 \u6267\u884c\u8005 \u662f\u4ec0\u4e48\u3001task\u7684 \u8c03\u5ea6\u8005 \u662f\u4ec0\u4e48\uff1a \u6bd4\u5982 Computer multitasking \u4e2d\uff0ctask\u662fprocess\u6216thread\u7684\u6267\u884c\uff0c\u5b83\u7684\u6267\u884c\u8005\u662fCPU\uff0c\u5b83\u7684\u8c03\u5ea6\u8005\u662foperating system kernel\u4e2d\u7684scheduler\u3002 \u6bd4\u5982 celery \u4e2d\uff0ctask\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7531\u7528\u6237\u5b9a\u4e49\u7684task function\uff0c\u6267\u884c\u8005\u5176\u5b9e\u5c31\u662fprocess\u4e86\uff0c\u8c03\u5ea6\u8005\u5176\u5b9e\u5c31\u662f\u5b83\u7684 task queue \u4e86\u3002 \u5173\u4e8e\u8c03\u5ea6\u8005\uff0c\u53c2\u89c1\uff1a Scheduling (computing) \u4e0etask model\u76f8\u5173\u7684\u53e6\u5916\u4e00\u4e2a\u6982\u5ff5\u5c31\u662f\uff1atask manager\uff0c\u6bd4\u5982 Task Manager (Windows) \u3002","title":"task model"},{"location":"Post/Model/#event-driven-model","text":"\u4e00\u4e9b\u5173\u4e4eevent-driven model\u7684\u5185\u5bb9\uff1a Event (computing) Event-driven programming Event-driven architecture Event handler Interrupt Interrupt-driven Interrupt handler","title":"event-driven model"},{"location":"Post/Model/#event-driven-modeltask-modelsoftware","text":"\u6bd4\u5982\uff1aOS kernel\u5bf9hardware\u7684\u7ba1\u7406\u53ef\u4ee5\u4f7f\u7528event-driven model\u6765\u8fdb\u884c\u63cf\u8ff0\uff1bOS kernl\u5b9e\u73b0multitasking\u53ef\u4ee5\u4f7f\u7528task model\u6765\u8fdb\u884c\u63cf\u8ff0\u3002","title":"\u4f7f\u7528event-driven model\u548c\u4e0a\u8ff0\u7684task model\u53ef\u4ee5\u63cf\u8ff0\u592a\u591a\u592a\u591a\u7684software"},{"location":"Post/Model/#_1","text":"\u4e0a\u8ff0task model\u548cevent-driven model\u90fd\u662f Conceptual model \u3002 A conceptual model is a representation of a system, made of the composition of concepts which are used to help people know , understand , or simulate a subject the model represents. Conceptual model \u662f\u6211\u4eec\u80fd\u591f\u66f4\u52a0\u8f7b\u677e\u5730 understand \u3002","title":"\u603b\u7ed3"},{"location":"Post/Philosophy-level/","text":"\u5206\u5c42\u601d\u60f3 # \u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684 layers of abstraction \u601d\u60f3\u7684\u53ef\u8c13\u7531\u6765\u5df2\u4e45\u4e14\u5f71\u54cd\u6df1\u8fdc\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u65b9\u65b9\u9762\u9762\u6211\u4eec\u90fd\u80fd\u591f\u770b\u5230\u5b83\u7684\u8eab\u5f71\u548c\u5f71\u54cd\uff0c\u540e\u9762\u4e3a\u4e86\u63cf\u8ff0\u4fbf\u5229\uff0c\u5c06 layers of abstraction \u601d\u60f3\u7b80\u79f0\u4e3a \u5206\u5c42\u601d\u60f3 \u3002\u6700\u80fd\u591f\u4f53\u73b0 \u5206\u5c42\u601d\u60f3 \u7684\u4e00\u4e2a\u8bcd\u662f\uff1ahierarchy\uff08\u5c42\u7ea7\uff09\uff0c\u7ef4\u57fa\u767e\u79d1\u7684 hierarchy \u5bf9hierarchy\u7684\u603b\u7ed3\u662f\u975e\u5e38\u8be6\u7ec6\u7684\uff0c\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0chierarchy\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff1a Hierarchy is an important concept in a wide variety of fields, such as philosophy , mathematics , computer science , organizational theory , systems theory , and the social sciences (especially political philosophy ). \u5176\u5b9e\u4ece\u8fd9\u4e0a\u8bc9\u8bba\u65ad\u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u5012\u63a8\u51fa\uff1a\u5206\u5c42\u601d\u60f3\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u5176\u5b9e\u5982\u679c\u5f80\u66f4\u6df1\u5c42\u6b21\u53bb\u601d\u8003\u7684\u8bdd\uff0c\u5206\u5c42\u601d\u60f3\u5176\u5b9e\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u601d\u7ef4\uff0c\u5173\u4e8e\u8fd9\u4e2a\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u9605\u8bfb\u3002 \u4e0b\u9762\u662f\u6211\u6240\u603b\u7ed3\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\u4e2d\u5206\u5c42\u7684\u5e94\u7528\uff1a architecture # \u4f5c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u5e38\u5e38\u542c\u5230architecture\uff08\u67b6\u6784\uff09\u8fd9\u4e2a\u8bcd\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u9ad8\u7aef\u804c\u4f4d\u53eb\u505aarchitect\uff08\u67b6\u6784\u5e08\uff09\u3002\u8f6f\u4ef6\u6216\u7cfb\u7edf\u7684\u67b6\u6784\u4e3a\u6211\u4eec\u63cf\u8ff0\u7684\u7cfb\u7edf\u7684\u7ed3\u6784\u3001\u7ec4\u6210\u90e8\u5206\u3001\u5404\u90e8\u5206\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5206\u5c42\u601d\u60f3\u5bf9architecture\u5f71\u54cd\u4f53\u73b0\u5728\u5404\u79cd\u5404\u6837\u7684 \u5c42\u6b21\u5316\u7ed3\u6784 \uff0c\u6bd4\u5982 architecture of computing system # reference architecture of compiler # reference \u4e2d\u95f4\u8868\u793a # \u7f16\u8bd1\u5668\u5206\u4e3a\u524d\u6bb5\u548c\u540e\u7aef\uff0c\u4e2d\u95f4\u8868\u793a\u7406\u89e3\u524d\u6bb5\u4e0e\u540e\u7aef\u3002\u4e5f\u53ef\u4ee5\u8bf4\u4e2d\u95f4\u8868\u793a\u662f\u4e24\u8005\u4e4b\u95f4\u7684\u63a5\u53e3\u3002 Communication protocol # \u5404\u79cd\u5404\u6837\u7684\u901a\u4fe1\u534f\u8bae\u53ef\u4ee5\u8bf4\u662f\u6700\u6700\u80fd\u591f\u4f53\u73b0\u5206\u5c42\u601d\u60f3\u7684\u4e86\uff0c\u5728 Communication protocol \u7684 Protocol design \u7ae0\u8282\u4e2d\u5c31\u603b\u7ed3\u4e86\u534f\u8bae\u6d89\u53ca\u7684\u601d\u60f3\uff1a Layering \u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53c2\u52a0\uff1a Hierarchical internetworking model \u3002 \u4e0b\u9762\u5217\u4e3e\u4e86\u51e0\u4e2a\u5e38\u89c1\u534f\u8bae\uff0c\u5b83\u4eec\u90fd\u80fd\u975e\u5e38\u597d\u5730\u4f53\u73b0\u4e86\u5206\u5c42\u601d\u60f3\uff1a OSI model # OSI model \u53ef\u4ee5\u8bf4\u662f\u5206\u5c42\u601d\u60f3\u7684\u6700\u4f73\u4f53\u73b0\uff0c\u4e0b\u9762\u662f\u6458\u81ea OSI model \uff1a The Open Systems Interconnection model ( OSI model ) is a conceptual model that characterizes and standardizes the communication functions of a telecommunication or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard communication protocols . The model partitions a communication system into abstraction layers . The original version of the model had seven layers. A layer serves the layer above it and is served by the layer below it. \u4e0a\u9762\u8fd9\u6bb5\u8bdd\u5176\u5b9e\u63cf\u8ff0\u4e86 \u5206\u5c42 \u6240\u5e26\u6765\u7684\u597d\u5904\uff1ainteroperability \uff0c\u5404\u5c42\u4e4b\u95f4\u4e92\u76f8\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ed3\u6784\u548c\u6280\u672f\uff09\uff0c\u901a\u8fc7\u7ea6\u5b9a\u597d\u7684 communication protocols \u8fdb\u884c\u4ea4\u4e92\u3002 OSI model by layer layer 7 Application layer 6 Presentation layer 5 Session layer 4 Transport layer 3 Network layer 2 Data link layer 1 Physical layer Internet protocol suite # Database abstraction layer # \u8fd9\u6bb5\u63cf\u8ff0\u975e\u5e38\u597d\uff1a A database abstraction layer ( DBAL or DAL ) is an application programming interface which unifies the communication between a computer application and databases such as SQL Server , DB2 , MySQL , PostgreSQL , Oracle or SQLite . \u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003 # \u5c42\u6b21\u601d\u60f3 \u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u91cd\u8981\u601d\u60f3\uff0c\u5b83\u6f5c\u79fb\u9ed8\u5316\u5730\u5f71\u54cd\u8fd9\u8ba1\u7b97\u673a\u79d1\u5b66\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u4ee5 \u5c42\u6b21\u601d\u60f3 \u6765\u601d\u8003\uff0c\u6765\u5206\u6790\u5404\u79cd\u7cfb\u7edf\uff0c\u5219\u95ee\u9898\u4f1a\u53d8\u5f97\u6e05\u6670\u3002 \u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u501f\u7528\u6982\u5ff5 # \u5f53\u6211\u4eec\u7ad9\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e0d\u540c\u5c42\u6b21\u6765\u601d\u8003\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e0d\u540c\u5c42\u6b21\u4e4b\u95f4\u4f1a\u5b58\u5728\u7740\u5927\u91cf\u7684\u76f8\u4e92\u6982\u5ff5\u501f\u7528\u3002\u6bd4\u5982\uff1a example one # \u4e0d\u540c\u5c42\u6b21\u63cf\u8ff0\u672c\u8d28\u4e0a\u975e\u5e38\u7c7b\u4f3c\u7684\u4e8b\u52a1\u6709\u7740\u4e0d\u540c\u7684\u8bf4\u6cd5\uff0c\u6bd4\u5982\u5728\u300a How-OS-run-01-OS-kernel-is-event-driven \u300b\u4e2d\u910b\u603b\u7ed3\u7684\uff1a \u6211\u4eec\u60ca\u559c\u7684\u53d1\u73b0\u7ad9\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4e0d\u540c\u7684\u5c42\u6b21\u6765\u63cf\u8ff0\u672c\u8d28\u4e0a\u975e\u5e38\u7c7b\u4f3c\u7684\u4e8b\u52a1\u6709\u7740\u4e0d\u540c\u7684\u8bf4\u6cd5\uff0c\u4e0b\u9762\u5bf9\u6b64\u8fdb\u884c\u4e86\u5bf9\u6bd4\uff1a Hardware Software Interrupt-driven Event-driven architecture / Event-driven programming Interrupt Event (computing) Interrupt handler / Interrupt service routine Event handler / Callback function \u5404\u79cdinterrupt\u5c31\u662f\u6240\u8c13\u7684event\u3002 example two # \u6b63\u5728\u4e0d\u540c\u7684\u5c42\u6b21\u6765\u770b\u5f85\u8ba1\u7b97\u673a\u79d1\u5b66=\u300b\u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u501f\u7528\u76f8\u540c\u6982\u5ff5-\u300b\u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ec6\u8282\uff09\uff0c\u901a\u8fc7\u63a5\u53e3\u6765\u8fdb\u884c\u4ea4\u4e92 \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u8bed\u8a00 # \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\uff1a\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\u3001\u4e2d\u7ea7\u7f16\u7a0b\u8bed\u8a00\u3001\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00 \u4e0d\u540c\u5c42\u6b21\u7684\u8bed\u8a00\u4e4b\u95f4\u7684\u8f6c\u6362 \u603b\u7ed3 # \u5206\u5c42\uff0c\u62bd\u8c61\uff0c\u63a5\u53e3\uff0c\u8fd9\u4e9b\u662f\u4e09\u4e2a\u540c\u4e49\u8bcd\u3002\u5b83\u4eec\u662f\u8d2f\u7a7f\u4e86computer science\u548csoftware engineering\u7684\u601d\u60f3 \u62bd\u8c61\u5c42 # Abstraction layer \u5206\u5c42\u5e26\u6765\u7684\u4ef7\u503c # Separation of concerns # Abstraction (computer science) # Layer (object-oriented design) # Portability # \u5982 Diversity of operating systems and portability \u62bd\u8c61\u5c42\u5e26\u6765\u79fb\u690d\u6027 \u5206\u5c42\u5e26\u6765\u5b89\u5168 # \u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\uff1a kernel space . user space . This separation prevents user data and kernel data from interfering with each other and causing instability and slowness, as well as preventing malfunctioning application programs from crashing the entire operating system. \u5206\u5c42\u5e26\u6765\u9694\u79bb\uff0c\u8fdb\u800c\u5e26\u6765\u5b89\u5168 \u5206\u5c42\u5e26\u6765 modularity # \u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0 \u5206\u5c42\u4e0e\u6808\u3001pipeline # \u4e00\u822c\uff0c\u4f1a\u5c06\u6309\u7167\u5206\u5c42\u8bbe\u8ba1\u7684\u7cfb\u7edf\u79f0\u4e3a\u6808\uff0c\u6bd4\u5982\u534f\u8bae\u6808\u3002\u6709\u65f6\u5019\u4e5f\u4f1a\u79f0\u4e3apipeline Solution stack # virtual # virtual\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5e38\u5e38\u4f1a\u51fa\u73b0\u7684\u4e00\u4e2a\u8bcd\uff0c\u6bd4\u5982\uff1a Virtual memory Virtual method \u7ecf\u8fc7\u672c\u6587\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5feb\u5730\u77e5\u9053\uff1avirtual\u4e5f\u662f\u4e00\u79cd\u62bd\u8c61\uff0c\u4e00\u79cd\u5206\u5c42\uff0c\u8fd9\u79cd\u5206\u5c42\u6240\u5e26\u6765\u7684\u4ef7\u503c\u5c31\u662f\u89e3\u8026\u3002\u4e0b\u9762\u4ee5virtual address\u6765\u8fdb\u884c\u8bf4\u660e\uff1a process\u5728\u8fd0\u884c\u7684\u65f6\u5019\u4f7f\u7528virtual memory address\uff0c\u7531OS\u6839\u636epage table\u5c06virtual address\u7ffb\u8bd1\u4e3aphysical address\uff1b\u4e0eprocess\u76f4\u63a5\u4f7f\u7528physical address\u76f8\u6bd4\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u591a\u6dfb\u52a0\u4e86\u4e00\u5c42\uff1a\u8f6c\u6362\u5c42\u3002\u8fd9\u79cd\u8bbe\u8ba1\u5e26\u6765\u7684\u4ef7\u503c\u662f\uff1a\u5b83\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u5177\u4f53\u6765\u8bb2\u5c31\u662f\u6309\u7167\u8fd9\u79cd\u8bbe\u8ba1\uff0cpage\u65e2\u53ef\u4ee5\u4f4d\u4e8eRAM\uff0c\u4e5f\u53ef\u4ee5\u4f4d\u4e8edisk\uff0c\u800c\u5982\u679c\u76f4\u63a5\u4f7f\u7528physical address\u7684\u8bdd\uff0c\u5219process\u7684page\u53ea\u80fd\u591f\u4f4d\u4e8eRAM\u4e2d\u3002\u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\uff0cvirtual address\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5728 Paged virtual memory \u4e2d\uff0c\u7531 Page tables \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u3002 \u5728 Virtual function \u4e2d\uff0c\u7531 Dispatch table \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u3002 \u8fd9\u79cd\u4e00\u5bf9\u591a\u662f\u9700\u8981\u4e00\u4e2atable\u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u7684\u3002","title":"\u5206\u5c42\u601d\u60f3"},{"location":"Post/Philosophy-level/#_1","text":"\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684 layers of abstraction \u601d\u60f3\u7684\u53ef\u8c13\u7531\u6765\u5df2\u4e45\u4e14\u5f71\u54cd\u6df1\u8fdc\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u65b9\u65b9\u9762\u9762\u6211\u4eec\u90fd\u80fd\u591f\u770b\u5230\u5b83\u7684\u8eab\u5f71\u548c\u5f71\u54cd\uff0c\u540e\u9762\u4e3a\u4e86\u63cf\u8ff0\u4fbf\u5229\uff0c\u5c06 layers of abstraction \u601d\u60f3\u7b80\u79f0\u4e3a \u5206\u5c42\u601d\u60f3 \u3002\u6700\u80fd\u591f\u4f53\u73b0 \u5206\u5c42\u601d\u60f3 \u7684\u4e00\u4e2a\u8bcd\u662f\uff1ahierarchy\uff08\u5c42\u7ea7\uff09\uff0c\u7ef4\u57fa\u767e\u79d1\u7684 hierarchy \u5bf9hierarchy\u7684\u603b\u7ed3\u662f\u975e\u5e38\u8be6\u7ec6\u7684\uff0c\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0chierarchy\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff1a Hierarchy is an important concept in a wide variety of fields, such as philosophy , mathematics , computer science , organizational theory , systems theory , and the social sciences (especially political philosophy ). \u5176\u5b9e\u4ece\u8fd9\u4e0a\u8bc9\u8bba\u65ad\u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u5012\u63a8\u51fa\uff1a\u5206\u5c42\u601d\u60f3\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u5176\u5b9e\u5982\u679c\u5f80\u66f4\u6df1\u5c42\u6b21\u53bb\u601d\u8003\u7684\u8bdd\uff0c\u5206\u5c42\u601d\u60f3\u5176\u5b9e\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u601d\u7ef4\uff0c\u5173\u4e8e\u8fd9\u4e2a\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u9605\u8bfb\u3002 \u4e0b\u9762\u662f\u6211\u6240\u603b\u7ed3\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\u4e2d\u5206\u5c42\u7684\u5e94\u7528\uff1a","title":"\u5206\u5c42\u601d\u60f3"},{"location":"Post/Philosophy-level/#architecture","text":"\u4f5c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u5e38\u5e38\u542c\u5230architecture\uff08\u67b6\u6784\uff09\u8fd9\u4e2a\u8bcd\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u9ad8\u7aef\u804c\u4f4d\u53eb\u505aarchitect\uff08\u67b6\u6784\u5e08\uff09\u3002\u8f6f\u4ef6\u6216\u7cfb\u7edf\u7684\u67b6\u6784\u4e3a\u6211\u4eec\u63cf\u8ff0\u7684\u7cfb\u7edf\u7684\u7ed3\u6784\u3001\u7ec4\u6210\u90e8\u5206\u3001\u5404\u90e8\u5206\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5206\u5c42\u601d\u60f3\u5bf9architecture\u5f71\u54cd\u4f53\u73b0\u5728\u5404\u79cd\u5404\u6837\u7684 \u5c42\u6b21\u5316\u7ed3\u6784 \uff0c\u6bd4\u5982","title":"architecture"},{"location":"Post/Philosophy-level/#architecture-of-computing-system","text":"reference","title":"architecture of computing system"},{"location":"Post/Philosophy-level/#architecture-of-compiler","text":"reference","title":"architecture of compiler"},{"location":"Post/Philosophy-level/#_2","text":"\u7f16\u8bd1\u5668\u5206\u4e3a\u524d\u6bb5\u548c\u540e\u7aef\uff0c\u4e2d\u95f4\u8868\u793a\u7406\u89e3\u524d\u6bb5\u4e0e\u540e\u7aef\u3002\u4e5f\u53ef\u4ee5\u8bf4\u4e2d\u95f4\u8868\u793a\u662f\u4e24\u8005\u4e4b\u95f4\u7684\u63a5\u53e3\u3002","title":"\u4e2d\u95f4\u8868\u793a"},{"location":"Post/Philosophy-level/#communication-protocol","text":"\u5404\u79cd\u5404\u6837\u7684\u901a\u4fe1\u534f\u8bae\u53ef\u4ee5\u8bf4\u662f\u6700\u6700\u80fd\u591f\u4f53\u73b0\u5206\u5c42\u601d\u60f3\u7684\u4e86\uff0c\u5728 Communication protocol \u7684 Protocol design \u7ae0\u8282\u4e2d\u5c31\u603b\u7ed3\u4e86\u534f\u8bae\u6d89\u53ca\u7684\u601d\u60f3\uff1a Layering \u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53c2\u52a0\uff1a Hierarchical internetworking model \u3002 \u4e0b\u9762\u5217\u4e3e\u4e86\u51e0\u4e2a\u5e38\u89c1\u534f\u8bae\uff0c\u5b83\u4eec\u90fd\u80fd\u975e\u5e38\u597d\u5730\u4f53\u73b0\u4e86\u5206\u5c42\u601d\u60f3\uff1a","title":"Communication protocol"},{"location":"Post/Philosophy-level/#osi-model","text":"OSI model \u53ef\u4ee5\u8bf4\u662f\u5206\u5c42\u601d\u60f3\u7684\u6700\u4f73\u4f53\u73b0\uff0c\u4e0b\u9762\u662f\u6458\u81ea OSI model \uff1a The Open Systems Interconnection model ( OSI model ) is a conceptual model that characterizes and standardizes the communication functions of a telecommunication or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard communication protocols . The model partitions a communication system into abstraction layers . The original version of the model had seven layers. A layer serves the layer above it and is served by the layer below it. \u4e0a\u9762\u8fd9\u6bb5\u8bdd\u5176\u5b9e\u63cf\u8ff0\u4e86 \u5206\u5c42 \u6240\u5e26\u6765\u7684\u597d\u5904\uff1ainteroperability \uff0c\u5404\u5c42\u4e4b\u95f4\u4e92\u76f8\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ed3\u6784\u548c\u6280\u672f\uff09\uff0c\u901a\u8fc7\u7ea6\u5b9a\u597d\u7684 communication protocols \u8fdb\u884c\u4ea4\u4e92\u3002 OSI model by layer layer 7 Application layer 6 Presentation layer 5 Session layer 4 Transport layer 3 Network layer 2 Data link layer 1 Physical layer","title":"OSI model"},{"location":"Post/Philosophy-level/#internet-protocol-suite","text":"","title":"Internet protocol suite"},{"location":"Post/Philosophy-level/#database-abstraction-layer","text":"\u8fd9\u6bb5\u63cf\u8ff0\u975e\u5e38\u597d\uff1a A database abstraction layer ( DBAL or DAL ) is an application programming interface which unifies the communication between a computer application and databases such as SQL Server , DB2 , MySQL , PostgreSQL , Oracle or SQLite .","title":"Database abstraction layer"},{"location":"Post/Philosophy-level/#_3","text":"\u5c42\u6b21\u601d\u60f3 \u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u91cd\u8981\u601d\u60f3\uff0c\u5b83\u6f5c\u79fb\u9ed8\u5316\u5730\u5f71\u54cd\u8fd9\u8ba1\u7b97\u673a\u79d1\u5b66\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u4ee5 \u5c42\u6b21\u601d\u60f3 \u6765\u601d\u8003\uff0c\u6765\u5206\u6790\u5404\u79cd\u7cfb\u7edf\uff0c\u5219\u95ee\u9898\u4f1a\u53d8\u5f97\u6e05\u6670\u3002","title":"\u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003"},{"location":"Post/Philosophy-level/#_4","text":"\u5f53\u6211\u4eec\u7ad9\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e0d\u540c\u5c42\u6b21\u6765\u601d\u8003\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e0d\u540c\u5c42\u6b21\u4e4b\u95f4\u4f1a\u5b58\u5728\u7740\u5927\u91cf\u7684\u76f8\u4e92\u6982\u5ff5\u501f\u7528\u3002\u6bd4\u5982\uff1a","title":"\u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u501f\u7528\u6982\u5ff5"},{"location":"Post/Philosophy-level/#example-one","text":"\u4e0d\u540c\u5c42\u6b21\u63cf\u8ff0\u672c\u8d28\u4e0a\u975e\u5e38\u7c7b\u4f3c\u7684\u4e8b\u52a1\u6709\u7740\u4e0d\u540c\u7684\u8bf4\u6cd5\uff0c\u6bd4\u5982\u5728\u300a How-OS-run-01-OS-kernel-is-event-driven \u300b\u4e2d\u910b\u603b\u7ed3\u7684\uff1a \u6211\u4eec\u60ca\u559c\u7684\u53d1\u73b0\u7ad9\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4e0d\u540c\u7684\u5c42\u6b21\u6765\u63cf\u8ff0\u672c\u8d28\u4e0a\u975e\u5e38\u7c7b\u4f3c\u7684\u4e8b\u52a1\u6709\u7740\u4e0d\u540c\u7684\u8bf4\u6cd5\uff0c\u4e0b\u9762\u5bf9\u6b64\u8fdb\u884c\u4e86\u5bf9\u6bd4\uff1a Hardware Software Interrupt-driven Event-driven architecture / Event-driven programming Interrupt Event (computing) Interrupt handler / Interrupt service routine Event handler / Callback function \u5404\u79cdinterrupt\u5c31\u662f\u6240\u8c13\u7684event\u3002","title":"example one"},{"location":"Post/Philosophy-level/#example-two","text":"\u6b63\u5728\u4e0d\u540c\u7684\u5c42\u6b21\u6765\u770b\u5f85\u8ba1\u7b97\u673a\u79d1\u5b66=\u300b\u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u501f\u7528\u76f8\u540c\u6982\u5ff5-\u300b\u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ec6\u8282\uff09\uff0c\u901a\u8fc7\u63a5\u53e3\u6765\u8fdb\u884c\u4ea4\u4e92","title":"example two"},{"location":"Post/Philosophy-level/#_5","text":"\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\uff1a\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\u3001\u4e2d\u7ea7\u7f16\u7a0b\u8bed\u8a00\u3001\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00 \u4e0d\u540c\u5c42\u6b21\u7684\u8bed\u8a00\u4e4b\u95f4\u7684\u8f6c\u6362","title":"\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u8bed\u8a00"},{"location":"Post/Philosophy-level/#_6","text":"\u5206\u5c42\uff0c\u62bd\u8c61\uff0c\u63a5\u53e3\uff0c\u8fd9\u4e9b\u662f\u4e09\u4e2a\u540c\u4e49\u8bcd\u3002\u5b83\u4eec\u662f\u8d2f\u7a7f\u4e86computer science\u548csoftware engineering\u7684\u601d\u60f3","title":"\u603b\u7ed3"},{"location":"Post/Philosophy-level/#_7","text":"Abstraction layer","title":"\u62bd\u8c61\u5c42"},{"location":"Post/Philosophy-level/#_8","text":"","title":"\u5206\u5c42\u5e26\u6765\u7684\u4ef7\u503c"},{"location":"Post/Philosophy-level/#separation-of-concerns","text":"","title":"Separation of concerns"},{"location":"Post/Philosophy-level/#abstraction-computer-science","text":"","title":"Abstraction (computer science)"},{"location":"Post/Philosophy-level/#layer-object-oriented-design","text":"","title":"Layer (object-oriented design)"},{"location":"Post/Philosophy-level/#portability","text":"\u5982 Diversity of operating systems and portability \u62bd\u8c61\u5c42\u5e26\u6765\u79fb\u690d\u6027","title":"Portability"},{"location":"Post/Philosophy-level/#_9","text":"\u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\uff1a kernel space . user space . This separation prevents user data and kernel data from interfering with each other and causing instability and slowness, as well as preventing malfunctioning application programs from crashing the entire operating system. \u5206\u5c42\u5e26\u6765\u9694\u79bb\uff0c\u8fdb\u800c\u5e26\u6765\u5b89\u5168","title":"\u5206\u5c42\u5e26\u6765\u5b89\u5168"},{"location":"Post/Philosophy-level/#modularity","text":"\u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0","title":"\u5206\u5c42\u5e26\u6765modularity"},{"location":"Post/Philosophy-level/#pipeline","text":"\u4e00\u822c\uff0c\u4f1a\u5c06\u6309\u7167\u5206\u5c42\u8bbe\u8ba1\u7684\u7cfb\u7edf\u79f0\u4e3a\u6808\uff0c\u6bd4\u5982\u534f\u8bae\u6808\u3002\u6709\u65f6\u5019\u4e5f\u4f1a\u79f0\u4e3apipeline","title":"\u5206\u5c42\u4e0e\u6808\u3001pipeline"},{"location":"Post/Philosophy-level/#solution-stack","text":"","title":"Solution stack"},{"location":"Post/Philosophy-level/#virtual","text":"virtual\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5e38\u5e38\u4f1a\u51fa\u73b0\u7684\u4e00\u4e2a\u8bcd\uff0c\u6bd4\u5982\uff1a Virtual memory Virtual method \u7ecf\u8fc7\u672c\u6587\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5feb\u5730\u77e5\u9053\uff1avirtual\u4e5f\u662f\u4e00\u79cd\u62bd\u8c61\uff0c\u4e00\u79cd\u5206\u5c42\uff0c\u8fd9\u79cd\u5206\u5c42\u6240\u5e26\u6765\u7684\u4ef7\u503c\u5c31\u662f\u89e3\u8026\u3002\u4e0b\u9762\u4ee5virtual address\u6765\u8fdb\u884c\u8bf4\u660e\uff1a process\u5728\u8fd0\u884c\u7684\u65f6\u5019\u4f7f\u7528virtual memory address\uff0c\u7531OS\u6839\u636epage table\u5c06virtual address\u7ffb\u8bd1\u4e3aphysical address\uff1b\u4e0eprocess\u76f4\u63a5\u4f7f\u7528physical address\u76f8\u6bd4\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u591a\u6dfb\u52a0\u4e86\u4e00\u5c42\uff1a\u8f6c\u6362\u5c42\u3002\u8fd9\u79cd\u8bbe\u8ba1\u5e26\u6765\u7684\u4ef7\u503c\u662f\uff1a\u5b83\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u5177\u4f53\u6765\u8bb2\u5c31\u662f\u6309\u7167\u8fd9\u79cd\u8bbe\u8ba1\uff0cpage\u65e2\u53ef\u4ee5\u4f4d\u4e8eRAM\uff0c\u4e5f\u53ef\u4ee5\u4f4d\u4e8edisk\uff0c\u800c\u5982\u679c\u76f4\u63a5\u4f7f\u7528physical address\u7684\u8bdd\uff0c\u5219process\u7684page\u53ea\u80fd\u591f\u4f4d\u4e8eRAM\u4e2d\u3002\u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\uff0cvirtual address\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5728 Paged virtual memory \u4e2d\uff0c\u7531 Page tables \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u3002 \u5728 Virtual function \u4e2d\uff0c\u7531 Dispatch table \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u3002 \u8fd9\u79cd\u4e00\u5bf9\u591a\u662f\u9700\u8981\u4e00\u4e2atable\u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u7684\u3002","title":"virtual"},{"location":"Post/Philosophy-separation/","text":"Separation # Separation of protection and security # Separation of concerns # Separation of mechanism and policy # Separation of protection and security # \u5982\u4f55\u5b9e\u73b0\u9694\u79bb\uff1f # \u53ef\u4ee5\u4f7f\u7528 namespace","title":"Separation"},{"location":"Post/Philosophy-separation/#separation","text":"","title":"Separation"},{"location":"Post/Philosophy-separation/#separation-of-protection-and-security","text":"","title":"Separation of protection and security"},{"location":"Post/Philosophy-separation/#separation-of-concerns","text":"","title":"Separation of concerns"},{"location":"Post/Philosophy-separation/#separation-of-mechanism-and-policy","text":"","title":"Separation of mechanism and policy"},{"location":"Post/Philosophy-separation/#separation-of-protection-and-security_1","text":"","title":"Separation of protection and security"},{"location":"Post/Philosophy-separation/#_1","text":"\u53ef\u4ee5\u4f7f\u7528 namespace","title":"\u5982\u4f55\u5b9e\u73b0\u9694\u79bb\uff1f"},{"location":"Post/Separation-and-independent/","text":"\u672c\u6587\u76ee\u524d\u662f\u8349\u7a3f\u72b6\u6001\u3002 Separation # Separation of protection and security # Separation of concerns # Separation of mechanism and policy # Separation of protection and security # \u5982\u4f55\u5b9e\u73b0\u9694\u79bb\uff1f # \u53ef\u4ee5\u4f7f\u7528 namespace \u9694\u79bb\u4e0e\u72ec\u7acb # \u4e3a\u4e86\u80fd\u591f\u72ec\u7acb\uff0c\u5c31\u9700\u8981\u4e00\u5b9a\u7684\u9694\u79bb\uff0c\u5c31\u9700\u8981\u6709\u81ea\u5df1\u7684\u4e00\u5957\u57fa\u7840\u8bbe\u65bd\u3002","title":"Separation-and-independent.md"},{"location":"Post/Separation-and-independent/#separation","text":"","title":"Separation"},{"location":"Post/Separation-and-independent/#separation-of-protection-and-security","text":"","title":"Separation of protection and security"},{"location":"Post/Separation-and-independent/#separation-of-concerns","text":"","title":"Separation of concerns"},{"location":"Post/Separation-and-independent/#separation-of-mechanism-and-policy","text":"","title":"Separation of mechanism and policy"},{"location":"Post/Separation-and-independent/#separation-of-protection-and-security_1","text":"","title":"Separation of protection and security"},{"location":"Post/Separation-and-independent/#_1","text":"\u53ef\u4ee5\u4f7f\u7528 namespace","title":"\u5982\u4f55\u5b9e\u73b0\u9694\u79bb\uff1f"},{"location":"Post/Separation-and-independent/#_2","text":"\u4e3a\u4e86\u80fd\u591f\u72ec\u7acb\uff0c\u5c31\u9700\u8981\u4e00\u5b9a\u7684\u9694\u79bb\uff0c\u5c31\u9700\u8981\u6709\u81ea\u5df1\u7684\u4e00\u5957\u57fa\u7840\u8bbe\u65bd\u3002","title":"\u9694\u79bb\u4e0e\u72ec\u7acb"},{"location":"Post/Separation/","text":"\u672c\u6587\u76ee\u524d\u662f\u8349\u7a3f\u72b6\u6001\u3002 Separation # Separation of protection and security # Separation of concerns # Separation of mechanism and policy # Separation of protection and security # \u5982\u4f55\u5b9e\u73b0\u9694\u79bb\uff1f # \u53ef\u4ee5\u4f7f\u7528 namespace","title":"Separation"},{"location":"Post/Separation/#separation","text":"","title":"Separation"},{"location":"Post/Separation/#separation-of-protection-and-security","text":"","title":"Separation of protection and security"},{"location":"Post/Separation/#separation-of-concerns","text":"","title":"Separation of concerns"},{"location":"Post/Separation/#separation-of-mechanism-and-policy","text":"","title":"Separation of mechanism and policy"},{"location":"Post/Separation/#separation-of-protection-and-security_1","text":"","title":"Separation of protection and security"},{"location":"Post/Separation/#_1","text":"\u53ef\u4ee5\u4f7f\u7528 namespace","title":"\u5982\u4f55\u5b9e\u73b0\u9694\u79bb\uff1f"},{"location":"Post/Thoughts/","text":"\u60f3\u6cd5 # \u77e5\u8bc6\u5982\u6b64\u7e41\u6742\uff0c\u6240\u4ee5\u5bf9\u5b83\u4eec\u7684\u7ec4\u7ec7\uff0c\u68b3\u7406\u975e\u5e38\u91cd\u8981 # \u6211\u7684\u5199\u4f5c\u539f\u5219\u3002 \u68b3\u7406\uff0c\u800c\u4e0d\u662f\u6284\u5199 # \u5e94\u8be5\u575a\u6301\u5982\u4e0a\u539f\u5219\u6765\u8fdb\u884c\u7f16\u5199\uff0c\u7ed9\u51fa\u6240\u5f15\u7528\u7684\u8d44\u6e90\u7684\u94fe\u63a5\u3002 \u6784\u5efabig picture # \u6784\u5efa\u7406\u8bba\u6846\u67b6 \u4ece\u66f4\u9ad8\u7684\u89d2\u5ea6\u6765\u601d\u8003\u95ee\u9898 # \u4ece\u5177\u4f53\u95ee\u9898\u4e2d\u8df3\u8131\u51fa\u6765\uff0c\u4ece\u7406\u8bba\u7684\u9ad8\u5ea6\u6765\u5206\u6790\u5b83\uff0c\u5982\u4ececompiler principle\u6269\u5c55\u5230 automata-and-formal-language \uff0c\u7136\u540e\u6269\u5f20\u5230 Theory of computation \u3002 \u4e00\u4e9b\u5e38\u7528\u7684\u89d2\u5ea6\uff1a \u4ece\u65f6\u7a7a\u7684\u89d2\u5ea6 \u4ece\u54f2\u5b66\u7684\u89d2\u5ea6\uff08\u6bd4\u5982 Formalism (philosophy of mathematics) \uff09 \u4ee5\u53d1\u5c55\u7684\u773c\u5149\u6765\u770b\u5f85\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u6f14\u8fdb # \u8ba1\u7b97\u673a\u79d1\u5b66\u662f\u5728\u4e0d\u65ad\u5730\u6f14\u8fdb\u3001\u4e0d\u65ad\u5f3a\u5927\u7684\uff0c\u4eca\u5929\u6211\u4eec\u6240\u7ecf\u5386\u7684\u8fd9\u4e9b\u53d8\u9769\uff08\u5982AI\u3001blockchain\u7b49\uff09\u5c06\u79f0\u4e3a\u540e\u4e16\u4eba\u4eec\u773c\u4e2d\u7684\u5386\u53f2\uff0c\u6211\u4eec\u9700\u8981\u4e0d\u65ad\u5730\u8ddf\u8fdb\u65b0\u7684\u6280\u672f\uff0c\u800c\u4e14\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u68b3\u7406\u6280\u672f\u7684\u53d1\u5c55\u8109\u7edc\uff0c\u8fd9\u6837\u6211\u4eec\u80fd\u591f\u66f4\u597d\u5730\u638c\u63e1\u65b0\u6280\u672f\u6240\u6539\u53d8\u7684\u662f\u4ec0\u4e48\u3001\u53d1\u660e\u5bb6\u3001\u7814\u7a76\u5458\u4eec\u4e3a\u4ec0\u4e48\u53d1\u660e\u521b\u9020\u5b83\u3002 \u6bd4\u5982\uff1a \u4eceApache \u5230 Nginx \u4ecegcc \u5230 llvm \u4ece Monolithic kernel \u5230 Microkernel \u610f\u56fe\u51b3\u5b9a\u6700\u7ec8\u7684\u7ed3\u679c # \u5728\u9605\u8bfb clang \u7684 Clang vs Other Open Source Compilers \u65f6\uff0c\u5176\u4e2d\u7684\u4e00\u6bb5\u8bdd\u8ba9\u6211\u5370\u8c61\u6df1\u523b\uff1a The goal of this list is to describe how differences in goals lead to different strengths and weaknesses, not to make some compiler look bad. \u5728 Clang vs Other Open Source Compilers \u4e2d\uff0c\u4f5c\u8005\u5bf9\u6bd4\u4e86Clang\u548c\u5176\u5b83\u51e0\u6b3ecompiler\u7684strength\u548cweakness\uff0c\u4ece\u4e2d\u6211\u6240\u9886\u609f\u5230\u7684\u662f\uff1a\u610f\u56fe\u51b3\u5b9a\u6700\u7ec8\u7ed3\u679c\uff0c\u5373\u8f6f\u4ef6\u7684\u8bbe\u8ba1\u8005\u5728\u5f00\u53d1\u8f6f\u4ef6\u4e4b\u524d\u7684\u7684\u76ee\u6807\u6700\u7ec8\u51b3\u5b9a\u4e86\u4ed6\u6240\u5f00\u53d1\u51fa\u8fd9\u8f6f\u4ef6\u7684strength\u548cweakness\uff0c\u6240\u4ee5\uff0c\u9ad8\u660e\u7684\u8bbe\u8ba1\u8005\u5bf9\u4e8e\u8f6f\u4ef6\u7684\u91cd\u8981\u6027\u3002 \u4e0e\u6b64\u7c7b\u4f3c\u7684\u6848\u4f8b\u8fd8\u6709\uff1a git Internal # \u5728\u9605\u8bfbgit\u7684 1.3 Getting Started - What is Git? \u8282\u65f6\u5019\uff0c\u5176\u4e2d\u7684\u8fd9\u6bb5\u8bdd\u4ee4\u6211\u5370\u8c61\u6df1\u523b\uff1a if you understand what Git is and the fundamentals of how it works, then using Git effectively will probably be much easier for you. \u663e\u7136\uff0c\u5b83\u80cc\u540e\u8574\u542b\u7684\u9053\u7406\u80af\u5b9a\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8egit\u3002\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u8fc7\u4e86 Reinventing the wheel \u7684\u5e74\u4ee3\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u6709\u5927\u91cf\u7684\u3001\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7684\u8f6f\u4ef6\uff0c\u6bd4\u5982operating system\uff0cversion control system\uff0c\u4e00\u4e2a\u4e0d\u4e89\u7684\u4e8b\u5b9e\u662f\uff1a\u5982\u679c\u4e86\u89e3\u8f6f\u4ef6\u7684\u5b9e\u73b0\u539f\u7406\u3001\u5185\u90e8\u7ec6\u8282\uff0c\u90a3\u4e48\u5c31\u80fd\u591f\u9ad8\u6548\u5730\u4f7f\u7528\u5b83\u3002","title":"Thoughts"},{"location":"Post/Thoughts/#_1","text":"","title":"\u60f3\u6cd5"},{"location":"Post/Thoughts/#_2","text":"\u6211\u7684\u5199\u4f5c\u539f\u5219\u3002","title":"\u77e5\u8bc6\u5982\u6b64\u7e41\u6742\uff0c\u6240\u4ee5\u5bf9\u5b83\u4eec\u7684\u7ec4\u7ec7\uff0c\u68b3\u7406\u975e\u5e38\u91cd\u8981"},{"location":"Post/Thoughts/#_3","text":"\u5e94\u8be5\u575a\u6301\u5982\u4e0a\u539f\u5219\u6765\u8fdb\u884c\u7f16\u5199\uff0c\u7ed9\u51fa\u6240\u5f15\u7528\u7684\u8d44\u6e90\u7684\u94fe\u63a5\u3002","title":"\u68b3\u7406\uff0c\u800c\u4e0d\u662f\u6284\u5199"},{"location":"Post/Thoughts/#big-picture","text":"\u6784\u5efa\u7406\u8bba\u6846\u67b6","title":"\u6784\u5efabig picture"},{"location":"Post/Thoughts/#_4","text":"\u4ece\u5177\u4f53\u95ee\u9898\u4e2d\u8df3\u8131\u51fa\u6765\uff0c\u4ece\u7406\u8bba\u7684\u9ad8\u5ea6\u6765\u5206\u6790\u5b83\uff0c\u5982\u4ececompiler principle\u6269\u5c55\u5230 automata-and-formal-language \uff0c\u7136\u540e\u6269\u5f20\u5230 Theory of computation \u3002 \u4e00\u4e9b\u5e38\u7528\u7684\u89d2\u5ea6\uff1a \u4ece\u65f6\u7a7a\u7684\u89d2\u5ea6 \u4ece\u54f2\u5b66\u7684\u89d2\u5ea6\uff08\u6bd4\u5982 Formalism (philosophy of mathematics) \uff09","title":"\u4ece\u66f4\u9ad8\u7684\u89d2\u5ea6\u6765\u601d\u8003\u95ee\u9898"},{"location":"Post/Thoughts/#_5","text":"\u8ba1\u7b97\u673a\u79d1\u5b66\u662f\u5728\u4e0d\u65ad\u5730\u6f14\u8fdb\u3001\u4e0d\u65ad\u5f3a\u5927\u7684\uff0c\u4eca\u5929\u6211\u4eec\u6240\u7ecf\u5386\u7684\u8fd9\u4e9b\u53d8\u9769\uff08\u5982AI\u3001blockchain\u7b49\uff09\u5c06\u79f0\u4e3a\u540e\u4e16\u4eba\u4eec\u773c\u4e2d\u7684\u5386\u53f2\uff0c\u6211\u4eec\u9700\u8981\u4e0d\u65ad\u5730\u8ddf\u8fdb\u65b0\u7684\u6280\u672f\uff0c\u800c\u4e14\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u68b3\u7406\u6280\u672f\u7684\u53d1\u5c55\u8109\u7edc\uff0c\u8fd9\u6837\u6211\u4eec\u80fd\u591f\u66f4\u597d\u5730\u638c\u63e1\u65b0\u6280\u672f\u6240\u6539\u53d8\u7684\u662f\u4ec0\u4e48\u3001\u53d1\u660e\u5bb6\u3001\u7814\u7a76\u5458\u4eec\u4e3a\u4ec0\u4e48\u53d1\u660e\u521b\u9020\u5b83\u3002 \u6bd4\u5982\uff1a \u4eceApache \u5230 Nginx \u4ecegcc \u5230 llvm \u4ece Monolithic kernel \u5230 Microkernel","title":"\u4ee5\u53d1\u5c55\u7684\u773c\u5149\u6765\u770b\u5f85\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u6f14\u8fdb"},{"location":"Post/Thoughts/#_6","text":"\u5728\u9605\u8bfb clang \u7684 Clang vs Other Open Source Compilers \u65f6\uff0c\u5176\u4e2d\u7684\u4e00\u6bb5\u8bdd\u8ba9\u6211\u5370\u8c61\u6df1\u523b\uff1a The goal of this list is to describe how differences in goals lead to different strengths and weaknesses, not to make some compiler look bad. \u5728 Clang vs Other Open Source Compilers \u4e2d\uff0c\u4f5c\u8005\u5bf9\u6bd4\u4e86Clang\u548c\u5176\u5b83\u51e0\u6b3ecompiler\u7684strength\u548cweakness\uff0c\u4ece\u4e2d\u6211\u6240\u9886\u609f\u5230\u7684\u662f\uff1a\u610f\u56fe\u51b3\u5b9a\u6700\u7ec8\u7ed3\u679c\uff0c\u5373\u8f6f\u4ef6\u7684\u8bbe\u8ba1\u8005\u5728\u5f00\u53d1\u8f6f\u4ef6\u4e4b\u524d\u7684\u7684\u76ee\u6807\u6700\u7ec8\u51b3\u5b9a\u4e86\u4ed6\u6240\u5f00\u53d1\u51fa\u8fd9\u8f6f\u4ef6\u7684strength\u548cweakness\uff0c\u6240\u4ee5\uff0c\u9ad8\u660e\u7684\u8bbe\u8ba1\u8005\u5bf9\u4e8e\u8f6f\u4ef6\u7684\u91cd\u8981\u6027\u3002 \u4e0e\u6b64\u7c7b\u4f3c\u7684\u6848\u4f8b\u8fd8\u6709\uff1a git","title":"\u610f\u56fe\u51b3\u5b9a\u6700\u7ec8\u7684\u7ed3\u679c"},{"location":"Post/Thoughts/#internal","text":"\u5728\u9605\u8bfbgit\u7684 1.3 Getting Started - What is Git? \u8282\u65f6\u5019\uff0c\u5176\u4e2d\u7684\u8fd9\u6bb5\u8bdd\u4ee4\u6211\u5370\u8c61\u6df1\u523b\uff1a if you understand what Git is and the fundamentals of how it works, then using Git effectively will probably be much easier for you. \u663e\u7136\uff0c\u5b83\u80cc\u540e\u8574\u542b\u7684\u9053\u7406\u80af\u5b9a\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8egit\u3002\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u8fc7\u4e86 Reinventing the wheel \u7684\u5e74\u4ee3\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u6709\u5927\u91cf\u7684\u3001\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7684\u8f6f\u4ef6\uff0c\u6bd4\u5982operating system\uff0cversion control system\uff0c\u4e00\u4e2a\u4e0d\u4e89\u7684\u4e8b\u5b9e\u662f\uff1a\u5982\u679c\u4e86\u89e3\u8f6f\u4ef6\u7684\u5b9e\u73b0\u539f\u7406\u3001\u5185\u90e8\u7ec6\u8282\uff0c\u90a3\u4e48\u5c31\u80fd\u591f\u9ad8\u6548\u5730\u4f7f\u7528\u5b83\u3002","title":"Internal"},{"location":"Post/Time-and-space/","text":"time and space # time and space\uff0c \u65f6\u4e0e\u7a7a\u3002 \u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u65f6\u7a7a # \u7b97\u6cd5\u7684\u65f6\u7a7a\u5206\u6790 CPU\u7684\u65f6\u949f OS\u7684\u65f6\u949f \u7cfb\u7edf\u7684\u65f6\u949f\u5c31\u76f8\u5f53\u4e8e\u7cfb\u7edf\u7684heartbeat\u3002 version control\uff1a\u8bb0\u5f55\u5386\u53f2 \u4eceCPU\u7684\u63a7\u5236\u5668\u5230OS\u7684TimerEvent\u6765\u8c03\u5ea6Task\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2dTimer\u7684\u91cd\u8981\u4ef7\u503c\u3002 \u7cfb\u7edf\u7684\u5fc3\u8df3\u3002 \u8fdb\u7a0b\u6240\u5360\u7528\u7684\u8d44\u6e90\u53ef\u4ee5\u770b\u505a\u662f\u5360\u7528\u4e00\u5b9a\u7684\u7a7a\u95f4 #","title":"Time-and-space"},{"location":"Post/Time-and-space/#time-and-space","text":"time and space\uff0c \u65f6\u4e0e\u7a7a\u3002","title":"time and space"},{"location":"Post/Time-and-space/#_1","text":"\u7b97\u6cd5\u7684\u65f6\u7a7a\u5206\u6790 CPU\u7684\u65f6\u949f OS\u7684\u65f6\u949f \u7cfb\u7edf\u7684\u65f6\u949f\u5c31\u76f8\u5f53\u4e8e\u7cfb\u7edf\u7684heartbeat\u3002 version control\uff1a\u8bb0\u5f55\u5386\u53f2 \u4eceCPU\u7684\u63a7\u5236\u5668\u5230OS\u7684TimerEvent\u6765\u8c03\u5ea6Task\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2dTimer\u7684\u91cd\u8981\u4ef7\u503c\u3002 \u7cfb\u7edf\u7684\u5fc3\u8df3\u3002","title":"\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u65f6\u7a7a"},{"location":"Post/Time-and-space/#_2","text":"","title":"\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u8d44\u6e90\u53ef\u4ee5\u770b\u505a\u662f\u5360\u7528\u4e00\u5b9a\u7684\u7a7a\u95f4"},{"location":"Post/Unit/","text":"Unit # \"unit\"\u7684\u610f\u601d\u662f\u201c\u5355\u4f4d\u201d\uff0c\u672c\u6587\u5bf9\u5404\u79cdunit\u8fdb\u884c\u603b\u7ed3\u3002 Unit of user-defined action # \u672c\u8282\u6807\u9898\u4e2d\u7684\u201cunit of user-defined action\u201d\u662f\u6211\u5728\u9605\u8bfb\u9f99\u4e66 Chapter 7.2 Stack Allocation of Space \u65f6\u9047\u5230\u7684\uff0c\u539f\u6587\u5982\u4e0b\uff1a Almost all compilers for languages that use procedures, functions, or methods as units of user-defined actions manage at least part of their run-time memory as a stack. \u201caction\u201d\u7684\u610f\u601d\u662f\u201c\u52a8\u4f5c\u201d\u3001\u201c\u8fd0\u884c\u201d\u3001\u201c\u6267\u884c\u201d\uff0c\u201cunit of user-defined action\u201d\u6240\u5f3a\u8c03\u7684\u662f\u8fd0\u884c\u3002\u53d7 \u5206\u5c42\u601d\u60f3 \u7684\u5f71\u54cd\uff0c\u6211\u5f00\u59cb\u4ece\u4e0d\u540c\u7684\u5c42\u6b21\u6765\u5bf9\u6bd4\u5206\u6790\uff0c\u4e0b\u9762\u603b\u7ed3\u4e86\u5404\u4e2a\u5c42\u6b21\u7684user-defined action\u3002 CPU\u7684unit of user-defined action # CPU\u7684unit of user-defined action\u662f instruction \uff0c\u4e5f\u53ef\u4ee5\u8bf4CPU\u7684\u6267\u884c\u5355\u4f4d\u662f instruction \u3002\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u4e00\u822c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528 instruction \uff0c\u5f80\u5f80\u662f\u7531compiler\u5c06\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684program\u7ffb\u8bd1\u4e3a\u5bf9\u5e94\u7684machine language\u7684program\u3002 Programming language\u7684unit of user-defined action # Programming language\uff08\u90e8\u5206\uff09\u7684unit of user-defined action\u662fstatement\u3002 \u7ef4\u57fa\u767e\u79d1 Statement \uff1a In computer programming , a statement is a syntactic unit of an imperative programming language that expresses some action to be carried out. A program written in such a language is formed by a sequence of one or more statements. A statement may have internal components (e.g., expressions ). \u6211\u4eec\u5728\u8fdb\u884c\u7f16\u7a0b\u7684\u65f6\u5019\uff0c\u4f7f\u7528statement\u6765\u63cf\u8ff0\u7a0b\u5e8f\u7684\u8fd0\u884c\u903b\u8f91\uff0c\u663e\u7136programming language\u7684unit of user-defined action\u5c31\u662fstatement\u3002 \u7531\u7f16\u8bd1\u5668\u5c06statement\u7ffb\u8bd1\u4e3ainstruction\uff0c\u4e00\u4e2astatement\u53ef\u80fd\u5bf9\u5e94\u591a\u6761instruction\u3002 Process/thread\u7684unit of user-defined action # \u73b0\u4ee3OS\u4e2d\uff0cthread\u662f\u8c03\u5ea6\u5355\u4f4d\uff0c\u5982\u679c\u4e0d\u8fdb\u884cmulti-thread programming\u7684\u8bdd\uff0c\u5219process\u53ea\u6709\u4e00\u4e2athread\uff0c\u6240\u4ee5\u6807\u9898\u4e2d\u4e5f\u5305\u542b\u4e86process\u548cthread\uff08\u5173\u4e8e\u6b64\uff0c\u53c2\u89c1\u5de5\u7a0b Linux-OS \u7684\u6587\u7ae0 Process model \uff09\u3002 Thread\u7684unit of user-defined action \u662f\u4ec0\u4e48\uff1f\u8bfb\u8005\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u6211\u4eec\u8be2\u95ee\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u7ad9\u5728Process\u5c42\uff0c\u800c\u4e0d\u662f\u7ad9\u5728CPU\u5c42\uff0c\u6240\u4ee5\u7b54\u6848\u80af\u5b9a\u662f\u6bd4instruction\u66f4\u52a0\u5927\uff08\u6216\u8005\u8bf4\u662f\u201c\u9ad8\u7ea7\u201d\uff09\u7684\u4e00\u4e2aunit\uff08\u5355\u4f4d\uff09\u3002\u5176\u5b9e\u8bfb\u8005\u5373\u4f7f\u56de\u5230\u7684\u662finstruction\uff0c\u4e5f\u4e0d\u80fd\u5224\u5b9a\u4f60\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u7a0b\u5e8f\u6700\u7ec8\u80af\u5b9a\u662f\u9700\u8981\u88ab\u7f16\u7a0b\u6210machine language program\u624d\u80fd\u591f\u7531CPU\u6765\u6267\u884c\uff0c\u4f46\u662f\u663e\u7136\u8fd9\u4e2a\u7b54\u6848\u4e0d\u662f\u6700\u51c6\u786e\u7684\u3002 \u7b54\u6848\u662f\uff1a \u51fd\u6570 \u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5176\u5b9e\u5728\u672c\u8282\u6807\u9898\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u7b54\u6848\u662f\u4e0d\u9700\u8981\u8fdb\u884c\u4e13\u4e1a\u3001\u6df1\u5165\u7684\u89e3\u91ca\uff0c\u56e0\u4e3a\u8fd9\u662f\u89c4\u5b9a\uff0c\u8fd9\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u53d1\u5c55\u591a\u5e74\u5f62\u6210\u7684\u4e8b\u5b9e\uff0c\u5f53\u7136\u8fd9\u6837\u505a\u7684\u80cc\u540e\u80af\u5b9a\u6709\u7740\u975e\u5e38\u591a\u7684\u539f\u56e0\uff0c\u5728\u6b64\u6211\u4eec\u4e0d\u53bb\u8ffd\u7a76\uff0c\u5982\u679c\u8bfb\u8005\u611f\u5174\u8da3\uff0c\u53c2\u89c1 Subroutine \u3002\u4e0b\u9762\u5bf9\u8fd9\u4e2a\u7b54\u6848\u8fdb\u884c\u4e00\u4e9b\u975e\u4e13\u4e1a\u7684\u89e3\u91ca\uff1a \u9700\u8981\u6ce8\u610f\u7684\u662f\u6240\u95ee\u7684\u662f\u201c action \u201d\uff0c\u5373 \u8fd0\u884c \uff0c\u5728\u5404\u79cd\u9ad8\u7ea7\u8bed\u8a00\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u662f\u901a\u8fc7 \u8c03\u7528\u51fd\u6570 \u6765\u8fdb\u884c \u8fd0\u884c \u7684\uff0c\u4e00\u4e2a\u51fd\u6570\u53ea\u6709\u88ab\u8c03\u7528\uff0c\u5b83\u7684\u51fd\u6570\u4f53\u4e2d\u7684statement\u624d\u80fd\u591f\u88ab\u6267\u884c\uff0c\u9ad8\u7ea7\u8bed\u8a00\u7a0b\u5e8f\u4e2d\uff0c\u662f\u65e0\u6cd5\u5355\u72ec\u6267\u884c\u4e00\u4e2astatement\u7684\uff0c\u4e00\u4e2astatement\u53ea\u6709\u7f6e\u5165\u4e00\u4e2afunction\u4e2d\uff0c\u624d\u53ef\u80fd\u88ab\u6267\u884c\u5230\uff0c\u6240\u4ee5thread\u7684unit of user-defined action\u662f\u51fd\u6570\u3002 Process\u7684\u5165\u53e3\u662f main function \uff0c\u7136\u540e\u8be5\u51fd\u6570\u4e2d\u7684\u8bed\u53e5\u88ab\u4f9d\u6b21\u6267\u884c\uff0c\u8fd9\u8bf4\u660ethread\u7684unit of user-defined action\u662f\u51fd\u6570\u3002 \u51fd\u6570\u7684\u53e6\u5916\u4e00\u4e2a\u540d\u79f0\u662f\u201c callable unit \u201d\uff0c\u201ccallable unit\u201d\uff0c\u5176\u5b9e\u8fd9\u4e5f\u8bf4\u660e\u4e86\u5b83\u662fthread\u7684unit of user-defined action\u3002 pthread_create \u7684\u5165\u53c2 start_routine \u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u8bf4\u660ethread\u7684unit of user-defined action\u662f\u51fd\u6570\u3002 Linux OS\u7684 clone \u7684\u5165\u53c2 fn \u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u8bf4\u660ethread\u7684unit of user-defined action\u662f\u51fd\u6570\u3002 exec \u7cfb\u5217\u51fd\u6570\u7684\u53c2\u6570 pathname \u6307\u5b9a\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5165\u53e3\u662fmain\u51fd\u6570\uff0c\u5176\u5b9e\u8fd9\u76f8\u5f53\u4e8e\u4e0a\u9762\u7684 pthread_create \u548c clone \u7684\u5165\u53c2\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002 \u603b\u7ed3 # \u4e00\u4e2a\u51fd\u6570\u662f\u7531\u591a\u4e2astatement\u7ec4\u6210\uff0c\u4e00\u4e2astatement\u6709\u591a\u4e2ainstruction\u7ec4\u6210\u3002thread\u7684\u8fd0\u884c\u5355\u4f4dfunction\u663e\u7136\u5bf9\u5e94\u4e86\u591a\u4e2ainstruction\u3002 Linux OS kernel\u7684unit of user-defined action # Linux OS kernel\u7684unit of user-defined action\u662f\u51fd\u6570\u3002 \u5728\u5de5\u7a0b Linux-OS \u7684 Linux OS kernel is event-driven \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u4e86\uff1a \u57fa\u672c\u4e0a\u6240\u6709\u7684hardware\u90fd\u662f\u901a\u8fc7 interrupt \u6765\u901a\u77e5OS kernel\u7684\uff0c\u7136\u540e\u5176\u5bf9\u5e94\u7684 Interrupt handler \u4f1a\u88ab\u89e6\u53d1\u6267\u884c\uff0c\u4e5f\u5c31\u662fOS kernel\u662f interrupt-driven \u7684 Interrupt handler \u672c\u8d28\u4e0a\u662f\u51fd\u6570\u3002 \u5173\u4e8e\u6b64\u7684\u53e6\u5916\u4e00\u4e2a\u4f8b\u8bc1\u662fsignal handler\uff0csignal handler\u672c\u8d28\u4e0a\u4e5f\u662f\u51fd\u6570\uff0c\u53c2\u89c1 SIGNAL(7) \u3002 CPU access memory\u7684\u5355\u4f4d\u662f word # \u53c2\u89c1\u5de5\u7a0b Hardware \u7684 Memory-alignment \u7ae0\u8282\u3002","title":"Unit"},{"location":"Post/Unit/#unit","text":"\"unit\"\u7684\u610f\u601d\u662f\u201c\u5355\u4f4d\u201d\uff0c\u672c\u6587\u5bf9\u5404\u79cdunit\u8fdb\u884c\u603b\u7ed3\u3002","title":"Unit"},{"location":"Post/Unit/#unit-of-user-defined-action","text":"\u672c\u8282\u6807\u9898\u4e2d\u7684\u201cunit of user-defined action\u201d\u662f\u6211\u5728\u9605\u8bfb\u9f99\u4e66 Chapter 7.2 Stack Allocation of Space \u65f6\u9047\u5230\u7684\uff0c\u539f\u6587\u5982\u4e0b\uff1a Almost all compilers for languages that use procedures, functions, or methods as units of user-defined actions manage at least part of their run-time memory as a stack. \u201caction\u201d\u7684\u610f\u601d\u662f\u201c\u52a8\u4f5c\u201d\u3001\u201c\u8fd0\u884c\u201d\u3001\u201c\u6267\u884c\u201d\uff0c\u201cunit of user-defined action\u201d\u6240\u5f3a\u8c03\u7684\u662f\u8fd0\u884c\u3002\u53d7 \u5206\u5c42\u601d\u60f3 \u7684\u5f71\u54cd\uff0c\u6211\u5f00\u59cb\u4ece\u4e0d\u540c\u7684\u5c42\u6b21\u6765\u5bf9\u6bd4\u5206\u6790\uff0c\u4e0b\u9762\u603b\u7ed3\u4e86\u5404\u4e2a\u5c42\u6b21\u7684user-defined action\u3002","title":"Unit of user-defined action"},{"location":"Post/Unit/#cpuunit-of-user-defined-action","text":"CPU\u7684unit of user-defined action\u662f instruction \uff0c\u4e5f\u53ef\u4ee5\u8bf4CPU\u7684\u6267\u884c\u5355\u4f4d\u662f instruction \u3002\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u4e00\u822c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528 instruction \uff0c\u5f80\u5f80\u662f\u7531compiler\u5c06\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684program\u7ffb\u8bd1\u4e3a\u5bf9\u5e94\u7684machine language\u7684program\u3002","title":"CPU\u7684unit of user-defined action"},{"location":"Post/Unit/#programming-languageunit-of-user-defined-action","text":"Programming language\uff08\u90e8\u5206\uff09\u7684unit of user-defined action\u662fstatement\u3002 \u7ef4\u57fa\u767e\u79d1 Statement \uff1a In computer programming , a statement is a syntactic unit of an imperative programming language that expresses some action to be carried out. A program written in such a language is formed by a sequence of one or more statements. A statement may have internal components (e.g., expressions ). \u6211\u4eec\u5728\u8fdb\u884c\u7f16\u7a0b\u7684\u65f6\u5019\uff0c\u4f7f\u7528statement\u6765\u63cf\u8ff0\u7a0b\u5e8f\u7684\u8fd0\u884c\u903b\u8f91\uff0c\u663e\u7136programming language\u7684unit of user-defined action\u5c31\u662fstatement\u3002 \u7531\u7f16\u8bd1\u5668\u5c06statement\u7ffb\u8bd1\u4e3ainstruction\uff0c\u4e00\u4e2astatement\u53ef\u80fd\u5bf9\u5e94\u591a\u6761instruction\u3002","title":"Programming language\u7684unit of user-defined action"},{"location":"Post/Unit/#processthreadunit-of-user-defined-action","text":"\u73b0\u4ee3OS\u4e2d\uff0cthread\u662f\u8c03\u5ea6\u5355\u4f4d\uff0c\u5982\u679c\u4e0d\u8fdb\u884cmulti-thread programming\u7684\u8bdd\uff0c\u5219process\u53ea\u6709\u4e00\u4e2athread\uff0c\u6240\u4ee5\u6807\u9898\u4e2d\u4e5f\u5305\u542b\u4e86process\u548cthread\uff08\u5173\u4e8e\u6b64\uff0c\u53c2\u89c1\u5de5\u7a0b Linux-OS \u7684\u6587\u7ae0 Process model \uff09\u3002 Thread\u7684unit of user-defined action \u662f\u4ec0\u4e48\uff1f\u8bfb\u8005\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u6211\u4eec\u8be2\u95ee\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u7ad9\u5728Process\u5c42\uff0c\u800c\u4e0d\u662f\u7ad9\u5728CPU\u5c42\uff0c\u6240\u4ee5\u7b54\u6848\u80af\u5b9a\u662f\u6bd4instruction\u66f4\u52a0\u5927\uff08\u6216\u8005\u8bf4\u662f\u201c\u9ad8\u7ea7\u201d\uff09\u7684\u4e00\u4e2aunit\uff08\u5355\u4f4d\uff09\u3002\u5176\u5b9e\u8bfb\u8005\u5373\u4f7f\u56de\u5230\u7684\u662finstruction\uff0c\u4e5f\u4e0d\u80fd\u5224\u5b9a\u4f60\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u7a0b\u5e8f\u6700\u7ec8\u80af\u5b9a\u662f\u9700\u8981\u88ab\u7f16\u7a0b\u6210machine language program\u624d\u80fd\u591f\u7531CPU\u6765\u6267\u884c\uff0c\u4f46\u662f\u663e\u7136\u8fd9\u4e2a\u7b54\u6848\u4e0d\u662f\u6700\u51c6\u786e\u7684\u3002 \u7b54\u6848\u662f\uff1a \u51fd\u6570 \u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5176\u5b9e\u5728\u672c\u8282\u6807\u9898\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u7b54\u6848\u662f\u4e0d\u9700\u8981\u8fdb\u884c\u4e13\u4e1a\u3001\u6df1\u5165\u7684\u89e3\u91ca\uff0c\u56e0\u4e3a\u8fd9\u662f\u89c4\u5b9a\uff0c\u8fd9\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u53d1\u5c55\u591a\u5e74\u5f62\u6210\u7684\u4e8b\u5b9e\uff0c\u5f53\u7136\u8fd9\u6837\u505a\u7684\u80cc\u540e\u80af\u5b9a\u6709\u7740\u975e\u5e38\u591a\u7684\u539f\u56e0\uff0c\u5728\u6b64\u6211\u4eec\u4e0d\u53bb\u8ffd\u7a76\uff0c\u5982\u679c\u8bfb\u8005\u611f\u5174\u8da3\uff0c\u53c2\u89c1 Subroutine \u3002\u4e0b\u9762\u5bf9\u8fd9\u4e2a\u7b54\u6848\u8fdb\u884c\u4e00\u4e9b\u975e\u4e13\u4e1a\u7684\u89e3\u91ca\uff1a \u9700\u8981\u6ce8\u610f\u7684\u662f\u6240\u95ee\u7684\u662f\u201c action \u201d\uff0c\u5373 \u8fd0\u884c \uff0c\u5728\u5404\u79cd\u9ad8\u7ea7\u8bed\u8a00\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u662f\u901a\u8fc7 \u8c03\u7528\u51fd\u6570 \u6765\u8fdb\u884c \u8fd0\u884c \u7684\uff0c\u4e00\u4e2a\u51fd\u6570\u53ea\u6709\u88ab\u8c03\u7528\uff0c\u5b83\u7684\u51fd\u6570\u4f53\u4e2d\u7684statement\u624d\u80fd\u591f\u88ab\u6267\u884c\uff0c\u9ad8\u7ea7\u8bed\u8a00\u7a0b\u5e8f\u4e2d\uff0c\u662f\u65e0\u6cd5\u5355\u72ec\u6267\u884c\u4e00\u4e2astatement\u7684\uff0c\u4e00\u4e2astatement\u53ea\u6709\u7f6e\u5165\u4e00\u4e2afunction\u4e2d\uff0c\u624d\u53ef\u80fd\u88ab\u6267\u884c\u5230\uff0c\u6240\u4ee5thread\u7684unit of user-defined action\u662f\u51fd\u6570\u3002 Process\u7684\u5165\u53e3\u662f main function \uff0c\u7136\u540e\u8be5\u51fd\u6570\u4e2d\u7684\u8bed\u53e5\u88ab\u4f9d\u6b21\u6267\u884c\uff0c\u8fd9\u8bf4\u660ethread\u7684unit of user-defined action\u662f\u51fd\u6570\u3002 \u51fd\u6570\u7684\u53e6\u5916\u4e00\u4e2a\u540d\u79f0\u662f\u201c callable unit \u201d\uff0c\u201ccallable unit\u201d\uff0c\u5176\u5b9e\u8fd9\u4e5f\u8bf4\u660e\u4e86\u5b83\u662fthread\u7684unit of user-defined action\u3002 pthread_create \u7684\u5165\u53c2 start_routine \u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u8bf4\u660ethread\u7684unit of user-defined action\u662f\u51fd\u6570\u3002 Linux OS\u7684 clone \u7684\u5165\u53c2 fn \u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u8bf4\u660ethread\u7684unit of user-defined action\u662f\u51fd\u6570\u3002 exec \u7cfb\u5217\u51fd\u6570\u7684\u53c2\u6570 pathname \u6307\u5b9a\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5165\u53e3\u662fmain\u51fd\u6570\uff0c\u5176\u5b9e\u8fd9\u76f8\u5f53\u4e8e\u4e0a\u9762\u7684 pthread_create \u548c clone \u7684\u5165\u53c2\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002","title":"Process/thread\u7684unit of user-defined action"},{"location":"Post/Unit/#_1","text":"\u4e00\u4e2a\u51fd\u6570\u662f\u7531\u591a\u4e2astatement\u7ec4\u6210\uff0c\u4e00\u4e2astatement\u6709\u591a\u4e2ainstruction\u7ec4\u6210\u3002thread\u7684\u8fd0\u884c\u5355\u4f4dfunction\u663e\u7136\u5bf9\u5e94\u4e86\u591a\u4e2ainstruction\u3002","title":"\u603b\u7ed3"},{"location":"Post/Unit/#linux-os-kernelunit-of-user-defined-action","text":"Linux OS kernel\u7684unit of user-defined action\u662f\u51fd\u6570\u3002 \u5728\u5de5\u7a0b Linux-OS \u7684 Linux OS kernel is event-driven \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u4e86\uff1a \u57fa\u672c\u4e0a\u6240\u6709\u7684hardware\u90fd\u662f\u901a\u8fc7 interrupt \u6765\u901a\u77e5OS kernel\u7684\uff0c\u7136\u540e\u5176\u5bf9\u5e94\u7684 Interrupt handler \u4f1a\u88ab\u89e6\u53d1\u6267\u884c\uff0c\u4e5f\u5c31\u662fOS kernel\u662f interrupt-driven \u7684 Interrupt handler \u672c\u8d28\u4e0a\u662f\u51fd\u6570\u3002 \u5173\u4e8e\u6b64\u7684\u53e6\u5916\u4e00\u4e2a\u4f8b\u8bc1\u662fsignal handler\uff0csignal handler\u672c\u8d28\u4e0a\u4e5f\u662f\u51fd\u6570\uff0c\u53c2\u89c1 SIGNAL(7) \u3002","title":"Linux OS kernel\u7684unit of user-defined action"},{"location":"Post/Unit/#cpu-access-memoryword","text":"\u53c2\u89c1\u5de5\u7a0b Hardware \u7684 Memory-alignment \u7ae0\u8282\u3002","title":"CPU access memory\u7684\u5355\u4f4d\u662fword"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/","text":"\u5206\u5c42 # \u4e00\u79cd\u5e38\u89c1\u7684\u67b6\u6784\u65b9\u5f0f\u662f\uff1a\u5206\u5c42\uff0c\u5177\u4f53\u53c2\u89c1 abstraction layer \uff0c\u8fd9\u662fabstraction\u5728architecture\u9886\u57df\u7684\u4e00\u4e2a\u4f53\u73b0\u3002\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684 abstraction layer \u601d\u60f3\u7684\u53ef\u8c13\u7531\u6765\u5df2\u4e45\u4e14\u5f71\u54cd\u6df1\u8fdc\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u65b9\u65b9\u9762\u9762\u6211\u4eec\u90fd\u80fd\u591f\u770b\u5230\u5b83\u7684\u8eab\u5f71\u548c\u5f71\u54cd\uff0c\u540e\u9762\u4e3a\u4e86\u63cf\u8ff0\u4fbf\u5229\uff0c\u5c06 abstraction layer \u601d\u60f3\u7b80\u79f0\u4e3a \u5206\u5c42\u601d\u60f3 \u3002\u6700\u80fd\u591f\u4f53\u73b0 \u5206\u5c42\u601d\u60f3 \u7684\u4e00\u4e2a\u8bcd\u662f\uff1ahierarchy\uff08\u5c42\u7ea7\uff09\uff0c\u7ef4\u57fa\u767e\u79d1\u7684 hierarchy \u5bf9hierarchy\u7684\u603b\u7ed3\u662f\u975e\u5e38\u8be6\u7ec6\u7684\uff0c\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0chierarchy\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff1a Hierarchy is an important concept in a wide variety of fields, such as philosophy , mathematics , computer science , organizational theory , systems theory , and the social sciences (especially political philosophy ). \u5176\u5b9e\u4ece\u8fd9\u4e0a\u8ff0\u8bba\u65ad\u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u5012\u63a8\u51fa\uff1a\u5206\u5c42\u601d\u60f3\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u5176\u5b9e\u5982\u679c\u5f80\u66f4\u6df1\u5c42\u6b21\u53bb\u601d\u8003\u7684\u8bdd\uff0c\u5206\u5c42\u601d\u60f3\u5176\u5b9e\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u601d\u7ef4\uff0c\u5173\u4e8e\u8fd9\u4e2a\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u9605\u8bfb\u3002 \u4e0b\u9762\u662f\u6211\u6240\u603b\u7ed3\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\u4e2d\u5206\u5c42\u7684\u5e94\u7528\uff1a Architecture # \u4f5c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u5e38\u5e38\u542c\u5230architecture\uff08\u67b6\u6784\uff09\u8fd9\u4e2a\u8bcd\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u9ad8\u7aef\u804c\u4f4d\u53eb\u505aarchitect\uff08\u67b6\u6784\u5e08\uff09\u3002\u8f6f\u4ef6\u6216\u7cfb\u7edf\u7684\u67b6\u6784\u4e3a\u6211\u4eec\u63cf\u8ff0\u7684\u7cfb\u7edf\u7684\u7ed3\u6784\u3001\u7ec4\u6210\u90e8\u5206\u3001\u5404\u90e8\u5206\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5206\u5c42\u601d\u60f3\u5bf9architecture\u5f71\u54cd\u4f53\u73b0\u5728\u5404\u79cd\u5404\u6837\u7684 \u5c42\u6b21\u5316\u7ed3\u6784 \uff0c\u6bd4\u5982 Architecture of computing system # \u53c2\u89c1\uff1a Architecture-of-computing-system \u8ba1\u7b97\u673a\u7cfb\u7edf\u5982\u6b64\u590d\u6742\uff0c\u5404\u4e2a\u5c42\u6b21\u4e4b\u95f4\u53ea\u9700\u8981\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u5c31\u53ef\u4ee5\u8fdb\u884c\u4ea4\u4e92\uff0c\u5b8c\u5168\u65e0\u9700\u4e86\u89e3\u5bf9\u65b9\u5177\u4f53\u7684\u7ec6\u8282\u3002\u8bf7\u60f3\u60f3\uff0c\u5982\u679c\u4e0d\u8fd9\u6837\u7684\u8bdd\uff0c\u5219\u591a\u4e48\u590d\u6742\u3002\u62bd\u8c61\u7b80\u5316\u4e86\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u5e26\u6765\u4e86\u5206\u5de5\uff0c\u5e26\u6765\u4e86\u6548\u7387\u3002\u62bd\u8c61\uff0c\u63a9\u76d6\u7ec6\u8282\uff0c\u63d0\u9ad8\u4e86\u6613\u7528\u6027\u3002 Architecture of compiler # \u53c2\u89c1\uff1a The Structure of a Compiler \u4e2d\u95f4\u8868\u793a # \u7f16\u8bd1\u5668\u5206\u4e3a\u524d\u6bb5\u548c\u540e\u7aef\uff0c\u4e2d\u95f4\u8868\u793a\u7406\u89e3\u524d\u6bb5\u4e0e\u540e\u7aef\u3002\u4e5f\u53ef\u4ee5\u8bf4\u4e2d\u95f4\u8868\u793a\u662f\u4e24\u8005\u4e4b\u95f4\u7684\u63a5\u53e3\u3002 Communication protocol # \u5404\u79cd\u5404\u6837\u7684\u901a\u4fe1\u534f\u8bae\u53ef\u4ee5\u8bf4\u662f\u6700\u6700\u80fd\u591f\u4f53\u73b0\u5206\u5c42\u601d\u60f3\u7684\u4e86\uff0c\u5728 Communication protocol \u7684 Protocol design \u7ae0\u8282\u4e2d\u5c31\u603b\u7ed3\u4e86\u534f\u8bae\u6d89\u53ca\u7684\u601d\u60f3\uff1a Layering \u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53c2\u52a0\uff1a Hierarchical internetworking model \u3002 \u4e0b\u9762\u5217\u4e3e\u4e86\u51e0\u4e2a\u5e38\u89c1\u534f\u8bae\uff0c\u5b83\u4eec\u90fd\u80fd\u975e\u5e38\u597d\u5730\u4f53\u73b0\u4e86\u5206\u5c42\u601d\u60f3\uff1a OSI model # OSI model \u53ef\u4ee5\u8bf4\u662f\u5206\u5c42\u601d\u60f3\u7684\u6700\u4f73\u4f53\u73b0\uff0c\u4e0b\u9762\u662f\u6458\u81ea OSI model \uff1a The Open Systems Interconnection model ( OSI model ) is a conceptual model that characterizes and standardizes the communication functions of a telecommunication or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard communication protocols . The model partitions a communication system into abstraction layers . The original version of the model had seven layers. A layer serves the layer above it and is served by the layer below it. \u4e0a\u9762\u8fd9\u6bb5\u8bdd\u5176\u5b9e\u63cf\u8ff0\u4e86 \u5206\u5c42 \u6240\u5e26\u6765\u7684\u597d\u5904\uff1ainteroperability \uff0c\u5404\u5c42\u4e4b\u95f4\u4e92\u76f8\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ed3\u6784\u548c\u6280\u672f\uff09\uff0c\u901a\u8fc7\u7ea6\u5b9a\u597d\u7684 communication protocols \u8fdb\u884c\u4ea4\u4e92\u3002 OSI model by layer layer 7 Application layer 6 Presentation layer 5 Session layer 4 Transport layer 3 Network layer 2 Data link layer 1 Physical layer Internet protocol suite # Database abstraction layer # \u8fd9\u6bb5\u63cf\u8ff0\u975e\u5e38\u597d\uff1a A database abstraction layer ( DBAL or DAL ) is an application programming interface which unifies the communication between a computer application and databases such as SQL Server , DB2 , MySQL , PostgreSQL , Oracle or SQLite . \u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003 # \u95ee\u9898\u51fa\u73b0\u5728\u54ea\u4e2a\u5c42\u6b21 # \u5728\u591a\u5c42\u6b21\u4e2d\uff0c\u5f53\u51fa\u73b0\u95ee\u9898\u662f\uff0c\u5c31\u9700\u8981\u8fdb\u884c\u8fd9\u6837\u7684\u8003\u8651\u3002 \u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u501f\u7528\u6982\u5ff5 # \u5f53\u6211\u4eec\u7ad9\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e0d\u540c\u5c42\u6b21\u6765\u601d\u8003\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e0d\u540c\u5c42\u6b21\u4e4b\u95f4\u4f1a\u5b58\u5728\u7740\u5927\u91cf\u7684\u76f8\u4e92\u6982\u5ff5\u501f\u7528\uff0c\u6216\u8005\u8bf4\uff0c\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u672f\u8bed\u6765\u8868\u793a\u7c7b\u4f3c\u7684\u6982\u5ff5\u3002\u6bd4\u5982\uff1a \u6848\u4f8b # \u4e0d\u540c\u5c42\u6b21\u63cf\u8ff0\u672c\u8d28\u4e0a\u975e\u5e38\u7c7b\u4f3c\u7684\u4e8b\u52a1\u6709\u7740\u4e0d\u540c\u7684\u8bf4\u6cd5\uff0c\u6bd4\u5982\u5728 Linux-OS-kernel-is-event-driven \u4e2d\u603b\u7ed3\u7684\uff1a Hardware Software Interrupt-driven Event-driven architecture / Event-driven programming Interrupt Event (computing) Interrupt handler / Interrupt service routine Event handler / Callback function \u5404\u79cdinterrupt\u5c31\u662f\u6240\u8c13\u7684event\u3002 \u6848\u4f8b # linux\u7684 epoll \u7684 triggering mode \u501f\u7528\u4e86 Interrupt \u7684 triggering methods \u6982\u5ff5\u3002 \u6848\u4f8b # \u5728 Understanding.The.Linux.kernel.3rd.Edition \u7684Chapter 4. Interrupt\u5b9a\u4e49\u4e86Synchronous interrupt\u7684\u6982\u5ff5\uff0c\u5b83\u662fHardware\u5c42\u7684\u6982\u5ff5\uff0c\u5728OS\u5c42\uff0c\u4e0e\u5b83\u5bf9\u5e94\u7684\u662f Signal \u3002 \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u8bed\u8a00 # \u5728\u4e0a\u4e00\u8282\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u5df2\u7ecf\u5bf9\u6b64\u8fdb\u884c\u4e86\u5206\u6790\u3002 \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\uff1a Very high-level programming language \u3001\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 High-level programming language \uff09\u3001\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 Low-level programming language \uff09\uff0c \u4e0d\u540c\u5c42\u6b21\u7684\u8bed\u8a00\u4e4b\u95f4\u7684\u8f6c\u6362 # \u6bd4\u5982compiler\u5c31\u662f\u6267\u884c\u8fd9\u4e2a\u76ee\u7684\u7684\u3002\u53c2\u89c1\u9f99\u4e66 Chapter 7 Run-Time Environments \u3002 API VS ABI # \u5f53\u6211\u4eec\u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003ABI\u548cAPI\u65f6\uff0c\u5c31\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u4e24\u8005\u7684\u533a\u5206\u662f\u975e\u5e38\u5bb9\u6613\u7684\uff1a\u5b83\u4eec\u662f\u4e0d\u540c\u7684language\u7684 interface \u3002API\u662fhight-level programming language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \uff0c\u800cABI\u5219\u662fmachine language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b63\u5982\u5728\u4e0a\u4e00\u8282\u5728\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u6240\u63d0\u53ca\u7684\uff1a \u4e0d\u7ba1\u591a\u4e48\u9ad8\u7ea7\u7684\u8bed\u8a00\u6700\u7ec8\u90fd\u9700\u8981\u88ab\u7ffb\u8bd1\uff08compiler\u6216interpreter\uff09\u4e3a machine language \u624d\u80fd\u591f\u88ab\u673a\u5668\u6267\u884c \u6240\u4ee5\u9700\u8981\u5b9a\u4e49hight-level programming language\u4e2d\u7684\u5404\u79cd\u6982\u5ff5\u5982\u4f55\u7ffb\u8bd1\u4e3amachine language\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u662fABI\u4e2d\u6240\u5305\u542b\u7684\uff0c\u6bd4\u5982calling convention\u7b49\u3002 Linux kernel and GNU C Library define the Linux API . After compilation, the binaries offer an ABI; keeping this ABI stable over a long time is important for ISVs . \u603b\u7ed3 # \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u5206\u5c42\uff0c\u62bd\u8c61\uff0c\u63a5\u53e3\uff0c\u8fd9\u8bcd\u53ef\u4ee5\u770b\u505a\u662f\u540c\u4e49\u8bcd\u3002 \u5206\u5c42\u5e26\u6765\u7684\u4ef7\u503c # \u5206\u5c42\u5e26\u6765\u89e3\u8026\uff0c\u5206\u5c42\u5e26\u6765\u7b80\u5316 Separation of concerns # Portability # \u5982 Diversity of operating systems and portability \u62bd\u8c61\u5c42\u5e26\u6765\u79fb\u690d\u6027 \u5206\u5c42\u5e26\u6765\u5b89\u5168 # \u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\uff1a kernel space . user space . This separation prevents user data and kernel data from interfering with each other and causing instability and slowness, as well as preventing malfunctioning application programs from crashing the entire operating system. \u5206\u5c42\u5e26\u6765\u9694\u79bb\uff0c\u8fdb\u800c\u5e26\u6765\u5b89\u5168 \u5206\u5c42\u5e26\u6765 modularity # \u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\u3002 \u5206\u5c42\u4e0e\u6808\u3001pipeline # \u4e00\u822c\uff0c\u4f1a\u5c06\u6309\u7167\u5206\u5c42\u8bbe\u8ba1\u7684\u7cfb\u7edf\u79f0\u4e3a\u6808\uff0c\u6bd4\u5982\u534f\u8bae\u6808\uff0c\u53e6\u5916\u4e00\u4e2a\u4e0e\u6b64\u76f8\u5173\u7684\u8bcd\u662fpipeline\u3002\u663e\u7136\uff0c\u65e0\u8bbapipeline\u8fd8\u662f\u6808\uff0c\u5b83\u4eec\u90fd\u662f\u7ebf\u6027\u7ed3\u6784\uff0c\u8fd9\u4e0e\u5206\u5c42\u7ed3\u6784\u662f\u7ebf\u6027\u7ed3\u6784\u662f\u76f8\u5951\u5408\u7684\u3002 See also: Solution stack See also: # Abstraction (computer science) Abstraction layer Layer (object-oriented design)","title":"Abstraction-and-architecture-and-layer"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_1","text":"\u4e00\u79cd\u5e38\u89c1\u7684\u67b6\u6784\u65b9\u5f0f\u662f\uff1a\u5206\u5c42\uff0c\u5177\u4f53\u53c2\u89c1 abstraction layer \uff0c\u8fd9\u662fabstraction\u5728architecture\u9886\u57df\u7684\u4e00\u4e2a\u4f53\u73b0\u3002\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684 abstraction layer \u601d\u60f3\u7684\u53ef\u8c13\u7531\u6765\u5df2\u4e45\u4e14\u5f71\u54cd\u6df1\u8fdc\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u65b9\u65b9\u9762\u9762\u6211\u4eec\u90fd\u80fd\u591f\u770b\u5230\u5b83\u7684\u8eab\u5f71\u548c\u5f71\u54cd\uff0c\u540e\u9762\u4e3a\u4e86\u63cf\u8ff0\u4fbf\u5229\uff0c\u5c06 abstraction layer \u601d\u60f3\u7b80\u79f0\u4e3a \u5206\u5c42\u601d\u60f3 \u3002\u6700\u80fd\u591f\u4f53\u73b0 \u5206\u5c42\u601d\u60f3 \u7684\u4e00\u4e2a\u8bcd\u662f\uff1ahierarchy\uff08\u5c42\u7ea7\uff09\uff0c\u7ef4\u57fa\u767e\u79d1\u7684 hierarchy \u5bf9hierarchy\u7684\u603b\u7ed3\u662f\u975e\u5e38\u8be6\u7ec6\u7684\uff0c\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0chierarchy\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff1a Hierarchy is an important concept in a wide variety of fields, such as philosophy , mathematics , computer science , organizational theory , systems theory , and the social sciences (especially political philosophy ). \u5176\u5b9e\u4ece\u8fd9\u4e0a\u8ff0\u8bba\u65ad\u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u5012\u63a8\u51fa\uff1a\u5206\u5c42\u601d\u60f3\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u5176\u5b9e\u5982\u679c\u5f80\u66f4\u6df1\u5c42\u6b21\u53bb\u601d\u8003\u7684\u8bdd\uff0c\u5206\u5c42\u601d\u60f3\u5176\u5b9e\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u601d\u7ef4\uff0c\u5173\u4e8e\u8fd9\u4e2a\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u9605\u8bfb\u3002 \u4e0b\u9762\u662f\u6211\u6240\u603b\u7ed3\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\u4e2d\u5206\u5c42\u7684\u5e94\u7528\uff1a","title":"\u5206\u5c42"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#architecture","text":"\u4f5c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u5e38\u5e38\u542c\u5230architecture\uff08\u67b6\u6784\uff09\u8fd9\u4e2a\u8bcd\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u9ad8\u7aef\u804c\u4f4d\u53eb\u505aarchitect\uff08\u67b6\u6784\u5e08\uff09\u3002\u8f6f\u4ef6\u6216\u7cfb\u7edf\u7684\u67b6\u6784\u4e3a\u6211\u4eec\u63cf\u8ff0\u7684\u7cfb\u7edf\u7684\u7ed3\u6784\u3001\u7ec4\u6210\u90e8\u5206\u3001\u5404\u90e8\u5206\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5206\u5c42\u601d\u60f3\u5bf9architecture\u5f71\u54cd\u4f53\u73b0\u5728\u5404\u79cd\u5404\u6837\u7684 \u5c42\u6b21\u5316\u7ed3\u6784 \uff0c\u6bd4\u5982","title":"Architecture"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#architecture-of-computing-system","text":"\u53c2\u89c1\uff1a Architecture-of-computing-system \u8ba1\u7b97\u673a\u7cfb\u7edf\u5982\u6b64\u590d\u6742\uff0c\u5404\u4e2a\u5c42\u6b21\u4e4b\u95f4\u53ea\u9700\u8981\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u5c31\u53ef\u4ee5\u8fdb\u884c\u4ea4\u4e92\uff0c\u5b8c\u5168\u65e0\u9700\u4e86\u89e3\u5bf9\u65b9\u5177\u4f53\u7684\u7ec6\u8282\u3002\u8bf7\u60f3\u60f3\uff0c\u5982\u679c\u4e0d\u8fd9\u6837\u7684\u8bdd\uff0c\u5219\u591a\u4e48\u590d\u6742\u3002\u62bd\u8c61\u7b80\u5316\u4e86\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u5e26\u6765\u4e86\u5206\u5de5\uff0c\u5e26\u6765\u4e86\u6548\u7387\u3002\u62bd\u8c61\uff0c\u63a9\u76d6\u7ec6\u8282\uff0c\u63d0\u9ad8\u4e86\u6613\u7528\u6027\u3002","title":"Architecture of computing system"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#architecture-of-compiler","text":"\u53c2\u89c1\uff1a The Structure of a Compiler","title":"Architecture of compiler"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_2","text":"\u7f16\u8bd1\u5668\u5206\u4e3a\u524d\u6bb5\u548c\u540e\u7aef\uff0c\u4e2d\u95f4\u8868\u793a\u7406\u89e3\u524d\u6bb5\u4e0e\u540e\u7aef\u3002\u4e5f\u53ef\u4ee5\u8bf4\u4e2d\u95f4\u8868\u793a\u662f\u4e24\u8005\u4e4b\u95f4\u7684\u63a5\u53e3\u3002","title":"\u4e2d\u95f4\u8868\u793a"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#communication-protocol","text":"\u5404\u79cd\u5404\u6837\u7684\u901a\u4fe1\u534f\u8bae\u53ef\u4ee5\u8bf4\u662f\u6700\u6700\u80fd\u591f\u4f53\u73b0\u5206\u5c42\u601d\u60f3\u7684\u4e86\uff0c\u5728 Communication protocol \u7684 Protocol design \u7ae0\u8282\u4e2d\u5c31\u603b\u7ed3\u4e86\u534f\u8bae\u6d89\u53ca\u7684\u601d\u60f3\uff1a Layering \u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53c2\u52a0\uff1a Hierarchical internetworking model \u3002 \u4e0b\u9762\u5217\u4e3e\u4e86\u51e0\u4e2a\u5e38\u89c1\u534f\u8bae\uff0c\u5b83\u4eec\u90fd\u80fd\u975e\u5e38\u597d\u5730\u4f53\u73b0\u4e86\u5206\u5c42\u601d\u60f3\uff1a","title":"Communication protocol"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#osi-model","text":"OSI model \u53ef\u4ee5\u8bf4\u662f\u5206\u5c42\u601d\u60f3\u7684\u6700\u4f73\u4f53\u73b0\uff0c\u4e0b\u9762\u662f\u6458\u81ea OSI model \uff1a The Open Systems Interconnection model ( OSI model ) is a conceptual model that characterizes and standardizes the communication functions of a telecommunication or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard communication protocols . The model partitions a communication system into abstraction layers . The original version of the model had seven layers. A layer serves the layer above it and is served by the layer below it. \u4e0a\u9762\u8fd9\u6bb5\u8bdd\u5176\u5b9e\u63cf\u8ff0\u4e86 \u5206\u5c42 \u6240\u5e26\u6765\u7684\u597d\u5904\uff1ainteroperability \uff0c\u5404\u5c42\u4e4b\u95f4\u4e92\u76f8\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ed3\u6784\u548c\u6280\u672f\uff09\uff0c\u901a\u8fc7\u7ea6\u5b9a\u597d\u7684 communication protocols \u8fdb\u884c\u4ea4\u4e92\u3002 OSI model by layer layer 7 Application layer 6 Presentation layer 5 Session layer 4 Transport layer 3 Network layer 2 Data link layer 1 Physical layer","title":"OSI model"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#internet-protocol-suite","text":"","title":"Internet protocol suite"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#database-abstraction-layer","text":"\u8fd9\u6bb5\u63cf\u8ff0\u975e\u5e38\u597d\uff1a A database abstraction layer ( DBAL or DAL ) is an application programming interface which unifies the communication between a computer application and databases such as SQL Server , DB2 , MySQL , PostgreSQL , Oracle or SQLite .","title":"Database abstraction layer"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_3","text":"","title":"\u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_4","text":"\u5728\u591a\u5c42\u6b21\u4e2d\uff0c\u5f53\u51fa\u73b0\u95ee\u9898\u662f\uff0c\u5c31\u9700\u8981\u8fdb\u884c\u8fd9\u6837\u7684\u8003\u8651\u3002","title":"\u95ee\u9898\u51fa\u73b0\u5728\u54ea\u4e2a\u5c42\u6b21"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_5","text":"\u5f53\u6211\u4eec\u7ad9\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e0d\u540c\u5c42\u6b21\u6765\u601d\u8003\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e0d\u540c\u5c42\u6b21\u4e4b\u95f4\u4f1a\u5b58\u5728\u7740\u5927\u91cf\u7684\u76f8\u4e92\u6982\u5ff5\u501f\u7528\uff0c\u6216\u8005\u8bf4\uff0c\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u672f\u8bed\u6765\u8868\u793a\u7c7b\u4f3c\u7684\u6982\u5ff5\u3002\u6bd4\u5982\uff1a","title":"\u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u501f\u7528\u6982\u5ff5"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_6","text":"\u4e0d\u540c\u5c42\u6b21\u63cf\u8ff0\u672c\u8d28\u4e0a\u975e\u5e38\u7c7b\u4f3c\u7684\u4e8b\u52a1\u6709\u7740\u4e0d\u540c\u7684\u8bf4\u6cd5\uff0c\u6bd4\u5982\u5728 Linux-OS-kernel-is-event-driven \u4e2d\u603b\u7ed3\u7684\uff1a Hardware Software Interrupt-driven Event-driven architecture / Event-driven programming Interrupt Event (computing) Interrupt handler / Interrupt service routine Event handler / Callback function \u5404\u79cdinterrupt\u5c31\u662f\u6240\u8c13\u7684event\u3002","title":"\u6848\u4f8b"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_7","text":"linux\u7684 epoll \u7684 triggering mode \u501f\u7528\u4e86 Interrupt \u7684 triggering methods \u6982\u5ff5\u3002","title":"\u6848\u4f8b"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_8","text":"\u5728 Understanding.The.Linux.kernel.3rd.Edition \u7684Chapter 4. Interrupt\u5b9a\u4e49\u4e86Synchronous interrupt\u7684\u6982\u5ff5\uff0c\u5b83\u662fHardware\u5c42\u7684\u6982\u5ff5\uff0c\u5728OS\u5c42\uff0c\u4e0e\u5b83\u5bf9\u5e94\u7684\u662f Signal \u3002","title":"\u6848\u4f8b"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_9","text":"\u5728\u4e0a\u4e00\u8282\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u5df2\u7ecf\u5bf9\u6b64\u8fdb\u884c\u4e86\u5206\u6790\u3002 \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\uff1a Very high-level programming language \u3001\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 High-level programming language \uff09\u3001\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 Low-level programming language \uff09\uff0c","title":"\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u8bed\u8a00"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_10","text":"\u6bd4\u5982compiler\u5c31\u662f\u6267\u884c\u8fd9\u4e2a\u76ee\u7684\u7684\u3002\u53c2\u89c1\u9f99\u4e66 Chapter 7 Run-Time Environments \u3002","title":"\u4e0d\u540c\u5c42\u6b21\u7684\u8bed\u8a00\u4e4b\u95f4\u7684\u8f6c\u6362"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#api-vs-abi","text":"\u5f53\u6211\u4eec\u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003ABI\u548cAPI\u65f6\uff0c\u5c31\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u4e24\u8005\u7684\u533a\u5206\u662f\u975e\u5e38\u5bb9\u6613\u7684\uff1a\u5b83\u4eec\u662f\u4e0d\u540c\u7684language\u7684 interface \u3002API\u662fhight-level programming language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \uff0c\u800cABI\u5219\u662fmachine language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b63\u5982\u5728\u4e0a\u4e00\u8282\u5728\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u6240\u63d0\u53ca\u7684\uff1a \u4e0d\u7ba1\u591a\u4e48\u9ad8\u7ea7\u7684\u8bed\u8a00\u6700\u7ec8\u90fd\u9700\u8981\u88ab\u7ffb\u8bd1\uff08compiler\u6216interpreter\uff09\u4e3a machine language \u624d\u80fd\u591f\u88ab\u673a\u5668\u6267\u884c \u6240\u4ee5\u9700\u8981\u5b9a\u4e49hight-level programming language\u4e2d\u7684\u5404\u79cd\u6982\u5ff5\u5982\u4f55\u7ffb\u8bd1\u4e3amachine language\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u662fABI\u4e2d\u6240\u5305\u542b\u7684\uff0c\u6bd4\u5982calling convention\u7b49\u3002 Linux kernel and GNU C Library define the Linux API . After compilation, the binaries offer an ABI; keeping this ABI stable over a long time is important for ISVs .","title":"API VS ABI"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_11","text":"\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u5206\u5c42\uff0c\u62bd\u8c61\uff0c\u63a5\u53e3\uff0c\u8fd9\u8bcd\u53ef\u4ee5\u770b\u505a\u662f\u540c\u4e49\u8bcd\u3002","title":"\u603b\u7ed3"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_12","text":"\u5206\u5c42\u5e26\u6765\u89e3\u8026\uff0c\u5206\u5c42\u5e26\u6765\u7b80\u5316","title":"\u5206\u5c42\u5e26\u6765\u7684\u4ef7\u503c"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#separation-of-concerns","text":"","title":"Separation of concerns"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#portability","text":"\u5982 Diversity of operating systems and portability \u62bd\u8c61\u5c42\u5e26\u6765\u79fb\u690d\u6027","title":"Portability"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#_13","text":"\u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\uff1a kernel space . user space . This separation prevents user data and kernel data from interfering with each other and causing instability and slowness, as well as preventing malfunctioning application programs from crashing the entire operating system. \u5206\u5c42\u5e26\u6765\u9694\u79bb\uff0c\u8fdb\u800c\u5e26\u6765\u5b89\u5168","title":"\u5206\u5c42\u5e26\u6765\u5b89\u5168"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#modularity","text":"\u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\u3002","title":"\u5206\u5c42\u5e26\u6765modularity"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#pipeline","text":"\u4e00\u822c\uff0c\u4f1a\u5c06\u6309\u7167\u5206\u5c42\u8bbe\u8ba1\u7684\u7cfb\u7edf\u79f0\u4e3a\u6808\uff0c\u6bd4\u5982\u534f\u8bae\u6808\uff0c\u53e6\u5916\u4e00\u4e2a\u4e0e\u6b64\u76f8\u5173\u7684\u8bcd\u662fpipeline\u3002\u663e\u7136\uff0c\u65e0\u8bbapipeline\u8fd8\u662f\u6808\uff0c\u5b83\u4eec\u90fd\u662f\u7ebf\u6027\u7ed3\u6784\uff0c\u8fd9\u4e0e\u5206\u5c42\u7ed3\u6784\u662f\u7ebf\u6027\u7ed3\u6784\u662f\u76f8\u5951\u5408\u7684\u3002 See also: Solution stack","title":"\u5206\u5c42\u4e0e\u6808\u3001pipeline"},{"location":"Post/Abstraction/Abstraction-and-architecture-and-layer/#see-also","text":"Abstraction (computer science) Abstraction layer Layer (object-oriented design)","title":"See also:"},{"location":"Post/Abstraction/Abstraction-and-architecture/","text":"Abstraction and architecture # \u672c\u8282\u5bf9\u4e0a\u4e00\u8282\u7684Abstraction in architecture\u4e2d\u6240\u63d0\u53ca\u5185\u5bb9\u8fdb\u884c\u8be6\u7ec6\u8bba\u8ff0\u3002 \u5728\u8fdb\u884c\u7cfb\u7edf\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c loose coupling \u662f\u67b6\u6784\u5e08\u7684\u8ffd\u6c42\u76ee\u6807\uff0c\u4e3a\u6b64\uff0c\u67b6\u6784\u5e08\u4eec\u5f80\u5f80\u8fdb\u884c\u5206\u89e3\uff0c\u6bd4\u5982\u5c06\u7cfb\u7edf\u5206\u89e3\u4e3a\u591a\u4e2a components \uff0c\u7136\u540e\u5404 components \u62bd\u8c61\u51fa \u63a5\u53e3 \uff0c\u5b83\u4eec\u4e4b\u95f4\u5c31\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\uff0c\u663e\u7136\uff0c\u63a5\u53e3\u5c31\u662f\u5bf9\u529f\u80fd\u7684\u62bd\u8c61\u63cf\u8ff0\u3002\u5404 components \u5f7c\u6b64\u76f8\u4e92\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ec6\u8282\uff09\uff0c\u901a\u8fc7 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\u3002 \u5206\u5c42 # \u4e00\u79cd\u5e38\u89c1\u7684\u5206\u89e3\u65b9\u5f0f\u662f\uff1a\u5206\u5c42\u3002\u8fd9\u79cd\u67b6\u6784\u65b9\u5f0f\u666e\u904d\u5b58\u5728\uff0c\u5728 \u4e0b\u4e00\u7bc7 \u8fdb\u884c\u4e13\u95e8\u4ecb\u7ecd\u3002 \u63a5\u53e3 # \u4ece\u4e0a\u7bc7\u5f00\u59cb\uff0c\u6211\u4eec\u4e00\u76f4\u90fd\u5728\u63a5\u89e6\u201c\u63a5\u53e3\u201d\u8fd9\u4e2a\u8bcd\u8bed\uff0c\u5728\u4e0a\u7bc7\u4e2d\uff0c\u6211\u628a\u201c\u63a5\u53e3\u201d\u5b9a\u4e49\u4e3a\uff1a\u5bf9\u62bd\u8c61\u7684\u63cf\u8ff0\u3002\u6709\u5fc5\u8981\u770b\u770b\u7ef4\u57fa\u767e\u79d1\u7684 Interface (computing) \uff0c\u5b83\u603b\u7ed3\u5730\u6bd4\u8f83\u597d\u3002 \u4ee5\u4e0b\u4e24\u7c7b\u63a5\u53e3\u662fsoftware engineer\u7ecf\u5e38\u4f1a\u4f7f\u7528\u7684\u4e24\u4e2a\u6982\u5ff5\uff1a Application programming interface aka API Application binary interface aka ABI \u5728 \u4e0b\u4e00\u7bc7 \u7684 \u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003 \u8282\u4f1a\u5bf9\u4e24\u8005\u8fdb\u884c\u533a\u5206\u3002","title":"Abstraction-and-architecture"},{"location":"Post/Abstraction/Abstraction-and-architecture/#abstraction-and-architecture","text":"\u672c\u8282\u5bf9\u4e0a\u4e00\u8282\u7684Abstraction in architecture\u4e2d\u6240\u63d0\u53ca\u5185\u5bb9\u8fdb\u884c\u8be6\u7ec6\u8bba\u8ff0\u3002 \u5728\u8fdb\u884c\u7cfb\u7edf\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c loose coupling \u662f\u67b6\u6784\u5e08\u7684\u8ffd\u6c42\u76ee\u6807\uff0c\u4e3a\u6b64\uff0c\u67b6\u6784\u5e08\u4eec\u5f80\u5f80\u8fdb\u884c\u5206\u89e3\uff0c\u6bd4\u5982\u5c06\u7cfb\u7edf\u5206\u89e3\u4e3a\u591a\u4e2a components \uff0c\u7136\u540e\u5404 components \u62bd\u8c61\u51fa \u63a5\u53e3 \uff0c\u5b83\u4eec\u4e4b\u95f4\u5c31\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\uff0c\u663e\u7136\uff0c\u63a5\u53e3\u5c31\u662f\u5bf9\u529f\u80fd\u7684\u62bd\u8c61\u63cf\u8ff0\u3002\u5404 components \u5f7c\u6b64\u76f8\u4e92\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ec6\u8282\uff09\uff0c\u901a\u8fc7 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\u3002","title":"Abstraction and architecture"},{"location":"Post/Abstraction/Abstraction-and-architecture/#_1","text":"\u4e00\u79cd\u5e38\u89c1\u7684\u5206\u89e3\u65b9\u5f0f\u662f\uff1a\u5206\u5c42\u3002\u8fd9\u79cd\u67b6\u6784\u65b9\u5f0f\u666e\u904d\u5b58\u5728\uff0c\u5728 \u4e0b\u4e00\u7bc7 \u8fdb\u884c\u4e13\u95e8\u4ecb\u7ecd\u3002","title":"\u5206\u5c42"},{"location":"Post/Abstraction/Abstraction-and-architecture/#_2","text":"\u4ece\u4e0a\u7bc7\u5f00\u59cb\uff0c\u6211\u4eec\u4e00\u76f4\u90fd\u5728\u63a5\u89e6\u201c\u63a5\u53e3\u201d\u8fd9\u4e2a\u8bcd\u8bed\uff0c\u5728\u4e0a\u7bc7\u4e2d\uff0c\u6211\u628a\u201c\u63a5\u53e3\u201d\u5b9a\u4e49\u4e3a\uff1a\u5bf9\u62bd\u8c61\u7684\u63cf\u8ff0\u3002\u6709\u5fc5\u8981\u770b\u770b\u7ef4\u57fa\u767e\u79d1\u7684 Interface (computing) \uff0c\u5b83\u603b\u7ed3\u5730\u6bd4\u8f83\u597d\u3002 \u4ee5\u4e0b\u4e24\u7c7b\u63a5\u53e3\u662fsoftware engineer\u7ecf\u5e38\u4f1a\u4f7f\u7528\u7684\u4e24\u4e2a\u6982\u5ff5\uff1a Application programming interface aka API Application binary interface aka ABI \u5728 \u4e0b\u4e00\u7bc7 \u7684 \u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003 \u8282\u4f1a\u5bf9\u4e24\u8005\u8fdb\u884c\u533a\u5206\u3002","title":"\u63a5\u53e3"},{"location":"Post/Abstraction/Abstraction-and-model/","text":"Abstraction and model # Conceptual model \uff1a A conceptual model is a representation of a system, made of the composition of concepts which are used to help people know , understand , or simulate a subject the model represents. Conceptual model \u662f\u5bf9concept\uff08\u901a\u8fc7abstraction\u521b\u5efa\u7684\uff09\u548c\u5176relation\u7684\u63cf\u8ff0\uff08\u5176\u5b9e\u5b83\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u8fc7\u7a0b\uff09\uff0c\u5b83\u662f\u5bf9\u539f\u7406\u7684\u63cf\u8ff0\uff0c\u5b83\u6ca1\u6709\u8fbe\u5230\u5b9e\u73b0\u5c42\u9762\uff0c\u5b83\u6307\u5bfc\u7740\u5b9e\u73b0\u3002\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\uff0c\u6709\u7740\u975e\u5e38\u591a\u8457\u540d\u7684 conceptual model \u3002\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u56de\u987e\u5b66\u4e60\u751f\u6daf\uff0c\u6559\u6750\u5f80\u5f80\u662f\u5148\u4ece\u7406\u8bba\u6a21\u578b\uff08\u5176\u5b9e\u5c31\u662f\u6982\u5ff5\u6a21\u578b\uff09\u5f00\u59cb\u8bb2\u8d77\uff0c\u540e\u9762\u518d\u6765\u8bb2\u8ff0\u5b9e\u73b0\uff0c\u56e0\u4e3a\u7406\u8bba\u6a21\u578b\u5254\u9664\u4e86\u5f88\u591a\u7ec6\u8282\uff0c\u800c\u62bd\u8c61\u51fa\u6765\u6700\u6700\u672c\u8d28\u7684\u5185\u5bb9\uff0c\u6613\u4e8e\u7406\u89e3\uff0c\u4e5f\u5c31\u662f Conceptual model \u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u52a0\u8f7b\u677e\u5730 understand \u3002 \u672c\u8282\u603b\u7ed3\u4e00\u4e9b\u5e38\u89c1\u7684model\u3002 Task model # \u4e00\u4e9b\u5173\u4e8etask model\u7684\u5185\u5bb9\uff1a Computer multitasking Task parallelism Task (computing) \u5728task model\u4e2d\uff0c\u5f80\u5f80\u6709 \u7ba1\u7406\u8005 \uff08manager\uff09\u7684\u89d2\u8272\uff0c\u5b83\u8d1f\u8d23 \u63a7\u5236 \u6574\u4e2a\u7cfb\u7edf\uff1a \u8c03\u5ea6task\uff0c\u5177\u5907 \u8c03\u5ea6\u8005 \u7684\u89d2\u8272 \u76d1\u63a7task\uff0c\u5982\u5bf9task\u7684resource usage\u8fdb\u884c\u76d1\u63a7\uff0c\u5177\u5907 \u76d1\u63a7\u8005 \u7684\u89d2\u8272 \u7528\u6237\u53ef\u4ee5\u5411manager\u8bf7\u6c42\u521b\u5efatask\u3001\u64cd\u4f5ctask\u7b49\u3002 \u4f7f\u7528task model\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u7684\u4e00\u4e9b\u95ee\u9898\uff1a task\u662f\u4ec0\u4e48 \u7ba1\u7406\u8005 \u662f\u4ec0\u4e48 task\u7684 \u6267\u884c\u8005 \u662f\u4ec0\u4e48 \u4e0b\u9762\u4f7f\u7528task model\u6765\u63cf\u8ff0\u4e00\u4e9b\u7cfb\u7edf\uff1a Computer multitasking \u4e2d\uff0c \u7ba1\u7406\u8005 \u662foperating system kernel\uff0c\u662ftask\u662fprocess\u6216thread\u7684\u6267\u884c\uff0c\u5b83\u7684\u6267\u884c\u8005\u662fCPU\u3002 celery \u4e2d\uff0ctask\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7531\u7528\u6237\u5b9a\u4e49\u7684task function\uff0c\u6267\u884c\u8005\u5176\u5b9e\u5c31\u662fprocess\u4e86\uff0c \u8c03\u5ea6\u8005 \u5176\u5b9e\u5c31\u662f\u5b83\u7684 task queue \u4e86\uff0c\u663e\u7136\u548cOS kernel\u7684\u8c03\u5ea6\u8005\u76f8\u6bd4\uff0c\u5b83\u7684\u8c03\u5ea6\u7b56\u7565\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002 \u5173\u4e8e\u8c03\u5ea6\u8005\uff0c\u53c2\u89c1\uff1a Scheduling (computing) Context switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c # \u672c\u8282\u6240\u63cf\u8ff0\u7684context switch\u662f\u5e7f\u4e49\u7684context switch\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u5c40\u9650\u4e8eprocess\u7684context switch\u3002\u56e0\u4e3atask model\u4e2d\u5b58\u5728\u7740\u7684\u5e76\u53d1\u6267\u884c\u7684task\uff0c\u5e76\u4e14\u7ba1\u7406\u8005\u4f1a\u8fdb\u884c\u8c03\u5ea6\uff0c\u6240\u4ee5\u5c31\u4f1a\u53d1\u751fcontext switch\uff0c\u6bd4\u5982\uff1a git branch\uff0c Frictionless Context Switching \u6240\u4ee5\uff0ccontext switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c\u3002 \u4e0etask model\u76f8\u5173\u7684\u53e6\u5916\u4e00\u4e2a\u6982\u5ff5\u5c31\u662f\uff1atask manager\uff0c\u6bd4\u5982 Task Manager (Windows) \u3002 Event-driven model # \u4e00\u4e9b\u5173\u4e4eevent-driven model\u7684\u5185\u5bb9\uff1a Event (computing) Event-driven programming Event-driven architecture Event handler Interrupt Interrupt-driven Interrupt handler \u4f7f\u7528event-driven model\u548c\u4e0a\u8ff0\u7684task model\u53ef\u4ee5\u63cf\u8ff0\u592a\u591a\u592a\u591a\u7684software # \u6bd4\u5982\uff1aOS kernel\u5bf9hardware\u7684\u7ba1\u7406\u53ef\u4ee5\u4f7f\u7528event-driven model\u6765\u8fdb\u884c\u63cf\u8ff0\uff1bOS kernel\u5b9e\u73b0multitasking\u53ef\u4ee5\u4f7f\u7528task model\u6765\u8fdb\u884c\u63cf\u8ff0\u3002 Model of computation # Model\u662f\u4e00\u79cd\u7b80\u5316 # Run-time environment # \u9f99\u4e66 \u7684 \u7b2c\u4e03\u7ae0 \u4e2d\u6240\u5b9a\u4e49\u7684run-time environment\u662f\u4e00\u4e2a\u7b80\u5316\u6a21\u578b\uff0c\u5b83\u5ffd\u7565\u4e86\u4e00\u4e9b\u7ec6\u8282\uff0c\u6bd4\u5982multi-thread\uff0c\u800c\u4ec5\u4ec5\u5173\u6ce8\u4e8e\u90e8\u5206\u5185\u5bb9\u3002\u5728\u5bf9\u5176\u8fdb\u884c\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u5176\u4ed6\u7684\u8bf8\u591a\u56e0\u7d20\uff0c\u53c2\u89c1\u5de5\u7a0b Linux-OS \u7684 Process mode: run time environment \uff0c\u5176\u4e2d\u63cf\u8ff0\u4e86\u5b9e\u73b0\u7684\u7ec6\u8282\u3002 Statistical model # As Burnham & Anderson state, \"A model is a simplification or approximation of reality and hence will not reflect all of reality\"\u2014whence the saying \" all models are wrong \". Mathematical model\uff0c\u4e00\u79cd\u66f4\u52a0\u9ad8\u6548\u7684\u63cf\u8ff0\u65b9\u5f0f # \u5728\u5404\u4e2a\u5b66\u79d1\uff0c\u5efa\u7acb mathematical model \u8ba9\u63cf\u8ff0\u66f4\u52a0\u4fbf\u6377\u3001\u66f4\u52a0\u5bb9\u6613\u88ab\u4eba\u7406\u89e3\u3002 \u4e0b\u9762\u662f mathematical model \u7684\u4e00\u4e9b\u4f8b\u5b50\uff1a Stochastic process\uff1ahttps://en.wikipedia.org/wiki/Stochastic_process Statistical model\uff1ahttps://en.wikipedia.org/wiki/Statistical_model Markov model\uff1a https://en.wikipedia.org/wiki/Markov_model https://en.wikipedia.org/wiki/Hidden_Markov_model \u6a21\u578b\u4e0e\u5b9e\u73b0 # example # \u5728\u9f99\u4e66\u7684 \u7b2c\u4e03\u7ae0 \u4e2d\u6240\u8bb2\u8ff0\u7684logical address space\u662f\u4e00\u4e2a\u6982\u5ff5\u6a21\u578b\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u6982\u5ff5\u6a21\u578b\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u65f6\u5019\uff0c\u76ee\u524d\u4e3b\u6d41\u7684\u5b9e\u73b0\u65b9\u5f0f\u662fpaged virtual address space\u3002 See also # Database model Data model","title":"Abstraction-and-model"},{"location":"Post/Abstraction/Abstraction-and-model/#abstraction-and-model","text":"Conceptual model \uff1a A conceptual model is a representation of a system, made of the composition of concepts which are used to help people know , understand , or simulate a subject the model represents. Conceptual model \u662f\u5bf9concept\uff08\u901a\u8fc7abstraction\u521b\u5efa\u7684\uff09\u548c\u5176relation\u7684\u63cf\u8ff0\uff08\u5176\u5b9e\u5b83\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u8fc7\u7a0b\uff09\uff0c\u5b83\u662f\u5bf9\u539f\u7406\u7684\u63cf\u8ff0\uff0c\u5b83\u6ca1\u6709\u8fbe\u5230\u5b9e\u73b0\u5c42\u9762\uff0c\u5b83\u6307\u5bfc\u7740\u5b9e\u73b0\u3002\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\uff0c\u6709\u7740\u975e\u5e38\u591a\u8457\u540d\u7684 conceptual model \u3002\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u56de\u987e\u5b66\u4e60\u751f\u6daf\uff0c\u6559\u6750\u5f80\u5f80\u662f\u5148\u4ece\u7406\u8bba\u6a21\u578b\uff08\u5176\u5b9e\u5c31\u662f\u6982\u5ff5\u6a21\u578b\uff09\u5f00\u59cb\u8bb2\u8d77\uff0c\u540e\u9762\u518d\u6765\u8bb2\u8ff0\u5b9e\u73b0\uff0c\u56e0\u4e3a\u7406\u8bba\u6a21\u578b\u5254\u9664\u4e86\u5f88\u591a\u7ec6\u8282\uff0c\u800c\u62bd\u8c61\u51fa\u6765\u6700\u6700\u672c\u8d28\u7684\u5185\u5bb9\uff0c\u6613\u4e8e\u7406\u89e3\uff0c\u4e5f\u5c31\u662f Conceptual model \u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u52a0\u8f7b\u677e\u5730 understand \u3002 \u672c\u8282\u603b\u7ed3\u4e00\u4e9b\u5e38\u89c1\u7684model\u3002","title":"Abstraction and model"},{"location":"Post/Abstraction/Abstraction-and-model/#task-model","text":"\u4e00\u4e9b\u5173\u4e8etask model\u7684\u5185\u5bb9\uff1a Computer multitasking Task parallelism Task (computing) \u5728task model\u4e2d\uff0c\u5f80\u5f80\u6709 \u7ba1\u7406\u8005 \uff08manager\uff09\u7684\u89d2\u8272\uff0c\u5b83\u8d1f\u8d23 \u63a7\u5236 \u6574\u4e2a\u7cfb\u7edf\uff1a \u8c03\u5ea6task\uff0c\u5177\u5907 \u8c03\u5ea6\u8005 \u7684\u89d2\u8272 \u76d1\u63a7task\uff0c\u5982\u5bf9task\u7684resource usage\u8fdb\u884c\u76d1\u63a7\uff0c\u5177\u5907 \u76d1\u63a7\u8005 \u7684\u89d2\u8272 \u7528\u6237\u53ef\u4ee5\u5411manager\u8bf7\u6c42\u521b\u5efatask\u3001\u64cd\u4f5ctask\u7b49\u3002 \u4f7f\u7528task model\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u7684\u4e00\u4e9b\u95ee\u9898\uff1a task\u662f\u4ec0\u4e48 \u7ba1\u7406\u8005 \u662f\u4ec0\u4e48 task\u7684 \u6267\u884c\u8005 \u662f\u4ec0\u4e48 \u4e0b\u9762\u4f7f\u7528task model\u6765\u63cf\u8ff0\u4e00\u4e9b\u7cfb\u7edf\uff1a Computer multitasking \u4e2d\uff0c \u7ba1\u7406\u8005 \u662foperating system kernel\uff0c\u662ftask\u662fprocess\u6216thread\u7684\u6267\u884c\uff0c\u5b83\u7684\u6267\u884c\u8005\u662fCPU\u3002 celery \u4e2d\uff0ctask\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7531\u7528\u6237\u5b9a\u4e49\u7684task function\uff0c\u6267\u884c\u8005\u5176\u5b9e\u5c31\u662fprocess\u4e86\uff0c \u8c03\u5ea6\u8005 \u5176\u5b9e\u5c31\u662f\u5b83\u7684 task queue \u4e86\uff0c\u663e\u7136\u548cOS kernel\u7684\u8c03\u5ea6\u8005\u76f8\u6bd4\uff0c\u5b83\u7684\u8c03\u5ea6\u7b56\u7565\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002 \u5173\u4e8e\u8c03\u5ea6\u8005\uff0c\u53c2\u89c1\uff1a Scheduling (computing)","title":"Task model"},{"location":"Post/Abstraction/Abstraction-and-model/#context-switchtask","text":"\u672c\u8282\u6240\u63cf\u8ff0\u7684context switch\u662f\u5e7f\u4e49\u7684context switch\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u5c40\u9650\u4e8eprocess\u7684context switch\u3002\u56e0\u4e3atask model\u4e2d\u5b58\u5728\u7740\u7684\u5e76\u53d1\u6267\u884c\u7684task\uff0c\u5e76\u4e14\u7ba1\u7406\u8005\u4f1a\u8fdb\u884c\u8c03\u5ea6\uff0c\u6240\u4ee5\u5c31\u4f1a\u53d1\u751fcontext switch\uff0c\u6bd4\u5982\uff1a git branch\uff0c Frictionless Context Switching \u6240\u4ee5\uff0ccontext switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c\u3002 \u4e0etask model\u76f8\u5173\u7684\u53e6\u5916\u4e00\u4e2a\u6982\u5ff5\u5c31\u662f\uff1atask manager\uff0c\u6bd4\u5982 Task Manager (Windows) \u3002","title":"Context switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c"},{"location":"Post/Abstraction/Abstraction-and-model/#event-driven-model","text":"\u4e00\u4e9b\u5173\u4e4eevent-driven model\u7684\u5185\u5bb9\uff1a Event (computing) Event-driven programming Event-driven architecture Event handler Interrupt Interrupt-driven Interrupt handler","title":"Event-driven model"},{"location":"Post/Abstraction/Abstraction-and-model/#event-driven-modeltask-modelsoftware","text":"\u6bd4\u5982\uff1aOS kernel\u5bf9hardware\u7684\u7ba1\u7406\u53ef\u4ee5\u4f7f\u7528event-driven model\u6765\u8fdb\u884c\u63cf\u8ff0\uff1bOS kernel\u5b9e\u73b0multitasking\u53ef\u4ee5\u4f7f\u7528task model\u6765\u8fdb\u884c\u63cf\u8ff0\u3002","title":"\u4f7f\u7528event-driven model\u548c\u4e0a\u8ff0\u7684task model\u53ef\u4ee5\u63cf\u8ff0\u592a\u591a\u592a\u591a\u7684software"},{"location":"Post/Abstraction/Abstraction-and-model/#model-of-computation","text":"","title":"Model of computation"},{"location":"Post/Abstraction/Abstraction-and-model/#model","text":"","title":"Model\u662f\u4e00\u79cd\u7b80\u5316"},{"location":"Post/Abstraction/Abstraction-and-model/#run-time-environment","text":"\u9f99\u4e66 \u7684 \u7b2c\u4e03\u7ae0 \u4e2d\u6240\u5b9a\u4e49\u7684run-time environment\u662f\u4e00\u4e2a\u7b80\u5316\u6a21\u578b\uff0c\u5b83\u5ffd\u7565\u4e86\u4e00\u4e9b\u7ec6\u8282\uff0c\u6bd4\u5982multi-thread\uff0c\u800c\u4ec5\u4ec5\u5173\u6ce8\u4e8e\u90e8\u5206\u5185\u5bb9\u3002\u5728\u5bf9\u5176\u8fdb\u884c\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u5176\u4ed6\u7684\u8bf8\u591a\u56e0\u7d20\uff0c\u53c2\u89c1\u5de5\u7a0b Linux-OS \u7684 Process mode: run time environment \uff0c\u5176\u4e2d\u63cf\u8ff0\u4e86\u5b9e\u73b0\u7684\u7ec6\u8282\u3002","title":"Run-time environment"},{"location":"Post/Abstraction/Abstraction-and-model/#statistical-model","text":"As Burnham & Anderson state, \"A model is a simplification or approximation of reality and hence will not reflect all of reality\"\u2014whence the saying \" all models are wrong \".","title":"Statistical model"},{"location":"Post/Abstraction/Abstraction-and-model/#mathematical-model","text":"\u5728\u5404\u4e2a\u5b66\u79d1\uff0c\u5efa\u7acb mathematical model \u8ba9\u63cf\u8ff0\u66f4\u52a0\u4fbf\u6377\u3001\u66f4\u52a0\u5bb9\u6613\u88ab\u4eba\u7406\u89e3\u3002 \u4e0b\u9762\u662f mathematical model \u7684\u4e00\u4e9b\u4f8b\u5b50\uff1a Stochastic process\uff1ahttps://en.wikipedia.org/wiki/Stochastic_process Statistical model\uff1ahttps://en.wikipedia.org/wiki/Statistical_model Markov model\uff1a https://en.wikipedia.org/wiki/Markov_model https://en.wikipedia.org/wiki/Hidden_Markov_model","title":"Mathematical model\uff0c\u4e00\u79cd\u66f4\u52a0\u9ad8\u6548\u7684\u63cf\u8ff0\u65b9\u5f0f"},{"location":"Post/Abstraction/Abstraction-and-model/#_1","text":"","title":"\u6a21\u578b\u4e0e\u5b9e\u73b0"},{"location":"Post/Abstraction/Abstraction-and-model/#example","text":"\u5728\u9f99\u4e66\u7684 \u7b2c\u4e03\u7ae0 \u4e2d\u6240\u8bb2\u8ff0\u7684logical address space\u662f\u4e00\u4e2a\u6982\u5ff5\u6a21\u578b\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u6982\u5ff5\u6a21\u578b\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u65f6\u5019\uff0c\u76ee\u524d\u4e3b\u6d41\u7684\u5b9e\u73b0\u65b9\u5f0f\u662fpaged virtual address space\u3002","title":"example"},{"location":"Post/Abstraction/Abstraction-and-model/#see-also","text":"Database model Data model","title":"See also"},{"location":"Post/Abstraction/Abstraction-and-relation/","text":"Abstraction and relation # \u901a\u8fc7abstraction\u6765\u521b\u9020concept\uff0c\u672c\u6587\u5c06\u63a2\u7d22concept\u4e4b\u95f4\u7684relation\u3002\u53c2\u8003\u5185\u5bb9\uff1a Is-a Has-a","title":"Abstraction-and-relation"},{"location":"Post/Abstraction/Abstraction-and-relation/#abstraction-and-relation","text":"\u901a\u8fc7abstraction\u6765\u521b\u9020concept\uff0c\u672c\u6587\u5c06\u63a2\u7d22concept\u4e4b\u95f4\u7684relation\u3002\u53c2\u8003\u5185\u5bb9\uff1a Is-a Has-a","title":"Abstraction and relation"},{"location":"Post/Abstraction/Abstraction-and-virtual/","text":"Abstraction and virtual # virtual\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5e38\u5e38\u4f1a\u51fa\u73b0\u7684\u4e00\u4e2a\u8bcd\uff0c\u6bd4\u5982\uff1a Virtual memory Virtual method \u7ecf\u8fc7\u672c\u6587\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5feb\u5730\u77e5\u9053\uff1avirtual\u4e5f\u662f\u4e00\u79cd\u62bd\u8c61\uff0c\u4e00\u79cd\u5206\u5c42\uff0c\u8fd9\u79cd\u5206\u5c42\u6240\u5e26\u6765\u7684\u4ef7\u503c\u5c31\u662f\u89e3\u8026\u3002\u4e0b\u9762\u4ee5virtual address\u6765\u8fdb\u884c\u8bf4\u660e\uff1a process\u5728\u8fd0\u884c\u7684\u65f6\u5019\u4f7f\u7528virtual memory address\uff0c\u7531OS\u6839\u636epage table\u5c06virtual address\u7ffb\u8bd1\u4e3aphysical address\uff1b\u4e0eprocess\u76f4\u63a5\u4f7f\u7528physical address\u76f8\u6bd4\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u591a\u6dfb\u52a0\u4e86\u4e00\u5c42\uff1a\u8f6c\u6362\u5c42\u3002\u8fd9\u79cd\u8bbe\u8ba1\u5e26\u6765\u7684\u4ef7\u503c\u662f\uff1a\u5b83\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u5177\u4f53\u6765\u8bb2\u5c31\u662f\u6309\u7167\u8fd9\u79cd\u8bbe\u8ba1\uff0cpage\u65e2\u53ef\u4ee5\u4f4d\u4e8eRAM\uff0c\u4e5f\u53ef\u4ee5\u4f4d\u4e8edisk\uff0c\u800c\u5982\u679c\u76f4\u63a5\u4f7f\u7528physical address\u7684\u8bdd\uff0c\u5219process\u7684page\u53ea\u80fd\u591f\u4f4d\u4e8eRAM\u4e2d\u3002\u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\uff0cvirtual address\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5728 Paged virtual memory \u4e2d\uff0c\u7531 Page tables \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\uff1athe data structures maps linear to physical addresses. \u5728 Virtual function \u4e2d\uff0c\u7531 Dispatch table \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u3002 \u8fd9\u79cd\u4e00\u5bf9\u591a\u662f\u9700\u8981\u4e00\u4e2atable\u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u7684\u3002 See also: Layer (object-oriented design)","title":"Abstraction-and-virtual"},{"location":"Post/Abstraction/Abstraction-and-virtual/#abstraction-and-virtual","text":"virtual\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5e38\u5e38\u4f1a\u51fa\u73b0\u7684\u4e00\u4e2a\u8bcd\uff0c\u6bd4\u5982\uff1a Virtual memory Virtual method \u7ecf\u8fc7\u672c\u6587\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5feb\u5730\u77e5\u9053\uff1avirtual\u4e5f\u662f\u4e00\u79cd\u62bd\u8c61\uff0c\u4e00\u79cd\u5206\u5c42\uff0c\u8fd9\u79cd\u5206\u5c42\u6240\u5e26\u6765\u7684\u4ef7\u503c\u5c31\u662f\u89e3\u8026\u3002\u4e0b\u9762\u4ee5virtual address\u6765\u8fdb\u884c\u8bf4\u660e\uff1a process\u5728\u8fd0\u884c\u7684\u65f6\u5019\u4f7f\u7528virtual memory address\uff0c\u7531OS\u6839\u636epage table\u5c06virtual address\u7ffb\u8bd1\u4e3aphysical address\uff1b\u4e0eprocess\u76f4\u63a5\u4f7f\u7528physical address\u76f8\u6bd4\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u591a\u6dfb\u52a0\u4e86\u4e00\u5c42\uff1a\u8f6c\u6362\u5c42\u3002\u8fd9\u79cd\u8bbe\u8ba1\u5e26\u6765\u7684\u4ef7\u503c\u662f\uff1a\u5b83\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u5177\u4f53\u6765\u8bb2\u5c31\u662f\u6309\u7167\u8fd9\u79cd\u8bbe\u8ba1\uff0cpage\u65e2\u53ef\u4ee5\u4f4d\u4e8eRAM\uff0c\u4e5f\u53ef\u4ee5\u4f4d\u4e8edisk\uff0c\u800c\u5982\u679c\u76f4\u63a5\u4f7f\u7528physical address\u7684\u8bdd\uff0c\u5219process\u7684page\u53ea\u80fd\u591f\u4f4d\u4e8eRAM\u4e2d\u3002\u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\uff0cvirtual address\u89e3\u8026\u4e86process\u7684page\u548cpage\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5728 Paged virtual memory \u4e2d\uff0c\u7531 Page tables \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\uff1athe data structures maps linear to physical addresses. \u5728 Virtual function \u4e2d\uff0c\u7531 Dispatch table \u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u3002 \u8fd9\u79cd\u4e00\u5bf9\u591a\u662f\u9700\u8981\u4e00\u4e2atable\u6765\u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\u7684\u3002 See also: Layer (object-oriented design)","title":"Abstraction and virtual"},{"location":"Post/Abstraction/Abstraction/","text":"Abstraction # \u6ce8\u610f\uff1a\u672c\u6587\u6240\u8ba8\u8bba\u7684 Abstraction \u662f\u5e7f\u4e49\u7684\uff0c\u800c\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e Abstraction (computer science) \u3002 \u7ef4\u57fa\u767e\u79d1 Abstraction \u7ed9\u51fa\u4e86Abstraction\u7684\u5927\u91cf\u63cf\u8ff0\uff0c\u6709\u4e9b\u662f\u6bd4\u8f83\u96be\u4ee5\u7406\u89e3\uff0c\u4e0b\u9762\u662f\u6211\u8ba4\u4e3a\u5176\u4e2d\u6bd4\u8f83\u597d\u7684\u63cf\u8ff0\uff1a Abstraction in its main sense is a conceptual process where general rules and concepts are derived from the usage and classification of specific examples, literal (\"real\" or \" concrete \") signifiers, first principles , or other methods. \u8fd9\u6bb5\u8bdd\u7684\u7b80\u5355\u6765\u8bf4\u662f\uff1a\u62bd\u8c61\u662f\u521b\u5efa concepts \u548c rules \u7684\u8fc7\u7a0b\uff0c\u90a3\u4f55\u4e3aconcept\u5462\uff1f\u8fd9\u4e2a\u95ee\u9898\u662f\u6bd4\u8f83\u201c\u62bd\u8c61\u201d\u7684\uff0c\u96be\u4ee5\u8fdb\u884c\u51c6\u786e\u63cf\u8ff0\u7684\uff0c\u540e\u9762\u7684 \u521b\u9020\u62bd\u8c61\u6982\u5ff5 \u7ae0\u8282\u4f1a\u7ed3\u5408\u5177\u4f53\u6848\u4f8b\u6765\u8fdb\u884c\u8bf4\u660e\u3002 \"An abstraction\" is the outcome of this process\u2014a concept that acts as a common noun for all subordinate\uff08\u4ece\u5c5e\uff09 concepts, and connects any related concepts as a group , field , or category . \u8fd9\u6bb5\u8bdd\u7684\u610f\u601d\u548c\u4e0a\u9762\u7684\u610f\u601d\u7c7b\u4f3c\uff0c\u5728 \u521b\u9020\u62bd\u8c61\u6982\u5ff5 \u7ae0\u8282\uff0c\u4f1a\u7ed3\u5408\u5177\u4f53\u5b9e\u4f8b\u5bf9\u8fd9\u6bb5\u8bdd\u6240\u8868\u8ff0\u7684\u610f\u601d\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002 Conceptual abstractions may be formed by filtering the information content of a concept or an observable phenomenon , selecting only the aspects which are relevant for a particular subjectively valued purpose. The essence of abstractions is preserving information that is relevant in a given context, and forgetting information that is irrelevant in that context. \u2013 John V. Guttag \u62bd\u8c61\u662f\u6982\u62ec\u7684\u8fc7\u7a0b\uff0c\u62bd\u8c61\u662f\u63d0\u53d6\u516c\u5171\u7279\u5f81\u7684\u8fc7\u7a0b\uff0c\u5b83\u6240\u6982\u62ec\u7684\u3001\u6240\u63d0\u53d6\u7684\u516c\u5171\u7279\u5f81\uff0c\u53ef\u4ee5\u4f7f\u7528 concepts \u6765\u8fdb\u884c\u8868\u793a\uff0c\u5f53\u7136\u4e5f\u6709\u5176\u5b83\u7684\u8868\u793a\u65b9\u5f0f\u3002 \u4e0eabstract\u76f8\u5bf9\u7684\u662fconcrete\uff0c\u53c2\u89c1 Abstract and concrete \u3002 \u521b\u9020\u62bd\u8c61\u6982\u5ff5 # \u901a\u8fc7\u521b\u9020\u62bd\u8c61\u7684 concept \uff08\u6982\u5ff5\uff09\u6765\u4f7f\u8868\u8ff0\u66f4\u52a0\u4fbf\u5229\u7684\u505a\u6cd5\u662f\u5728\u5404\u79cd\u5b66\u79d1\u975e\u5e38\u666e\u904d\u7684\uff0c\u5173\u4e8e\u6b64\u7684\u4f8b\u5b50\u6709\uff1a Kernel control path # \u5728\u300a Understanding the Linux Kernel, 3rd Edition \u300b\u7684chapter 1.6.3. Reentrant Kernels\u4e2d\uff0c\u4f5c\u8005\u521b\u9020\u4e86kernel control path\u6982\u5ff5\u6765\u6982\u62eckernel\u4e2d\u7531system call\u7531\u89e6\u53d1\u7684kernel control path\uff08\u540e\u9762\u7b80\u79f0\u4e3asystem call kernel control path\uff09\u3001\u7531interrupt handler\u89e6\u53d1\u7684kernel control path\uff08\u540e\u9762\u7b80\u79f0interrupt handler kernel control path\uff09\u4ee5\u53ca\u540e\u7eed\u968f\u7740kernel\u53d1\u5c55\u53ef\u80fd\u4f1a\u65b0\u589e\u7684\u89e6\u53d1kernel control path\u3002\u663e\u7136kernel control path\u6982\u5ff5\u6982\u62ec\u4e86system call kernel control path\u3001interrupt handler kernel control path\u7684 common feature \uff08\u516c\u5171\u7279\u5f81\uff09\uff0c\u5982\u5b83\u4eec\u90fd\u80fd\u591f\u88absuspend\u3001resume\u3002 \u663e\u7136\u5f53\u4e00\u4e2a\u8868\u8ff0\u4e2d\u4f7f\u7528kernel control path\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b83\u53ef\u4ee5\u662fsystem call kernel control path\u3001\u4e5f\u53ef\u4ee5\u662finterrupt handler kernel control path\uff0c\u8fd9\u5c31\u4f7f\u6211\u4eec\u7684\u8868\u8ff0\u975e\u5e38\u5730\u4fbf\u5229\u3002\u663e\u7136\uff0csystem call kernel control path\u3001interrupt handler kernel control path\u548ckernel control path\u4e4b\u95f4\u662f Is-a \u5173\u7cfb\u3002 Computer multitasking # \u5728 Computer multitasking \u4e2d\u521b\u9020\u4e86task\u6982\u5ff5\uff0c\u5b83\u8868\u793a\u7684\u662fcomputer\u80fd\u591f\u5e76\u53d1\u6267\u884c\u7684\uff0c\u5b83\u53ef\u4ee5\u662fprocess\u4e5f\u53ef\u4ee5\u662fthread\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u5219\u7531\u5177\u4f53\u7684\u5b9e\u73b0\u800c\u5b9a\u3002 Abstraction\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u7684\u5e94\u7528 # Abstraction\u662f\u79d1\u5b66\u7684\u57fa\u7840\uff0c\u5b83\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u90fd\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002 Abstraction in computer science # Abstraction\u5728computer science\u4e2d\u6709\u7740\u6df1\u8fdc\u7684\u5f71\u54cd\uff0c\u672c\u6587\u5c06\u5f00\u59cb\u5bf9\u6b64\u4ece\u591a\u4e2a\u65b9\u9762\u8fdb\u884c\u5256\u6790\u3002 \u7ef4\u57fa\u767e\u79d1\u7684 Abstraction (computer science) \u603b\u7ed3\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684abstraction\u3002\u867d\u7136\u7ef4\u57fa\u767e\u79d1\u7684 Abstraction (computer science) \u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684Abstraction\u6709\u4e86\u4e0d\u540c\u7684\u63cf\u8ff0\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684abstraction\u672c\u8d28\u4e0a\u548c\u524d\u9762\u6240\u8ff0\u7684\u5e7f\u4e49\u7684abstraction\u662f\u76f8\u540c\u7684\uff0c\u5373\u521b\u5efaconcept\u7684\u8fc7\u7a0b\uff0c\u5728computer science\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u662f\u5982\u4f55\u6765\u63cf\u8ff0concept\u3002 Concept\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4e0d\u540c\u9886\u57df\u6709\u7740\u4e0d\u540c\u7684\u63cf\u8ff0\u65b9\u5f0f\uff0c\u6bd4\u5982\uff1a \u5728 object-oriented programming \u4e2d\uff0c\u4f7f\u7528 class \u6765\u63cf\u8ff0concept\uff0cconcept\u4e4b\u95f4\u7684relation\u5c31\u8f6c\u6362\u4e3a class \u4e4b\u95f4\u7684\u5173\u7cfb\u4e86\u3002 \u5728 Entity\u2013relationship model \uff0c\u4f7f\u7528 entity \u6765\u63cf\u8ff0concept\u3002\u4e0e\u6b64\u76f8\u5173\u7684\u6982\u5ff5\u6709\uff1a Relational model \u3001 Relational database \u3001 Relational algebra \u3002 \u8fde\u63a5\u4e0a\u8ff0\u4e24\u8005\u7684\u5c31\u662f Object-relational mapping \u3002 Instruction set architecture \u662f\u5bf9 computer \u7684\u62bd\u8c61\uff0c\u5b83\u63cf\u8ff0\u4e86\u4e00\u4e2acomputer\u7684\u529f\u80fd\uff0c\u7279\u6027\u7b49\uff0c\u5b83\u4f7f\u7528instruction\u6765\u63cf\u8ff0\u3002 \u53e6\u5916\u4e00\u4e2a\u66f4\u52a0\u5e38\u7528\u7684\u6765\u63cf\u8ff0\u62bd\u8c61\u6982\u5ff5\u7684\u662f interface (computing) \uff0c\u5373\u63a5\u53e3\u3002 Abstraction in programming language # \u7eb5\u89c2 programming language\u7684\u53d1\u5c55\u53f2 \uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u8bed\u8a00\u8d8a\u6765\u8d8a\u9ad8\u7ea7\uff0c\u8d8a\u6765\u8d8a\u62bd\u8c61\uff0c\u8d8a\u6765\u8d8a\u6613\u7528\u3002\u6700\u5e95\u5c42\u7684\u8bed\u8a00\uff1a machine language \u6666\u6da9\u96be\u61c2\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5148\u9a71\u5728 machine language \u7684\u57fa\u7840\u4e0a\u62bd\u8c61\u51fa\u4e86 function \u6982\u5ff5\uff0c\u53c8\u62bd\u8c61\u51fa\u4e86 class \u7684\u6982\u5ff5\uff0c\u521b\u5efa\u4e86\u975e\u5e38\u591a \u9ad8\u7ea7\u7684\u8bed\u8a00 \uff0c\u6bd4\u5982C\u3002\u4e0d\u7ba1\u591a\u4e48\u9ad8\u7ea7\u7684\u8bed\u8a00\u6700\u7ec8\u90fd\u9700\u8981\u88ab\u7ffb\u8bd1\uff08compiler\u6216interpreter\uff09\u4e3a machine language \u624d\u80fd\u591f\u88ab\u673a\u5668\u6267\u884c\uff0c\u663e\u7136\u8fd9\u4e2a\u7ffb\u8bd1\u7684\u8fc7\u7a0b\u662f\u4e0e\u524d\u9762\u7684\u62bd\u8c61\u7684\u8fc7\u7a0b\u76f8\u9006\u7684\u3002 \u4e0emachine language\u76f8\u6bd4\uff0c\u6211\u4eec\u53d1\u73b0\u9ad8\u7ea7\u8bed\u8a00\u5f80\u5f80\u4f34\u968f\u7740\u975e\u5e38\u591a\u7684\u6982\u5ff5\uff0c\u800c\u4e14\u8d8a\u9ad8\u7ea7\u7684\u8bed\u8a00\u8c8c\u4f3c\u6982\u5ff5\u8d8a\u591a\uff08\u8fd9\u662f\u6211\u7684\u76f4\u89c9\uff0c\u53ef\u80fd\u5e76\u975e\u5982\u6b64\uff09\uff0c\u5f53\u7136\u4e5f\u8d8a\u5bb9\u6613\u4f7f\u7528\u3002\u4e0e\u6b64\u7c7b\u4f3c\u7684\u662f\uff0c\u5404\u79cdlibrary\u4e3a\u4e86\u7b80\u5316\u67d0\u4e2a\u9886\u57df\u7684\u95ee\u9898\uff0c \u4e5f\u521b\u9020\u4e86\u5404\u79cd\u76f4\u89c2\u6613\u61c2\u7684\u6982\u5ff5\uff0c\u4f7f\u5f97software engineer\u5728\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u65f6\uff0c\u975e\u5e38\u8f7b\u677e\u5bb9\u6613\uff0c\u56e0\u6b64\u83b7\u5f97\u4e86software engineer\u7684\u559c\u7231\u3002 \u4ece\u8fd9\u4e2a\u53d1\u5c55\u53f2\u6211\u4eec\u80fd\u591f\u770b\u5230\u62bd\u8c61\u6240\u5e26\u6765\u7684\u5de8\u5927\u4f18\u52bf\uff1a \u9690\u85cf\u4e86\u5e95\u5c42\u7684\u7ec6\u8282 \u8d8a\u62bd\u8c61\uff0c\u8d8a\u6613\u7528\uff0c\u6982\u5ff5\u4e5f\u5c31\u8d8a\u591a machine-independent\uff0c\u901a\u7528\u6027\u66f4\u52a0\uff0c\u5f00\u53d1\u6548\u7387\u66f4\u9ad8 \u53c2\u89c1: Rationale A central form of abstraction in computing is language abstraction: new artificial languages are developed to express specific aspects of a system. Modeling languages help in planning. Computer languages can be processed with a computer. An example of this abstraction process is the generational development of programming languages from the machine language to the assembly language and the high-level language . Each stage can be used as a stepping stone for the next stage. The language abstraction continues for example in scripting languages and domain-specific programming languages . \u53c2\u89c1\uff1a\u9f99\u4e66 Chapter 7 Run-Time Environments \u3002 Abstraction in object-oriented programming # \u601d\u8003\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u65b9\u5f0f\u6765\u63cf\u8ff0\u4e0a\u8ff0kernel control path\u6982\u5ff5\u548ctask\u6982\u5ff5\uff1f \u4f7f\u7528 class \u6765\u63cf\u8ff0 concept \uff0c\u8fd9\u51e0\u4e2a concept \u4e4b\u95f4\u662f Is-a \u5173\u7cfb\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528inheritance\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a c++ \u5b9e\u73b0\u7684demo\uff1a class KernelControlPath { } class SystemCallKernelControlPath public: KernelControlPath { } class InterruptKernelControlPath public: KernelControlPath { } kernel control path\u7684\u4e00\u4e2a \u7279\u5f81 \u5c31\u662f\u5b83\u80fd\u591f\u88absuspend\u3001resume\uff0c\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u63cf\u8ff0\u5c31\u662f\uff1a void suspend(KernelControlPath& kernel_control_path) { } void resume(KernelControlPath& kernel_control_path) { } \u9762\u5411\u5bf9\u8c61\u7684 Polymorphism \uff08\u591a\u6001\u6027\uff09\u8868\u660e suspend \u548c resume \u7684\u5165\u53c2\u53ef\u4ee5\u4e3a SystemCallKernelControlPath \u3001 InterruptKernelControlPath \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd9\u5176\u5b9e\u5c31\u4f53\u73b0\u4e86\uff1a \u5f53\u4e00\u4e2a\u8868\u8ff0\u4e2d\u4f7f\u7528kernel control path\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b83\u53ef\u4ee5\u662fsystem call kernel control path\u3001\u4e5f\u53ef\u4ee5\u662finterrupt handler kernel control path class Task: pass class ProcessTask: pass class ThreadTask: pass \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5b58\u5728\u4e0e\u4e0a\u8ff0\u62bd\u8c61\u6982\u5ff5\u7c7b\u4f3c\u7684\u505a\u6cd5\uff1a \u7236\u7c7b\u662f\u5b50\u7c7b\u7684\u62bd\u8c61 Virtual function See also # Abstract type \u62bd\u8c61\u4e0e\u5b9e\u73b0 # \u65e2\u7136\u6709\u62bd\u8c61\uff0c\u80af\u5b9a\u9700\u8981\u6709\u5bf9\u5e94\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982compiler\u5c31\u9700\u8981\u4f7f\u7528instruction\u6765\u6765\u5b9e\u73b0programming language\u4e2d\u7684\u5404\u79cd\u62bd\u8c61\uff0c\u53c2\u89c1\u9f99\u4e66 Chapter 7 Run-Time Environments \u3002 \u4e00\u79cd\u62bd\u8c61\uff0c\u53ef\u80fd\u6709\u591a\u79cd\u5b9e\u73b0\u3002 # TODO: Instruction set architecture \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6b64\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 Abstract data type \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6b64\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u53c2\u89c1 Data abstraction \u3002 Abstraction in architecture # \u53c2\u89c1 Abstraction-and-architecture Conceptual model # \u53c2\u89c1 Abstraction-and-model \u3002","title":"Abstraction"},{"location":"Post/Abstraction/Abstraction/#abstraction","text":"\u6ce8\u610f\uff1a\u672c\u6587\u6240\u8ba8\u8bba\u7684 Abstraction \u662f\u5e7f\u4e49\u7684\uff0c\u800c\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e Abstraction (computer science) \u3002 \u7ef4\u57fa\u767e\u79d1 Abstraction \u7ed9\u51fa\u4e86Abstraction\u7684\u5927\u91cf\u63cf\u8ff0\uff0c\u6709\u4e9b\u662f\u6bd4\u8f83\u96be\u4ee5\u7406\u89e3\uff0c\u4e0b\u9762\u662f\u6211\u8ba4\u4e3a\u5176\u4e2d\u6bd4\u8f83\u597d\u7684\u63cf\u8ff0\uff1a Abstraction in its main sense is a conceptual process where general rules and concepts are derived from the usage and classification of specific examples, literal (\"real\" or \" concrete \") signifiers, first principles , or other methods. \u8fd9\u6bb5\u8bdd\u7684\u7b80\u5355\u6765\u8bf4\u662f\uff1a\u62bd\u8c61\u662f\u521b\u5efa concepts \u548c rules \u7684\u8fc7\u7a0b\uff0c\u90a3\u4f55\u4e3aconcept\u5462\uff1f\u8fd9\u4e2a\u95ee\u9898\u662f\u6bd4\u8f83\u201c\u62bd\u8c61\u201d\u7684\uff0c\u96be\u4ee5\u8fdb\u884c\u51c6\u786e\u63cf\u8ff0\u7684\uff0c\u540e\u9762\u7684 \u521b\u9020\u62bd\u8c61\u6982\u5ff5 \u7ae0\u8282\u4f1a\u7ed3\u5408\u5177\u4f53\u6848\u4f8b\u6765\u8fdb\u884c\u8bf4\u660e\u3002 \"An abstraction\" is the outcome of this process\u2014a concept that acts as a common noun for all subordinate\uff08\u4ece\u5c5e\uff09 concepts, and connects any related concepts as a group , field , or category . \u8fd9\u6bb5\u8bdd\u7684\u610f\u601d\u548c\u4e0a\u9762\u7684\u610f\u601d\u7c7b\u4f3c\uff0c\u5728 \u521b\u9020\u62bd\u8c61\u6982\u5ff5 \u7ae0\u8282\uff0c\u4f1a\u7ed3\u5408\u5177\u4f53\u5b9e\u4f8b\u5bf9\u8fd9\u6bb5\u8bdd\u6240\u8868\u8ff0\u7684\u610f\u601d\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002 Conceptual abstractions may be formed by filtering the information content of a concept or an observable phenomenon , selecting only the aspects which are relevant for a particular subjectively valued purpose. The essence of abstractions is preserving information that is relevant in a given context, and forgetting information that is irrelevant in that context. \u2013 John V. Guttag \u62bd\u8c61\u662f\u6982\u62ec\u7684\u8fc7\u7a0b\uff0c\u62bd\u8c61\u662f\u63d0\u53d6\u516c\u5171\u7279\u5f81\u7684\u8fc7\u7a0b\uff0c\u5b83\u6240\u6982\u62ec\u7684\u3001\u6240\u63d0\u53d6\u7684\u516c\u5171\u7279\u5f81\uff0c\u53ef\u4ee5\u4f7f\u7528 concepts \u6765\u8fdb\u884c\u8868\u793a\uff0c\u5f53\u7136\u4e5f\u6709\u5176\u5b83\u7684\u8868\u793a\u65b9\u5f0f\u3002 \u4e0eabstract\u76f8\u5bf9\u7684\u662fconcrete\uff0c\u53c2\u89c1 Abstract and concrete \u3002","title":"Abstraction"},{"location":"Post/Abstraction/Abstraction/#_1","text":"\u901a\u8fc7\u521b\u9020\u62bd\u8c61\u7684 concept \uff08\u6982\u5ff5\uff09\u6765\u4f7f\u8868\u8ff0\u66f4\u52a0\u4fbf\u5229\u7684\u505a\u6cd5\u662f\u5728\u5404\u79cd\u5b66\u79d1\u975e\u5e38\u666e\u904d\u7684\uff0c\u5173\u4e8e\u6b64\u7684\u4f8b\u5b50\u6709\uff1a","title":"\u521b\u9020\u62bd\u8c61\u6982\u5ff5"},{"location":"Post/Abstraction/Abstraction/#kernel-control-path","text":"\u5728\u300a Understanding the Linux Kernel, 3rd Edition \u300b\u7684chapter 1.6.3. Reentrant Kernels\u4e2d\uff0c\u4f5c\u8005\u521b\u9020\u4e86kernel control path\u6982\u5ff5\u6765\u6982\u62eckernel\u4e2d\u7531system call\u7531\u89e6\u53d1\u7684kernel control path\uff08\u540e\u9762\u7b80\u79f0\u4e3asystem call kernel control path\uff09\u3001\u7531interrupt handler\u89e6\u53d1\u7684kernel control path\uff08\u540e\u9762\u7b80\u79f0interrupt handler kernel control path\uff09\u4ee5\u53ca\u540e\u7eed\u968f\u7740kernel\u53d1\u5c55\u53ef\u80fd\u4f1a\u65b0\u589e\u7684\u89e6\u53d1kernel control path\u3002\u663e\u7136kernel control path\u6982\u5ff5\u6982\u62ec\u4e86system call kernel control path\u3001interrupt handler kernel control path\u7684 common feature \uff08\u516c\u5171\u7279\u5f81\uff09\uff0c\u5982\u5b83\u4eec\u90fd\u80fd\u591f\u88absuspend\u3001resume\u3002 \u663e\u7136\u5f53\u4e00\u4e2a\u8868\u8ff0\u4e2d\u4f7f\u7528kernel control path\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b83\u53ef\u4ee5\u662fsystem call kernel control path\u3001\u4e5f\u53ef\u4ee5\u662finterrupt handler kernel control path\uff0c\u8fd9\u5c31\u4f7f\u6211\u4eec\u7684\u8868\u8ff0\u975e\u5e38\u5730\u4fbf\u5229\u3002\u663e\u7136\uff0csystem call kernel control path\u3001interrupt handler kernel control path\u548ckernel control path\u4e4b\u95f4\u662f Is-a \u5173\u7cfb\u3002","title":"Kernel control path"},{"location":"Post/Abstraction/Abstraction/#computer-multitasking","text":"\u5728 Computer multitasking \u4e2d\u521b\u9020\u4e86task\u6982\u5ff5\uff0c\u5b83\u8868\u793a\u7684\u662fcomputer\u80fd\u591f\u5e76\u53d1\u6267\u884c\u7684\uff0c\u5b83\u53ef\u4ee5\u662fprocess\u4e5f\u53ef\u4ee5\u662fthread\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u5219\u7531\u5177\u4f53\u7684\u5b9e\u73b0\u800c\u5b9a\u3002","title":"Computer multitasking"},{"location":"Post/Abstraction/Abstraction/#abstraction_1","text":"Abstraction\u662f\u79d1\u5b66\u7684\u57fa\u7840\uff0c\u5b83\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u90fd\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002","title":"Abstraction\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u7684\u5e94\u7528"},{"location":"Post/Abstraction/Abstraction/#abstraction-in-computer-science","text":"Abstraction\u5728computer science\u4e2d\u6709\u7740\u6df1\u8fdc\u7684\u5f71\u54cd\uff0c\u672c\u6587\u5c06\u5f00\u59cb\u5bf9\u6b64\u4ece\u591a\u4e2a\u65b9\u9762\u8fdb\u884c\u5256\u6790\u3002 \u7ef4\u57fa\u767e\u79d1\u7684 Abstraction (computer science) \u603b\u7ed3\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684abstraction\u3002\u867d\u7136\u7ef4\u57fa\u767e\u79d1\u7684 Abstraction (computer science) \u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684Abstraction\u6709\u4e86\u4e0d\u540c\u7684\u63cf\u8ff0\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684abstraction\u672c\u8d28\u4e0a\u548c\u524d\u9762\u6240\u8ff0\u7684\u5e7f\u4e49\u7684abstraction\u662f\u76f8\u540c\u7684\uff0c\u5373\u521b\u5efaconcept\u7684\u8fc7\u7a0b\uff0c\u5728computer science\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u662f\u5982\u4f55\u6765\u63cf\u8ff0concept\u3002 Concept\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4e0d\u540c\u9886\u57df\u6709\u7740\u4e0d\u540c\u7684\u63cf\u8ff0\u65b9\u5f0f\uff0c\u6bd4\u5982\uff1a \u5728 object-oriented programming \u4e2d\uff0c\u4f7f\u7528 class \u6765\u63cf\u8ff0concept\uff0cconcept\u4e4b\u95f4\u7684relation\u5c31\u8f6c\u6362\u4e3a class \u4e4b\u95f4\u7684\u5173\u7cfb\u4e86\u3002 \u5728 Entity\u2013relationship model \uff0c\u4f7f\u7528 entity \u6765\u63cf\u8ff0concept\u3002\u4e0e\u6b64\u76f8\u5173\u7684\u6982\u5ff5\u6709\uff1a Relational model \u3001 Relational database \u3001 Relational algebra \u3002 \u8fde\u63a5\u4e0a\u8ff0\u4e24\u8005\u7684\u5c31\u662f Object-relational mapping \u3002 Instruction set architecture \u662f\u5bf9 computer \u7684\u62bd\u8c61\uff0c\u5b83\u63cf\u8ff0\u4e86\u4e00\u4e2acomputer\u7684\u529f\u80fd\uff0c\u7279\u6027\u7b49\uff0c\u5b83\u4f7f\u7528instruction\u6765\u63cf\u8ff0\u3002 \u53e6\u5916\u4e00\u4e2a\u66f4\u52a0\u5e38\u7528\u7684\u6765\u63cf\u8ff0\u62bd\u8c61\u6982\u5ff5\u7684\u662f interface (computing) \uff0c\u5373\u63a5\u53e3\u3002","title":"Abstraction in computer science"},{"location":"Post/Abstraction/Abstraction/#abstraction-in-programming-language","text":"\u7eb5\u89c2 programming language\u7684\u53d1\u5c55\u53f2 \uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u8bed\u8a00\u8d8a\u6765\u8d8a\u9ad8\u7ea7\uff0c\u8d8a\u6765\u8d8a\u62bd\u8c61\uff0c\u8d8a\u6765\u8d8a\u6613\u7528\u3002\u6700\u5e95\u5c42\u7684\u8bed\u8a00\uff1a machine language \u6666\u6da9\u96be\u61c2\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5148\u9a71\u5728 machine language \u7684\u57fa\u7840\u4e0a\u62bd\u8c61\u51fa\u4e86 function \u6982\u5ff5\uff0c\u53c8\u62bd\u8c61\u51fa\u4e86 class \u7684\u6982\u5ff5\uff0c\u521b\u5efa\u4e86\u975e\u5e38\u591a \u9ad8\u7ea7\u7684\u8bed\u8a00 \uff0c\u6bd4\u5982C\u3002\u4e0d\u7ba1\u591a\u4e48\u9ad8\u7ea7\u7684\u8bed\u8a00\u6700\u7ec8\u90fd\u9700\u8981\u88ab\u7ffb\u8bd1\uff08compiler\u6216interpreter\uff09\u4e3a machine language \u624d\u80fd\u591f\u88ab\u673a\u5668\u6267\u884c\uff0c\u663e\u7136\u8fd9\u4e2a\u7ffb\u8bd1\u7684\u8fc7\u7a0b\u662f\u4e0e\u524d\u9762\u7684\u62bd\u8c61\u7684\u8fc7\u7a0b\u76f8\u9006\u7684\u3002 \u4e0emachine language\u76f8\u6bd4\uff0c\u6211\u4eec\u53d1\u73b0\u9ad8\u7ea7\u8bed\u8a00\u5f80\u5f80\u4f34\u968f\u7740\u975e\u5e38\u591a\u7684\u6982\u5ff5\uff0c\u800c\u4e14\u8d8a\u9ad8\u7ea7\u7684\u8bed\u8a00\u8c8c\u4f3c\u6982\u5ff5\u8d8a\u591a\uff08\u8fd9\u662f\u6211\u7684\u76f4\u89c9\uff0c\u53ef\u80fd\u5e76\u975e\u5982\u6b64\uff09\uff0c\u5f53\u7136\u4e5f\u8d8a\u5bb9\u6613\u4f7f\u7528\u3002\u4e0e\u6b64\u7c7b\u4f3c\u7684\u662f\uff0c\u5404\u79cdlibrary\u4e3a\u4e86\u7b80\u5316\u67d0\u4e2a\u9886\u57df\u7684\u95ee\u9898\uff0c \u4e5f\u521b\u9020\u4e86\u5404\u79cd\u76f4\u89c2\u6613\u61c2\u7684\u6982\u5ff5\uff0c\u4f7f\u5f97software engineer\u5728\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u65f6\uff0c\u975e\u5e38\u8f7b\u677e\u5bb9\u6613\uff0c\u56e0\u6b64\u83b7\u5f97\u4e86software engineer\u7684\u559c\u7231\u3002 \u4ece\u8fd9\u4e2a\u53d1\u5c55\u53f2\u6211\u4eec\u80fd\u591f\u770b\u5230\u62bd\u8c61\u6240\u5e26\u6765\u7684\u5de8\u5927\u4f18\u52bf\uff1a \u9690\u85cf\u4e86\u5e95\u5c42\u7684\u7ec6\u8282 \u8d8a\u62bd\u8c61\uff0c\u8d8a\u6613\u7528\uff0c\u6982\u5ff5\u4e5f\u5c31\u8d8a\u591a machine-independent\uff0c\u901a\u7528\u6027\u66f4\u52a0\uff0c\u5f00\u53d1\u6548\u7387\u66f4\u9ad8 \u53c2\u89c1: Rationale A central form of abstraction in computing is language abstraction: new artificial languages are developed to express specific aspects of a system. Modeling languages help in planning. Computer languages can be processed with a computer. An example of this abstraction process is the generational development of programming languages from the machine language to the assembly language and the high-level language . Each stage can be used as a stepping stone for the next stage. The language abstraction continues for example in scripting languages and domain-specific programming languages . \u53c2\u89c1\uff1a\u9f99\u4e66 Chapter 7 Run-Time Environments \u3002","title":"Abstraction in programming language"},{"location":"Post/Abstraction/Abstraction/#abstraction-in-object-oriented-programming","text":"\u601d\u8003\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u65b9\u5f0f\u6765\u63cf\u8ff0\u4e0a\u8ff0kernel control path\u6982\u5ff5\u548ctask\u6982\u5ff5\uff1f \u4f7f\u7528 class \u6765\u63cf\u8ff0 concept \uff0c\u8fd9\u51e0\u4e2a concept \u4e4b\u95f4\u662f Is-a \u5173\u7cfb\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528inheritance\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a c++ \u5b9e\u73b0\u7684demo\uff1a class KernelControlPath { } class SystemCallKernelControlPath public: KernelControlPath { } class InterruptKernelControlPath public: KernelControlPath { } kernel control path\u7684\u4e00\u4e2a \u7279\u5f81 \u5c31\u662f\u5b83\u80fd\u591f\u88absuspend\u3001resume\uff0c\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u63cf\u8ff0\u5c31\u662f\uff1a void suspend(KernelControlPath& kernel_control_path) { } void resume(KernelControlPath& kernel_control_path) { } \u9762\u5411\u5bf9\u8c61\u7684 Polymorphism \uff08\u591a\u6001\u6027\uff09\u8868\u660e suspend \u548c resume \u7684\u5165\u53c2\u53ef\u4ee5\u4e3a SystemCallKernelControlPath \u3001 InterruptKernelControlPath \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd9\u5176\u5b9e\u5c31\u4f53\u73b0\u4e86\uff1a \u5f53\u4e00\u4e2a\u8868\u8ff0\u4e2d\u4f7f\u7528kernel control path\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b83\u53ef\u4ee5\u662fsystem call kernel control path\u3001\u4e5f\u53ef\u4ee5\u662finterrupt handler kernel control path class Task: pass class ProcessTask: pass class ThreadTask: pass \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5b58\u5728\u4e0e\u4e0a\u8ff0\u62bd\u8c61\u6982\u5ff5\u7c7b\u4f3c\u7684\u505a\u6cd5\uff1a \u7236\u7c7b\u662f\u5b50\u7c7b\u7684\u62bd\u8c61 Virtual function","title":"Abstraction in object-oriented programming"},{"location":"Post/Abstraction/Abstraction/#see-also","text":"Abstract type","title":"See also"},{"location":"Post/Abstraction/Abstraction/#_2","text":"\u65e2\u7136\u6709\u62bd\u8c61\uff0c\u80af\u5b9a\u9700\u8981\u6709\u5bf9\u5e94\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982compiler\u5c31\u9700\u8981\u4f7f\u7528instruction\u6765\u6765\u5b9e\u73b0programming language\u4e2d\u7684\u5404\u79cd\u62bd\u8c61\uff0c\u53c2\u89c1\u9f99\u4e66 Chapter 7 Run-Time Environments \u3002","title":"\u62bd\u8c61\u4e0e\u5b9e\u73b0"},{"location":"Post/Abstraction/Abstraction/#_3","text":"TODO: Instruction set architecture \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6b64\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 Abstract data type \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6b64\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u53c2\u89c1 Data abstraction \u3002","title":"\u4e00\u79cd\u62bd\u8c61\uff0c\u53ef\u80fd\u6709\u591a\u79cd\u5b9e\u73b0\u3002"},{"location":"Post/Abstraction/Abstraction/#abstraction-in-architecture","text":"\u53c2\u89c1 Abstraction-and-architecture","title":"Abstraction in architecture"},{"location":"Post/Abstraction/Abstraction/#conceptual-model","text":"\u53c2\u89c1 Abstraction-and-model \u3002","title":"Conceptual model"},{"location":"Post/Formal/Formal/","text":"Formal # \u672c\u6587\u76ee\u524d\u5904\u4e8e\u8349\u7a3f\u72b6\u6001\u3002 \u5173\u4e8eFormal\u7684\u4e00\u4e9b\u7d20\u6750\uff1a Formal science automata-and-formal-language Formal proof \uff08\u975e\u5e38\u91cd\u8981\uff09 \u76ee\u524d\u6211\u5bf9formal\u6240\u63a5\u89e6\u6700\u591a\u7684\u662f\u5728 automata-and-formal-language \u4e2d\u6240\u63cf\u8ff0\u7684formal language\uff0c\u6211\u89c9\u5f97formal\u548clogic\u6709\u7740\u975e\u5e38\u5bc6\u5207\u7684\u5173\u8054\u3002 Formal system\uff1a Lambda calculus \u6839\u636e\u4e0d\u540c\u8bed\u5883\uff0cformal\u7684\u542b\u4e49\u53ef\u80fd\u662f\u201c\u5f62\u5f0f\u5316\u201d\uff0c\u4e5f\u53ef\u80fd\u662f\u201c\u6b63\u5f0f\u201d\u3002 Scientific formalism What does \u201cformal\u201d mean? #","title":"Formal"},{"location":"Post/Formal/Formal/#formal","text":"\u672c\u6587\u76ee\u524d\u5904\u4e8e\u8349\u7a3f\u72b6\u6001\u3002 \u5173\u4e8eFormal\u7684\u4e00\u4e9b\u7d20\u6750\uff1a Formal science automata-and-formal-language Formal proof \uff08\u975e\u5e38\u91cd\u8981\uff09 \u76ee\u524d\u6211\u5bf9formal\u6240\u63a5\u89e6\u6700\u591a\u7684\u662f\u5728 automata-and-formal-language \u4e2d\u6240\u63cf\u8ff0\u7684formal language\uff0c\u6211\u89c9\u5f97formal\u548clogic\u6709\u7740\u975e\u5e38\u5bc6\u5207\u7684\u5173\u8054\u3002 Formal system\uff1a Lambda calculus \u6839\u636e\u4e0d\u540c\u8bed\u5883\uff0cformal\u7684\u542b\u4e49\u53ef\u80fd\u662f\u201c\u5f62\u5f0f\u5316\u201d\uff0c\u4e5f\u53ef\u80fd\u662f\u201c\u6b63\u5f0f\u201d\u3002 Scientific formalism","title":"Formal"},{"location":"Post/Formal/Formal/#what-does-formal-mean","text":"","title":"What does \u201cformal\u201d mean?"},{"location":"Post/Language/Language/","text":"Language and program # Language \u662f\u6211\u4eec\u4e0e\u751f\u4ff1\u6765\u7684\u5929\u8d4b\uff0c\u6211\u4eec\u4f7f\u7528language\u53ef\u4ee5 \u63cf\u8ff0 \uff08 describes \uff09\u4e16\u95f4\u4e07\u7269\uff0c\u6216\u8005\u8bf4\uff0c\u8bed\u8a00\u7684\u529f\u80fd\u5c31\u662f\u6765\u8fdb\u884c \u63cf\u8ff0 \u7684\uff1a \u4f7f\u7528\u8bed\u8a00\u63cf\u8ff0 definition \u4f7f\u7528\u8bed\u8a00\u6765\u63cf\u8ff0 \u7b97\u6cd5 ......\uff08\u6b64\u5904\u53ef\u4ee5\u679a\u4e3e\u6570\u4e0d\u6e05\u7684\u4f8b\u5b50\uff09 \u5728 language \u7684\u5927\u5bb6\u5ead\u4e2d\uff0c\u6709\u7740\u591a\u4e2a\u6210\u5458\uff0c\u6bd4\u5982\uff1a \u6211\u4eec\u65e5\u5e38\u4ea4\u6d41\u4f7f\u7528 natural language \uff0c\u6bd4\u5982Chinese\u3001English Formal language \uff0c\u6bd4\u5982 programming language Language of mathematics \u4f5c\u4e3asoftware engineer\uff0c\u6211\u4eec\u5e78\u8fd0\u5730\u5df2\u7ecf\u4f7f\u7528\u4e86\u4e0a\u9762\u679a\u4e3e\u7684\u4e09\u79cd\u8bed\u8a00\u3002 \u4f5c\u4e3asoftware engineer\uff0c\u6211\u4eec\u662f\u5728\u4f7f\u7528 programming language \u6765\u63cf\u8ff0\u4e16\u95f4\u4e07\u7269\uff0c\u6211\u4eec\u6240\u505a\u7684\u5f88\u591a\u5de5\u4f5c\uff0c\u5c31\u662f\u5c06\u4eba\u4eec\u4f7f\u7528 natural language \u3001 language of mathematics \u7b49\u8bed\u8a00\u7684\u63cf\u8ff0\uff0c\u8f6c\u6362\u4e3a programming language \u7684\u63cf\u8ff0\u3002 \u4e00\u5207\u201c\u63cf\u8ff0\u201d\u90fd\u662f\u8bed\u8a00\uff1f # \u5f53\u8c08\u5230 \u8bed\u8a00 \u540e\uff0c\u90a3\u4e48\u5f97\u8bf4\u8bf4\u201c\u63cf\u8ff0\u201d\u8fd9\u4e2a\u8bcd\u4e86\uff0c\u611f\u89c9\u8fd9\u4e2a\u8bcd\u662f\u4e00\u4e2a\u975e\u5e38\u5bbd\u6cdb\u3001\u975e\u5e38\u56ca\u62ec\u7684\u8bcd\uff0c\u6bd4\u5982\uff1a \u5728 Language of mathematics \u7684 The meanings of mathematics \u4e2d\u5c31\u4f7f\u7528\u4e86\u201cdescribes \u201d\u8fd9\u4e2a\u8bcd\uff08\u8fd9\u6bb5\u8bdd\u603b\u7ed3\u7684\u592a\u597d\u4ee5\u81f3\u4e8e\u6211\u5fcd\u4e0d\u4f4f\u5730\u628a\u5b83\u6458\u5f55\u8fc7\u6765\u4e86\uff09\uff1a Mathematics describes the real world : many areas of mathematics originated with attempts to describe and solve real world phenomena - from measuring farms ( geometry ) to falling apples ( calculus ) to gambling ( probability ). Mathematics is widely used in modern physics and engineering , and has been hugely successful in helping us to understand more about the universe around us from its largest scales ( physical cosmology ) to its smallest ( quantum mechanics ). Indeed, the very success of mathematics in this respect has been a source of puzzlement for some philosophers (see The Unreasonable Effectiveness of Mathematics in the Natural Sciences by Eugene Wigner ). Mathematics describes abstract structures : on the other hand, there are areas of pure mathematics which deal with abstract structures , which have no known physical counterparts at all. However, it is difficult to give any categorical examples here, as even the most abstract structures can be co-opted as models in some branch of physics (see Calabi-Yau spaces and string theory ). Mathematics describes mathematics : mathematics can be used reflexively to describe itself\u2014this is an area of mathematics called metamathematics . \u90a3\u4e0d\u7981\u60f3\u95ee\uff1a\u6570\u5b66\u662f\u4e00\u95e8\u8bed\u8a00\u5417\uff1f\u5982\u679c\u4ece\u201c\u63cf\u8ff0\u201d\u7684\u89d2\u5ea6\u6765\u770b\u8bdd\uff0c\u6211\u89c9\u5f97\u53ef\u4ee5\u56de\u7b54\u201c\u662f\u201d\uff0c\u4e0b\u9762\u662f\u539f\u6587\u4e2d\u7d27\u8ddf\u7740\u7684\u5bf9\u8fd9\u4e2a\u95ee\u9898\u7684\u8bba\u8ff0\uff1a Mathematics can communicate a range of meanings that is as wide as (although different from) that of a natural language . As English mathematician R.L.E. Schwarzenberger says: My own attitude, which I share with many of my colleagues, is simply that mathematics is a language . Like English, or Latin, or Chinese, there are certain concepts for which mathematics is particularly well suited: it would be as foolish to attempt to write a love poem in the language of mathematics as to prove the Fundamental Theorem of Algebra using the English language. \u6839\u636e\u4e0a\u9762\u7684\u8bba\u8ff0\u6765\u770b\uff0c English mathematician R.L.E. Schwarzenberger \u8ba4\u4e3a \u6570\u5b66\u662f\u4e00\u95e8\u8bed\u8a00\u3002 \u8ba9\u6211\u4eec\u6cbf\u7740\u8fd9\u4e2a\u601d\u8def\u8fdb\u4e00\u6b65\u8fdb\u884c\u63a8\u5e7f\u5c31\u5f97\u5230\u672c\u5c0f\u8282\u7684\u6807\u9898\u6240\u63cf\u8ff0\u7684\u95ee\u9898\uff1a\u201c\u4e00\u5207\u201c\u63cf\u8ff0\u201d\u90fd\u662f\u8bed\u8a00\uff1f\u201d\uff0c\u8fd9\u4e2a\u95ee\u9898\u6211\u65e0\u6cd5\u7ed9\u51fa\u7b54\u6848\uff0c\u4ee5\u6211\u76ee\u524d\u7684\u8ba4\u77e5\u6c34\u5e73\uff0c\u6211\u89c9\u5f97\u662f\u7684\u3002 \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u6211\u7684\u5de5\u7a0b automata-and-formal-language \u7684\u6587\u7ae0 \u5982\u4f55\u6765\u8fdb\u884c\u63cf\u8ff0\uff1f \u4e2d\u5bf9\u6b64\u4e5f\u8fdb\u884c\u4e86\u8ba8\u8bba\u3002 English mathematician R.L.E. Schwarzenberger \u7684\u8fd9\u756a\u8a00\u8bba\u4e5f\u5411\u6211\u4eec\u63ed\u793a\u4e86\uff1a\u4e0d\u540c\u7684\u8bed\u8a00\u6709\u7740\u5404\u81ea\u7684\u4f18\u52bf\u3002 \u8bed\u8a00\u7684\u7ed3\u6784 # \u5728 \u8bed\u8a00\u5b66 \u4e2d\uff0c\u4f7f\u7528 grammar \u6765\u63cf\u8ff0\u8bed\u8a00\u7684\u7ed3\u6784\uff0c\u5173\u4e8e\u6b64\uff0c\u53c2\u89c1 automata-and-formal-language \u7684 Language and grammar \u6587\u7ae0\u3002 \u8bed\u8a00\u7684expressive power # Mathematics can communicate a range of meanings that is as wide as (although different from) that of a natural language . \u8fd9\u6bb5\u8bdd\u5411\u6211\u4eec\u4f20\u8fbe\u4e86\u8fd9\u6837\u7684\u542b\u4e49\uff1a\u4e0d\u540c\u7684\u8bed\u8a00 \u6240\u80fd\u591f\u63cf\u8ff0\u7684meaning\u7684\u8303\u56f4 \u662f\u4e0d\u540c\u7684\u3002\u4e0b\u9762\u6211\u4eec\u4f7f\u7528\u96c6\u5408\u7684\u89c2\u70b9\u6765\u63cf\u8ff0\u8fd9\u4e2a\u542b\u4e49\uff1a\u5982\u679c\u6211\u4eec\u5c06\u8bed\u8a00\u201c\u6240\u80fd\u591f\u63cf\u8ff0\u7684meaning\u201d\u653e\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u628a\u8fd9\u4e2a\u96c6\u5408\u79f0\u4e3a meaning set\uff0c\u90a3\u4e48\u4e0d\u540c\u8bed\u8a00\u7684meaning set\u7684\u5927\u5c0f\u662f\u4e0d\u540c\u7684\u3002\u4f7f\u7528\u6211\u4eec\u7684\u81ea\u7136\u8bed\u8a00\u6765\u63cf\u8ff0\u5c31\u662f\uff1a\u6709\u7684\u8bed\u8a00\u80fd\u591f\u63cf\u8ff0\u7684\u8303\u56f4\u66f4\u5927\u3001\u6709\u7684\u8bed\u8a00\u65e0\u6cd5\u63cf\u8ff0\u53e6\u5916\u4e00\u4e2a\u8bed\u8a00\u6240\u8868\u8fbe\u7684\u3002\u8fd9\u5c31\u662f\u672c\u8282\u6807\u9898\u4e2d\u7684\u201cexpressive power\u201d\u7684\u542b\u4e49\u3002 \u5173\u4e8eexpressive power\uff0c\u53c2\u89c1\uff1a \u7ef4\u57fa\u767e\u79d1 Expressive power \u7ef4\u57fa\u767e\u79d1 Combinatory categorial grammar \uff08\u5176\u4e2d\u63d0\u53ca\u4e86expressive power\uff09 \u4f7f\u7528\u4e0d\u540c\u7684\u5b66\u79d1\u7684\u8bed\u8a00\u6765\u8fdb\u884c\u63cf\u8ff0 # \u901a\u8fc7\u524d\u9762\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5e94\u8be5\u5df2\u7ecf\u5bf9\u8bed\u8a00\u6709\u4e86\u66f4\u52a0\u5bbd\u6cdb\u7684\u8ba4\u8bc6\u4e86\u3002\u4e0d\u540c\u7684\u5b66\u79d1\u521b\u5efa\u4e86\u5404\u81ea\u7684\u7406\u8bba\u4f53\u7cfb\uff08\u521b\u5efa\u4e86\u6982\u5ff5\u3001\u89c4\u5219\u7b49\uff09\uff0c\u8fd9\u5c31\u5f62\u6210\u4e86\u8be5\u5b66\u79d1\u7684\u7279\u6709\u7684 \u8bed\u8a00 \uff0c\u8fd9\u5c31\u5f62\u6210\u4e86\u5bf9\u4e8e\u540c\u4e00\u4e2a\u4e8b\u7269\uff0c\u5404\u4e2a\u5b66\u79d1\u90fd\u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u7684\u8bed\u8a00\u6765\u5bf9\u5b83\u8fdb\u884c\u63cf\u8ff0\uff0c\u8fd9\u5c31\u597d\u6bd4\u5bf9\u4e8e\u201c\u82f9\u679c\u201d\uff0c\u4e2d\u6587\u3001\u82f1\u6587\u3001\u6cd5\u6587\u6709\u7740\u5404\u81ea\u7684\u63cf\u8ff0\u65b9\u5f0f\u3002 \u62e5\u6709\u8fd9\u6837\u7684\u8ba4\u77e5\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u6bd4\u5982\uff0c\u5f53\u6211\u4eec\u5728\u9605\u8bfb\u7ef4\u57fa\u767e\u79d1\u7684\u4e00\u4e9b\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u5e38\u5e38\u4f1a\u78b0\u5230\u7684\u4e00\u79cd\u60c5\u51b5\u662f\u67d0\u67d0\u6982\u5ff5\uff0c\u6570\u5b66\u4e2d\u600e\u4e48\u63cf\u8ff0\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u600e\u4e48\u63cf\u8ff0\u3001\u8bed\u8a00\u5b66\u4e2d\u600e\u4e48\u63cf\u8ff0\u3002 \u62e5\u6709\u8fd9\u6837\u7684\u8ba4\u77e5\u5bf9\u4e8e\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u5c24\u5176\u91cd\u8981\uff0c\u6b63\u5982\u5728\u672c\u6587\u5f00\u5934\u505a\u8bf4\u7684\uff1a \u6211\u4eec\u6240\u505a\u7684\u5f88\u591a\u5de5\u4f5c\uff0c\u5c31\u662f\u5c06\u4eba\u4eec\u4f7f\u7528 natural language \u3001 language of mathematics \u7b49\u8bed\u8a00\u7684\u63cf\u8ff0\uff0c\u8f6c\u6362\u4e3a programming language \u7684\u63cf\u8ff0 \u6211\u5bf9\u201c\u8bed\u8a00\u201d\u7684\u63a2\u7d22 # NLP compiler-principle automata-and-formal-language","title":"Language"},{"location":"Post/Language/Language/#language-and-program","text":"Language \u662f\u6211\u4eec\u4e0e\u751f\u4ff1\u6765\u7684\u5929\u8d4b\uff0c\u6211\u4eec\u4f7f\u7528language\u53ef\u4ee5 \u63cf\u8ff0 \uff08 describes \uff09\u4e16\u95f4\u4e07\u7269\uff0c\u6216\u8005\u8bf4\uff0c\u8bed\u8a00\u7684\u529f\u80fd\u5c31\u662f\u6765\u8fdb\u884c \u63cf\u8ff0 \u7684\uff1a \u4f7f\u7528\u8bed\u8a00\u63cf\u8ff0 definition \u4f7f\u7528\u8bed\u8a00\u6765\u63cf\u8ff0 \u7b97\u6cd5 ......\uff08\u6b64\u5904\u53ef\u4ee5\u679a\u4e3e\u6570\u4e0d\u6e05\u7684\u4f8b\u5b50\uff09 \u5728 language \u7684\u5927\u5bb6\u5ead\u4e2d\uff0c\u6709\u7740\u591a\u4e2a\u6210\u5458\uff0c\u6bd4\u5982\uff1a \u6211\u4eec\u65e5\u5e38\u4ea4\u6d41\u4f7f\u7528 natural language \uff0c\u6bd4\u5982Chinese\u3001English Formal language \uff0c\u6bd4\u5982 programming language Language of mathematics \u4f5c\u4e3asoftware engineer\uff0c\u6211\u4eec\u5e78\u8fd0\u5730\u5df2\u7ecf\u4f7f\u7528\u4e86\u4e0a\u9762\u679a\u4e3e\u7684\u4e09\u79cd\u8bed\u8a00\u3002 \u4f5c\u4e3asoftware engineer\uff0c\u6211\u4eec\u662f\u5728\u4f7f\u7528 programming language \u6765\u63cf\u8ff0\u4e16\u95f4\u4e07\u7269\uff0c\u6211\u4eec\u6240\u505a\u7684\u5f88\u591a\u5de5\u4f5c\uff0c\u5c31\u662f\u5c06\u4eba\u4eec\u4f7f\u7528 natural language \u3001 language of mathematics \u7b49\u8bed\u8a00\u7684\u63cf\u8ff0\uff0c\u8f6c\u6362\u4e3a programming language \u7684\u63cf\u8ff0\u3002","title":"Language and program"},{"location":"Post/Language/Language/#_1","text":"\u5f53\u8c08\u5230 \u8bed\u8a00 \u540e\uff0c\u90a3\u4e48\u5f97\u8bf4\u8bf4\u201c\u63cf\u8ff0\u201d\u8fd9\u4e2a\u8bcd\u4e86\uff0c\u611f\u89c9\u8fd9\u4e2a\u8bcd\u662f\u4e00\u4e2a\u975e\u5e38\u5bbd\u6cdb\u3001\u975e\u5e38\u56ca\u62ec\u7684\u8bcd\uff0c\u6bd4\u5982\uff1a \u5728 Language of mathematics \u7684 The meanings of mathematics \u4e2d\u5c31\u4f7f\u7528\u4e86\u201cdescribes \u201d\u8fd9\u4e2a\u8bcd\uff08\u8fd9\u6bb5\u8bdd\u603b\u7ed3\u7684\u592a\u597d\u4ee5\u81f3\u4e8e\u6211\u5fcd\u4e0d\u4f4f\u5730\u628a\u5b83\u6458\u5f55\u8fc7\u6765\u4e86\uff09\uff1a Mathematics describes the real world : many areas of mathematics originated with attempts to describe and solve real world phenomena - from measuring farms ( geometry ) to falling apples ( calculus ) to gambling ( probability ). Mathematics is widely used in modern physics and engineering , and has been hugely successful in helping us to understand more about the universe around us from its largest scales ( physical cosmology ) to its smallest ( quantum mechanics ). Indeed, the very success of mathematics in this respect has been a source of puzzlement for some philosophers (see The Unreasonable Effectiveness of Mathematics in the Natural Sciences by Eugene Wigner ). Mathematics describes abstract structures : on the other hand, there are areas of pure mathematics which deal with abstract structures , which have no known physical counterparts at all. However, it is difficult to give any categorical examples here, as even the most abstract structures can be co-opted as models in some branch of physics (see Calabi-Yau spaces and string theory ). Mathematics describes mathematics : mathematics can be used reflexively to describe itself\u2014this is an area of mathematics called metamathematics . \u90a3\u4e0d\u7981\u60f3\u95ee\uff1a\u6570\u5b66\u662f\u4e00\u95e8\u8bed\u8a00\u5417\uff1f\u5982\u679c\u4ece\u201c\u63cf\u8ff0\u201d\u7684\u89d2\u5ea6\u6765\u770b\u8bdd\uff0c\u6211\u89c9\u5f97\u53ef\u4ee5\u56de\u7b54\u201c\u662f\u201d\uff0c\u4e0b\u9762\u662f\u539f\u6587\u4e2d\u7d27\u8ddf\u7740\u7684\u5bf9\u8fd9\u4e2a\u95ee\u9898\u7684\u8bba\u8ff0\uff1a Mathematics can communicate a range of meanings that is as wide as (although different from) that of a natural language . As English mathematician R.L.E. Schwarzenberger says: My own attitude, which I share with many of my colleagues, is simply that mathematics is a language . Like English, or Latin, or Chinese, there are certain concepts for which mathematics is particularly well suited: it would be as foolish to attempt to write a love poem in the language of mathematics as to prove the Fundamental Theorem of Algebra using the English language. \u6839\u636e\u4e0a\u9762\u7684\u8bba\u8ff0\u6765\u770b\uff0c English mathematician R.L.E. Schwarzenberger \u8ba4\u4e3a \u6570\u5b66\u662f\u4e00\u95e8\u8bed\u8a00\u3002 \u8ba9\u6211\u4eec\u6cbf\u7740\u8fd9\u4e2a\u601d\u8def\u8fdb\u4e00\u6b65\u8fdb\u884c\u63a8\u5e7f\u5c31\u5f97\u5230\u672c\u5c0f\u8282\u7684\u6807\u9898\u6240\u63cf\u8ff0\u7684\u95ee\u9898\uff1a\u201c\u4e00\u5207\u201c\u63cf\u8ff0\u201d\u90fd\u662f\u8bed\u8a00\uff1f\u201d\uff0c\u8fd9\u4e2a\u95ee\u9898\u6211\u65e0\u6cd5\u7ed9\u51fa\u7b54\u6848\uff0c\u4ee5\u6211\u76ee\u524d\u7684\u8ba4\u77e5\u6c34\u5e73\uff0c\u6211\u89c9\u5f97\u662f\u7684\u3002 \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u6211\u7684\u5de5\u7a0b automata-and-formal-language \u7684\u6587\u7ae0 \u5982\u4f55\u6765\u8fdb\u884c\u63cf\u8ff0\uff1f \u4e2d\u5bf9\u6b64\u4e5f\u8fdb\u884c\u4e86\u8ba8\u8bba\u3002 English mathematician R.L.E. Schwarzenberger \u7684\u8fd9\u756a\u8a00\u8bba\u4e5f\u5411\u6211\u4eec\u63ed\u793a\u4e86\uff1a\u4e0d\u540c\u7684\u8bed\u8a00\u6709\u7740\u5404\u81ea\u7684\u4f18\u52bf\u3002","title":"\u4e00\u5207\u201c\u63cf\u8ff0\u201d\u90fd\u662f\u8bed\u8a00\uff1f"},{"location":"Post/Language/Language/#_2","text":"\u5728 \u8bed\u8a00\u5b66 \u4e2d\uff0c\u4f7f\u7528 grammar \u6765\u63cf\u8ff0\u8bed\u8a00\u7684\u7ed3\u6784\uff0c\u5173\u4e8e\u6b64\uff0c\u53c2\u89c1 automata-and-formal-language \u7684 Language and grammar \u6587\u7ae0\u3002","title":"\u8bed\u8a00\u7684\u7ed3\u6784"},{"location":"Post/Language/Language/#expressive-power","text":"Mathematics can communicate a range of meanings that is as wide as (although different from) that of a natural language . \u8fd9\u6bb5\u8bdd\u5411\u6211\u4eec\u4f20\u8fbe\u4e86\u8fd9\u6837\u7684\u542b\u4e49\uff1a\u4e0d\u540c\u7684\u8bed\u8a00 \u6240\u80fd\u591f\u63cf\u8ff0\u7684meaning\u7684\u8303\u56f4 \u662f\u4e0d\u540c\u7684\u3002\u4e0b\u9762\u6211\u4eec\u4f7f\u7528\u96c6\u5408\u7684\u89c2\u70b9\u6765\u63cf\u8ff0\u8fd9\u4e2a\u542b\u4e49\uff1a\u5982\u679c\u6211\u4eec\u5c06\u8bed\u8a00\u201c\u6240\u80fd\u591f\u63cf\u8ff0\u7684meaning\u201d\u653e\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u628a\u8fd9\u4e2a\u96c6\u5408\u79f0\u4e3a meaning set\uff0c\u90a3\u4e48\u4e0d\u540c\u8bed\u8a00\u7684meaning set\u7684\u5927\u5c0f\u662f\u4e0d\u540c\u7684\u3002\u4f7f\u7528\u6211\u4eec\u7684\u81ea\u7136\u8bed\u8a00\u6765\u63cf\u8ff0\u5c31\u662f\uff1a\u6709\u7684\u8bed\u8a00\u80fd\u591f\u63cf\u8ff0\u7684\u8303\u56f4\u66f4\u5927\u3001\u6709\u7684\u8bed\u8a00\u65e0\u6cd5\u63cf\u8ff0\u53e6\u5916\u4e00\u4e2a\u8bed\u8a00\u6240\u8868\u8fbe\u7684\u3002\u8fd9\u5c31\u662f\u672c\u8282\u6807\u9898\u4e2d\u7684\u201cexpressive power\u201d\u7684\u542b\u4e49\u3002 \u5173\u4e8eexpressive power\uff0c\u53c2\u89c1\uff1a \u7ef4\u57fa\u767e\u79d1 Expressive power \u7ef4\u57fa\u767e\u79d1 Combinatory categorial grammar \uff08\u5176\u4e2d\u63d0\u53ca\u4e86expressive power\uff09","title":"\u8bed\u8a00\u7684expressive power"},{"location":"Post/Language/Language/#_3","text":"\u901a\u8fc7\u524d\u9762\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5e94\u8be5\u5df2\u7ecf\u5bf9\u8bed\u8a00\u6709\u4e86\u66f4\u52a0\u5bbd\u6cdb\u7684\u8ba4\u8bc6\u4e86\u3002\u4e0d\u540c\u7684\u5b66\u79d1\u521b\u5efa\u4e86\u5404\u81ea\u7684\u7406\u8bba\u4f53\u7cfb\uff08\u521b\u5efa\u4e86\u6982\u5ff5\u3001\u89c4\u5219\u7b49\uff09\uff0c\u8fd9\u5c31\u5f62\u6210\u4e86\u8be5\u5b66\u79d1\u7684\u7279\u6709\u7684 \u8bed\u8a00 \uff0c\u8fd9\u5c31\u5f62\u6210\u4e86\u5bf9\u4e8e\u540c\u4e00\u4e2a\u4e8b\u7269\uff0c\u5404\u4e2a\u5b66\u79d1\u90fd\u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u7684\u8bed\u8a00\u6765\u5bf9\u5b83\u8fdb\u884c\u63cf\u8ff0\uff0c\u8fd9\u5c31\u597d\u6bd4\u5bf9\u4e8e\u201c\u82f9\u679c\u201d\uff0c\u4e2d\u6587\u3001\u82f1\u6587\u3001\u6cd5\u6587\u6709\u7740\u5404\u81ea\u7684\u63cf\u8ff0\u65b9\u5f0f\u3002 \u62e5\u6709\u8fd9\u6837\u7684\u8ba4\u77e5\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u6bd4\u5982\uff0c\u5f53\u6211\u4eec\u5728\u9605\u8bfb\u7ef4\u57fa\u767e\u79d1\u7684\u4e00\u4e9b\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u5e38\u5e38\u4f1a\u78b0\u5230\u7684\u4e00\u79cd\u60c5\u51b5\u662f\u67d0\u67d0\u6982\u5ff5\uff0c\u6570\u5b66\u4e2d\u600e\u4e48\u63cf\u8ff0\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u600e\u4e48\u63cf\u8ff0\u3001\u8bed\u8a00\u5b66\u4e2d\u600e\u4e48\u63cf\u8ff0\u3002 \u62e5\u6709\u8fd9\u6837\u7684\u8ba4\u77e5\u5bf9\u4e8e\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u5c24\u5176\u91cd\u8981\uff0c\u6b63\u5982\u5728\u672c\u6587\u5f00\u5934\u505a\u8bf4\u7684\uff1a \u6211\u4eec\u6240\u505a\u7684\u5f88\u591a\u5de5\u4f5c\uff0c\u5c31\u662f\u5c06\u4eba\u4eec\u4f7f\u7528 natural language \u3001 language of mathematics \u7b49\u8bed\u8a00\u7684\u63cf\u8ff0\uff0c\u8f6c\u6362\u4e3a programming language \u7684\u63cf\u8ff0","title":"\u4f7f\u7528\u4e0d\u540c\u7684\u5b66\u79d1\u7684\u8bed\u8a00\u6765\u8fdb\u884c\u63cf\u8ff0"},{"location":"Post/Language/Language/#_4","text":"NLP compiler-principle automata-and-formal-language","title":"\u6211\u5bf9\u201c\u8bed\u8a00\u201d\u7684\u63a2\u7d22"},{"location":"Post/Recursion/","text":"\u5173\u4e8e\u672c\u7ae0 # \u9012\u5f52\u662f\u4e00\u79cd\u4f18\u826f\u7684\u7279\u6027\uff0c\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u90fd\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u3002\u5728\u591a\u4e2a\u5de5\u7a0b\u4e2d\u90fd\u4f1a\u6d89\u53ca\u5230\u9012\u5f52\uff0c\u6240\u4ee5\u672c\u7ae0\u5bf9\u9012\u5f52\u5b9a\u4e49\u53ca\u9012\u5f52\u8fdb\u884c\u8bba\u8ff0\u3002\u672c\u7ae0\u5148\u8bba\u8ff0\u9012\u5f52\u5b9a\u4e49\uff0c\u7136\u540e\u8bba\u8ff0\u66f4\u52a0\u62bd\u8c61\u7684\u9012\u5f52\uff0c\u56e0\u4e3a\u524d\u8005\u76f8\u5bf9\u800c\u6765\u8bf4\u66f4\u52a0\u6613\u4e8e\u7406\u89e3\u3002","title":"Introduction"},{"location":"Post/Recursion/#_1","text":"\u9012\u5f52\u662f\u4e00\u79cd\u4f18\u826f\u7684\u7279\u6027\uff0c\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u90fd\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u3002\u5728\u591a\u4e2a\u5de5\u7a0b\u4e2d\u90fd\u4f1a\u6d89\u53ca\u5230\u9012\u5f52\uff0c\u6240\u4ee5\u672c\u7ae0\u5bf9\u9012\u5f52\u5b9a\u4e49\u53ca\u9012\u5f52\u8fdb\u884c\u8bba\u8ff0\u3002\u672c\u7ae0\u5148\u8bba\u8ff0\u9012\u5f52\u5b9a\u4e49\uff0c\u7136\u540e\u8bba\u8ff0\u66f4\u52a0\u62bd\u8c61\u7684\u9012\u5f52\uff0c\u56e0\u4e3a\u524d\u8005\u76f8\u5bf9\u800c\u6765\u8bf4\u66f4\u52a0\u6613\u4e8e\u7406\u89e3\u3002","title":"\u5173\u4e8e\u672c\u7ae0"},{"location":"Post/Recursion/Recursion/","text":"Recursion # Recursion (adjective: recursive ) occurs when a thing is defined in terms of itself or of its type. Recursion is used in a variety of disciplines ranging from linguistics to logic . The most common application of recursion is in mathematics and computer science , where a function being defined is applied within its own definition. While this apparently defines an infinite number of instances (function values), it is often done in such a way that no loop or infinite chain of references can occur. SUMMARY : \u5982\u679c\u51fa\u73b0loop\u6216\u8005infinite chain\uff0c\u5219\u7a0b\u5e8f\u5c31\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\uff1b Formal definitions # In mathematics and computer science, a class of objects or methods exhibits recursive behavior when it can be defined by two properties: A simple base case (or cases)\u2014a terminating scenario that does not use recursion to produce an answer A set of rules that reduces \uff08\u8fd9\u4e2a\u8bcd\u7528\u5f97\u975e\u5e38\u597d\uff09 all other cases toward the base case For example, the following is a recursive definition of a person's ancestors: One's parents are one's ancestors ( base case ). The ancestors of one's ancestors are also one's ancestors ( recursion step ). The Fibonacci sequence is a classic example of recursion: $ {\\text{Fib}}(0)=0{\\text{ as base case 1,}} $ $ {\\text{Fib}}(1)=1{\\text{ as base case 2,}} $ $ {\\text{For all integers }}n>1,~{\\text{ Fib}}(n):={\\text{Fib}}(n-1)+{\\text{Fib}}(n-2). $ Many mathematical axioms\uff08\u516c\u7406\uff09 are based upon recursive rules . For example, the formal definition of the natural numbers by the Peano axioms can be described as: 0 is a natural number, and each natural number has a successor, which is also a natural number. By this base case and recursive rule, one can generate the set of all natural numbers. Recursively defined mathematical objects include functions , sets , and especially fractals . There are various more tongue-in-cheek \"definitions\" of recursion; see recursive humor . In mathematics # Recursively defined sets # SUMMARY : \u9012\u5f52\u7684\u5b9a\u4e49\u96c6\u5408 Main article: Recursive definition Example: the natural numbers # See also: Closure (mathematics) The canonical example of a recursively defined set is given by the natural numbers : 0 is in $ \\mathbb {N} $ if n is in $ \\mathbb {N} $, then n + 1 is in $ \\mathbb {N} $ The set of natural numbers is the smallest set satisfying the previous two properties. In mathematical logic, the Peano axioms (or Peano postulates or Dedekind\u2013Peano axioms), are axioms for the natural numbers presented in the 19th century by the German mathematician Richard Dedekind and by the Italian mathematician Giuseppe Peano . The Peano Axioms define the natural numbers referring to a recursive successor function and addition and multiplication as recursive functions. Finite subdivision rules # Main article: Finite subdivision rule Finite subdivision rules are a geometric form of recursion, which can be used to create fractal-like images. A subdivision rule starts with a collection of polygons labelled by finitely many labels, and then each polygon is subdivided into smaller labelled polygons in a way that depends only on the labels of the original polygon. This process can be iterated. The standard `middle thirds' technique for creating the Cantor set is a subdivision rule, as is barycentric subdivision . Functional recursion # SUMMARY : \u9012\u5f52\u51fd\u6570 A function may be recursively defined in terms of itself. A familiar example is the Fibonacci number sequence: F ( n ) = F ( n \u2212 1) + F ( n \u2212 2). For such a definition to be useful, it must lead to non-recursively defined values, in this case F (0) = 0 and F (1) = 1. A famous recursive function is the Ackermann function , which, unlike the Fibonacci sequence, cannot be expressed without recursion. Proofs involving recursive definitions # Applying the standard technique of proof by cases to recursively defined sets or functions, as in the preceding sections, yields structural induction , a powerful generalization of mathematical induction widely used to derive proofs in mathematical logic and computer science. Recursive optimization # Dynamic programming is an approach to optimization that restates a multiperiod or multistep optimization problem in recursive form. The key result in dynamic programming is the Bellman equation , which writes the value of the optimization problem at an earlier time (or earlier step) in terms of its value at a later time (or later step). The recursion theorem # SUMMARY : \u9012\u5f52\u5b9a\u7406 In set theory , this is a theorem guaranteeing that recursively defined functions exist. Given a set X , an element a of X and a function $ f:X\\rightarrow X $, the theorem states that there is a unique function $ F:\\mathbb {N} \\rightarrow X $ (where $ \\mathbb {N} $ denotes the set of natural numbers including zero) such that $ F(0)=a $ $ F(n+1)=f(F(n)) $ for any natural number n . In computer science # Main article: Recursion (computer science) A common method of simplification is to divide a problem into subproblems of the same type. As a computer programming technique, this is called divide and conquer and is key to the design of many important algorithms. Divide and conquer serves as a top-down\uff08\u81ea\u9876\u5411\u4e0b\uff09 approach to problem solving, where problems are solved by solving smaller and smaller instances. A contrary approach is dynamic programming . This approach serves as a bottom-up\uff08\u81ea\u5e95\u5411\u4e0a\uff09 approach, where problems are solved by solving larger and larger instances, until the desired size is reached. A classic example of recursion is the definition of the factorial function, given here in C code: unsigned int factorial(unsigned int n) { if (n == 0) { return 1; } else { return n * factorial(n - 1); } } The function calls itself recursively on a smaller version of the input (n - 1) and multiplies the result of the recursive call by n , until reaching the base case , analogously to the mathematical definition of factorial. Recursion in computer programming is exemplified when a function is defined in terms of simpler, often smaller versions of itself. The solution to the problem is then devised by combining the solutions obtained from the simpler versions of the problem. One example application of recursion is in parsers for programming languages. The great advantage of recursion is that an infinite set of possible sentences, designs or other data can be defined, parsed or produced by a finite computer program. Recurrence relations \uff08\u9012\u5f52\u5173\u7cfb\uff09are equations\uff08\u65b9\u7a0b\u5f0f\uff09 to define one or more sequences recursively. Some specific kinds of recurrence relation can be \"solved\" to obtain a non-recursive definition. Use of recursion in an algorithm has both advantages and disadvantages. The main advantage is usually simplicity. The main disadvantage is that the memory usage of recursive algorithms may grow very quickly, rendering them impractical.","title":"Recursion"},{"location":"Post/Recursion/Recursion/#recursion","text":"Recursion (adjective: recursive ) occurs when a thing is defined in terms of itself or of its type. Recursion is used in a variety of disciplines ranging from linguistics to logic . The most common application of recursion is in mathematics and computer science , where a function being defined is applied within its own definition. While this apparently defines an infinite number of instances (function values), it is often done in such a way that no loop or infinite chain of references can occur. SUMMARY : \u5982\u679c\u51fa\u73b0loop\u6216\u8005infinite chain\uff0c\u5219\u7a0b\u5e8f\u5c31\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\uff1b","title":"Recursion"},{"location":"Post/Recursion/Recursion/#formal-definitions","text":"In mathematics and computer science, a class of objects or methods exhibits recursive behavior when it can be defined by two properties: A simple base case (or cases)\u2014a terminating scenario that does not use recursion to produce an answer A set of rules that reduces \uff08\u8fd9\u4e2a\u8bcd\u7528\u5f97\u975e\u5e38\u597d\uff09 all other cases toward the base case For example, the following is a recursive definition of a person's ancestors: One's parents are one's ancestors ( base case ). The ancestors of one's ancestors are also one's ancestors ( recursion step ). The Fibonacci sequence is a classic example of recursion: $ {\\text{Fib}}(0)=0{\\text{ as base case 1,}} $ $ {\\text{Fib}}(1)=1{\\text{ as base case 2,}} $ $ {\\text{For all integers }}n>1,~{\\text{ Fib}}(n):={\\text{Fib}}(n-1)+{\\text{Fib}}(n-2). $ Many mathematical axioms\uff08\u516c\u7406\uff09 are based upon recursive rules . For example, the formal definition of the natural numbers by the Peano axioms can be described as: 0 is a natural number, and each natural number has a successor, which is also a natural number. By this base case and recursive rule, one can generate the set of all natural numbers. Recursively defined mathematical objects include functions , sets , and especially fractals . There are various more tongue-in-cheek \"definitions\" of recursion; see recursive humor .","title":"Formal definitions"},{"location":"Post/Recursion/Recursion/#in-mathematics","text":"","title":"In mathematics"},{"location":"Post/Recursion/Recursion/#recursively-defined-sets","text":"SUMMARY : \u9012\u5f52\u7684\u5b9a\u4e49\u96c6\u5408 Main article: Recursive definition","title":"Recursively defined sets"},{"location":"Post/Recursion/Recursion/#example-the-natural-numbers","text":"See also: Closure (mathematics) The canonical example of a recursively defined set is given by the natural numbers : 0 is in $ \\mathbb {N} $ if n is in $ \\mathbb {N} $, then n + 1 is in $ \\mathbb {N} $ The set of natural numbers is the smallest set satisfying the previous two properties. In mathematical logic, the Peano axioms (or Peano postulates or Dedekind\u2013Peano axioms), are axioms for the natural numbers presented in the 19th century by the German mathematician Richard Dedekind and by the Italian mathematician Giuseppe Peano . The Peano Axioms define the natural numbers referring to a recursive successor function and addition and multiplication as recursive functions.","title":"Example: the natural numbers"},{"location":"Post/Recursion/Recursion/#finite-subdivision-rules","text":"Main article: Finite subdivision rule Finite subdivision rules are a geometric form of recursion, which can be used to create fractal-like images. A subdivision rule starts with a collection of polygons labelled by finitely many labels, and then each polygon is subdivided into smaller labelled polygons in a way that depends only on the labels of the original polygon. This process can be iterated. The standard `middle thirds' technique for creating the Cantor set is a subdivision rule, as is barycentric subdivision .","title":"Finite subdivision rules"},{"location":"Post/Recursion/Recursion/#functional-recursion","text":"SUMMARY : \u9012\u5f52\u51fd\u6570 A function may be recursively defined in terms of itself. A familiar example is the Fibonacci number sequence: F ( n ) = F ( n \u2212 1) + F ( n \u2212 2). For such a definition to be useful, it must lead to non-recursively defined values, in this case F (0) = 0 and F (1) = 1. A famous recursive function is the Ackermann function , which, unlike the Fibonacci sequence, cannot be expressed without recursion.","title":"Functional recursion"},{"location":"Post/Recursion/Recursion/#proofs-involving-recursive-definitions","text":"Applying the standard technique of proof by cases to recursively defined sets or functions, as in the preceding sections, yields structural induction , a powerful generalization of mathematical induction widely used to derive proofs in mathematical logic and computer science.","title":"Proofs involving recursive definitions"},{"location":"Post/Recursion/Recursion/#recursive-optimization","text":"Dynamic programming is an approach to optimization that restates a multiperiod or multistep optimization problem in recursive form. The key result in dynamic programming is the Bellman equation , which writes the value of the optimization problem at an earlier time (or earlier step) in terms of its value at a later time (or later step).","title":"Recursive optimization"},{"location":"Post/Recursion/Recursion/#the-recursion-theorem","text":"SUMMARY : \u9012\u5f52\u5b9a\u7406 In set theory , this is a theorem guaranteeing that recursively defined functions exist. Given a set X , an element a of X and a function $ f:X\\rightarrow X $, the theorem states that there is a unique function $ F:\\mathbb {N} \\rightarrow X $ (where $ \\mathbb {N} $ denotes the set of natural numbers including zero) such that $ F(0)=a $ $ F(n+1)=f(F(n)) $ for any natural number n .","title":"The recursion theorem"},{"location":"Post/Recursion/Recursion/#in-computer-science","text":"Main article: Recursion (computer science) A common method of simplification is to divide a problem into subproblems of the same type. As a computer programming technique, this is called divide and conquer and is key to the design of many important algorithms. Divide and conquer serves as a top-down\uff08\u81ea\u9876\u5411\u4e0b\uff09 approach to problem solving, where problems are solved by solving smaller and smaller instances. A contrary approach is dynamic programming . This approach serves as a bottom-up\uff08\u81ea\u5e95\u5411\u4e0a\uff09 approach, where problems are solved by solving larger and larger instances, until the desired size is reached. A classic example of recursion is the definition of the factorial function, given here in C code: unsigned int factorial(unsigned int n) { if (n == 0) { return 1; } else { return n * factorial(n - 1); } } The function calls itself recursively on a smaller version of the input (n - 1) and multiplies the result of the recursive call by n , until reaching the base case , analogously to the mathematical definition of factorial. Recursion in computer programming is exemplified when a function is defined in terms of simpler, often smaller versions of itself. The solution to the problem is then devised by combining the solutions obtained from the simpler versions of the problem. One example application of recursion is in parsers for programming languages. The great advantage of recursion is that an infinite set of possible sentences, designs or other data can be defined, parsed or produced by a finite computer program. Recurrence relations \uff08\u9012\u5f52\u5173\u7cfb\uff09are equations\uff08\u65b9\u7a0b\u5f0f\uff09 to define one or more sequences recursively. Some specific kinds of recurrence relation can be \"solved\" to obtain a non-recursive definition. Use of recursion in an algorithm has both advantages and disadvantages. The main advantage is usually simplicity. The main disadvantage is that the memory usage of recursive algorithms may grow very quickly, rendering them impractical.","title":"In computer science"},{"location":"Post/Recursion/Recursive-Definition/","text":"Recursive definition # \u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u5bf9\u4e8edefinition\uff08\u5b9a\u4e49\uff09\u8fd9\u4e2a\u8bcd\u80af\u5b9a\u4e0d\u4f1a\u964c\u751f\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u5929\u90fd\u5728\u201c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u201d\u3001\u201c\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u201d\u3002\u7ef4\u57fa\u767e\u79d1\u7684 definition \u5185\u5bb9\u6bd4\u8f83\u6df1\u5965\uff0c\u672c\u6587\u5c06\u7b80\u5355\u5730\u6765\u8bf4definition\uff0c\u5b9a\u4e49\u5c31\u662f\u5728\u524d\u6587\u4e2d\u6240\u63d0\u53ca\u7684\u201c\u63cf\u8ff0\u201d\uff0c\u4e0d\u8fc7\u5b9a\u4e49\u6709\u7740\u66f4\u591a\u9650\u5236\u3002\u672c\u6587\u91cd\u70b9\u7b80\u8ff0\u7684\u662f Recursive definition \uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c recursion \u65e0\u5904\u4e0d\u5728\uff0c\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u5e94\u8be5\u5bf9\u5b83\u4fdd\u6301\u654f\u611f\uff0c\u5bf9\u4e8e\u6240\u6709\u5177\u5907 recursion \u7279\u6027\u7684\uff08\u5305\u62ec\u7c7b\u578b\u3001\u8fc7\u7a0b\u7b49\uff09\uff0c\u90fd\u80fd\u591f\u7ed9\u51fa\u5176 Recursive definition \u3002 Recursive definition # In mathematics and computer science , a recursive definition , or inductive definition , is used to define the elements in a set in terms of other elements in the set ( Aczel 1977:740ff). Some examples of recursively-definable objects include factorials , natural numbers , Fibonacci numbers , and the Cantor ternary set . NOTE: \u4e0a\u8ff0\u5bf9recursive definition\u7684\u63cf\u8ff0\u4f7f\u7528\u7684\u662f\u6570\u5b66\u4e2d\u7684set\u7684\u6982\u5ff5\uff0c\u6570\u5b66\u4e2d\u7684set\u8868\u793a\u6240\u6709\u5177\u5907\u67d0\u4e00\u7279\u6027\u7684object\u7684\u96c6\u5408\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u5177\u5907\u76f8\u540ctype\u7684object\u653e\u5230\u4e00\u4e2aset\u4e2d\u3002\u4e0b\u9762\u6211\u5c06\u5b83\u8f6c\u6362\u4e3asoftware engineer\u66f4\u52a0\u719f\u6089\u7684type\uff08\u7c7b\u578b\uff09\u7684\u6982\u5ff5\uff1a \u89c4\u5b9a\u5c5e\u4e8e\u540c\u4e00\u4e2aset\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u5177\u6709\u76f8\u540c\u7c7b\u578b\u7684\u5143\u7d20\uff0c\u5219recursively-definable object\u662f\u7531\u76f8\u540c\u7c7b\u578b\u7684\u5176\u4ed6object\uff08\u5373\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u5176\u4ed6\u5143\u7d20\uff09\u6765\u8fdb\u884c\u5b9a\u4e49\u7684\uff08\u6784\u6210\uff09\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u6211\u4eec\u5c06set\u7406\u89e3\u4e3atype\u540e\uff0c\u539f\u6765\u7684\u63cf\u8ff0\u5c31\u53d8\u6210\u4e86software engineer\u975e\u5e38\u4efb\u610f\u7406\u89e3\u7684\u4e86\u3002 A recursive definition of a function defines values of the function for some inputs in terms of the values of the same function for other (usually smaller) inputs. For example, the factorial function n ! is defined by the rules 0! = 1. ( n + 1)! = ( n + 1)\u00b7 n !. NOTE: \u539f\u6587\u4e2d\u7ed9\u51fa\u4e86\u4e24\u79cd\uff1arecursively defined functions and sets Examples of recursive definitions # Recursive grammar # \u53c2\u89c1\uff1a \u7ef4\u57fa\u767e\u79d1 Recursive grammar \u9f99\u4e66 2.2.1 Definition of Grammars Recursive definition in computer science # \u6709\u592a\u591a\u592a\u591a\u7684\u7b97\u6cd5\u3001\u7ed3\u6784\u90fd\u662f\u53ef\u4ee5\u4f7f\u7528recursive definition\u7684\u3002 \u4e00\u822c\u5e26\u6709\u201csub\u201d\u7684\u90fd\u662f\u53ef\u4ee5\u8fdb\u884crecursive definition\u7684\uff0c\u6bd4\u5982subtree\uff0csublist \u80fd\u591frecursive definition\u7684\uff0c\u79f0\u5b83\u5177\u5907\u9012\u5f52\u6027\u3002 Recursive definition and closure # \u6309\u7167recursively defined sets\u7684\u6982\u5ff5\uff0c\u8fd9\u4e2aset\u5728\u6784\u9020\u65b0\u5143\u7d20\u7684operation\u4e0b\u662fclosed\u7684\uff08\u53c2\u89c1 Closure (mathematics) \uff09\u3002 Recursive definition and hierachy # \u53ef\u4ee5\u4f7f\u7528recursive definition\u8fdb\u884c\u5b9a\u4e49\u7684structure\uff0c\u90fd\u5177\u5907hierarchy\u7279\u6027\u3002 Recursive data types # \u8fd9\u5728 data-structure \u4e2d\u4f1a\u8fdb\u884c\u8ba8\u8bba\u3002","title":"Recursive-Definition"},{"location":"Post/Recursion/Recursive-Definition/#recursive-definition","text":"\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u5bf9\u4e8edefinition\uff08\u5b9a\u4e49\uff09\u8fd9\u4e2a\u8bcd\u80af\u5b9a\u4e0d\u4f1a\u964c\u751f\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u5929\u90fd\u5728\u201c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u201d\u3001\u201c\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u201d\u3002\u7ef4\u57fa\u767e\u79d1\u7684 definition \u5185\u5bb9\u6bd4\u8f83\u6df1\u5965\uff0c\u672c\u6587\u5c06\u7b80\u5355\u5730\u6765\u8bf4definition\uff0c\u5b9a\u4e49\u5c31\u662f\u5728\u524d\u6587\u4e2d\u6240\u63d0\u53ca\u7684\u201c\u63cf\u8ff0\u201d\uff0c\u4e0d\u8fc7\u5b9a\u4e49\u6709\u7740\u66f4\u591a\u9650\u5236\u3002\u672c\u6587\u91cd\u70b9\u7b80\u8ff0\u7684\u662f Recursive definition \uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c recursion \u65e0\u5904\u4e0d\u5728\uff0c\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u5e94\u8be5\u5bf9\u5b83\u4fdd\u6301\u654f\u611f\uff0c\u5bf9\u4e8e\u6240\u6709\u5177\u5907 recursion \u7279\u6027\u7684\uff08\u5305\u62ec\u7c7b\u578b\u3001\u8fc7\u7a0b\u7b49\uff09\uff0c\u90fd\u80fd\u591f\u7ed9\u51fa\u5176 Recursive definition \u3002","title":"Recursive definition"},{"location":"Post/Recursion/Recursive-Definition/#recursive-definition_1","text":"In mathematics and computer science , a recursive definition , or inductive definition , is used to define the elements in a set in terms of other elements in the set ( Aczel 1977:740ff). Some examples of recursively-definable objects include factorials , natural numbers , Fibonacci numbers , and the Cantor ternary set . NOTE: \u4e0a\u8ff0\u5bf9recursive definition\u7684\u63cf\u8ff0\u4f7f\u7528\u7684\u662f\u6570\u5b66\u4e2d\u7684set\u7684\u6982\u5ff5\uff0c\u6570\u5b66\u4e2d\u7684set\u8868\u793a\u6240\u6709\u5177\u5907\u67d0\u4e00\u7279\u6027\u7684object\u7684\u96c6\u5408\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u5177\u5907\u76f8\u540ctype\u7684object\u653e\u5230\u4e00\u4e2aset\u4e2d\u3002\u4e0b\u9762\u6211\u5c06\u5b83\u8f6c\u6362\u4e3asoftware engineer\u66f4\u52a0\u719f\u6089\u7684type\uff08\u7c7b\u578b\uff09\u7684\u6982\u5ff5\uff1a \u89c4\u5b9a\u5c5e\u4e8e\u540c\u4e00\u4e2aset\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u5177\u6709\u76f8\u540c\u7c7b\u578b\u7684\u5143\u7d20\uff0c\u5219recursively-definable object\u662f\u7531\u76f8\u540c\u7c7b\u578b\u7684\u5176\u4ed6object\uff08\u5373\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u5176\u4ed6\u5143\u7d20\uff09\u6765\u8fdb\u884c\u5b9a\u4e49\u7684\uff08\u6784\u6210\uff09\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u6211\u4eec\u5c06set\u7406\u89e3\u4e3atype\u540e\uff0c\u539f\u6765\u7684\u63cf\u8ff0\u5c31\u53d8\u6210\u4e86software engineer\u975e\u5e38\u4efb\u610f\u7406\u89e3\u7684\u4e86\u3002 A recursive definition of a function defines values of the function for some inputs in terms of the values of the same function for other (usually smaller) inputs. For example, the factorial function n ! is defined by the rules 0! = 1. ( n + 1)! = ( n + 1)\u00b7 n !. NOTE: \u539f\u6587\u4e2d\u7ed9\u51fa\u4e86\u4e24\u79cd\uff1arecursively defined functions and sets","title":"Recursive definition"},{"location":"Post/Recursion/Recursive-Definition/#examples-of-recursive-definitions","text":"","title":"Examples of recursive definitions"},{"location":"Post/Recursion/Recursive-Definition/#recursive-grammar","text":"\u53c2\u89c1\uff1a \u7ef4\u57fa\u767e\u79d1 Recursive grammar \u9f99\u4e66 2.2.1 Definition of Grammars","title":"Recursive grammar"},{"location":"Post/Recursion/Recursive-Definition/#recursive-definition-in-computer-science","text":"\u6709\u592a\u591a\u592a\u591a\u7684\u7b97\u6cd5\u3001\u7ed3\u6784\u90fd\u662f\u53ef\u4ee5\u4f7f\u7528recursive definition\u7684\u3002 \u4e00\u822c\u5e26\u6709\u201csub\u201d\u7684\u90fd\u662f\u53ef\u4ee5\u8fdb\u884crecursive definition\u7684\uff0c\u6bd4\u5982subtree\uff0csublist \u80fd\u591frecursive definition\u7684\uff0c\u79f0\u5b83\u5177\u5907\u9012\u5f52\u6027\u3002","title":"Recursive definition in computer science"},{"location":"Post/Recursion/Recursive-Definition/#recursive-definition-and-closure","text":"\u6309\u7167recursively defined sets\u7684\u6982\u5ff5\uff0c\u8fd9\u4e2aset\u5728\u6784\u9020\u65b0\u5143\u7d20\u7684operation\u4e0b\u662fclosed\u7684\uff08\u53c2\u89c1 Closure (mathematics) \uff09\u3002","title":"Recursive definition and closure"},{"location":"Post/Recursion/Recursive-Definition/#recursive-definition-and-hierachy","text":"\u53ef\u4ee5\u4f7f\u7528recursive definition\u8fdb\u884c\u5b9a\u4e49\u7684structure\uff0c\u90fd\u5177\u5907hierarchy\u7279\u6027\u3002","title":"Recursive definition and hierachy"},{"location":"Post/Recursion/Recursive-Definition/#recursive-data-types","text":"\u8fd9\u5728 data-structure \u4e2d\u4f1a\u8fdb\u884c\u8ba8\u8bba\u3002","title":"Recursive data types"},{"location":"Post/Recursion/Term-with-recursion-in-computer-science/","text":"Term with recursion in computer science # Recursive grammar Recursion theory\uff08Computability theory\uff09 Recursive language Recursive set Recursively enumerable set","title":"Term-with-recursion-in-computer-science"},{"location":"Post/Recursion/Term-with-recursion-in-computer-science/#term-with-recursion-in-computer-science","text":"Recursive grammar Recursion theory\uff08Computability theory\uff09 Recursive language Recursive set Recursively enumerable set","title":"Term with recursion in computer science"}]}